<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内存与存储系统</title>
      <link href="/2023/080926390.html"/>
      <url>/2023/080926390.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是存储系统"><a href="#什么是存储系统" class="headerlink" title="什么是存储系统"></a>什么是存储系统</h2><p>一个提供了读写、控制类接口、能够安全有效地把数据持久化的软件，就可以称为存储系统</p><h2 id="系统特点"><a href="#系统特点" class="headerlink" title="系统特点"></a>系统特点</h2><ol><li>性能敏感</li><li>容易受硬件影响</li><li>存储系统代码，既简单又复杂</li></ol><h2 id="单机存储"><a href="#单机存储" class="headerlink" title="单机存储"></a>单机存储</h2><p>单机存储&#x3D;单个计算机节点上的存储软件系统，一般不涉及网络交互</p><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>文件系统的管理单元：文件</p><p>文件系统接口：文件系统繁多，如Ext2&#x2F;3&#x2F;4,sysfs,rootfs等，但都遵循VFS的统一抽象接口</p><p>Linux文件系统的两大数据结构：Index Node&amp;Directory Entry</p><ul><li>Index Node 记录文件元数据，如d、大小、权限、磁盘位置等，inode是一个文件的唯一标识，会被存储到磁盘上，inode的总数在格式化文件系统时就固定了</li><li>Directory Entry：记录文件名、inode:指针，层级关系(parent)等，dentry是内存结构，与inodel的关系是N:l(hardlink的实现)</li></ul><h3 id="key-value存储"><a href="#key-value存储" class="headerlink" title="key-value存储"></a>key-value存储</h3><p>常见使用方式：put(k,)&amp;get(k)</p><p>常见数据结构：LSM-Tree,某种程度上牺性读性能，追求写入性能</p><p>拳头产品：RocksDB</p><h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><h3 id="HDFS-堪称大数据时代的基石"><a href="#HDFS-堪称大数据时代的基石" class="headerlink" title="HDFS:堪称大数据时代的基石"></a>HDFS:堪称大数据时代的基石</h3><p>HDFS核心特点：</p><ul><li>支持海量数据存储</li><li>高容错性</li><li>弱POSIX语义</li><li>使用普通x86服务器，性价比高</li></ul><h3 id="Ceph-开源分布式存储系统里的万金油"><a href="#Ceph-开源分布式存储系统里的万金油" class="headerlink" title="Ceph:开源分布式存储系统里的万金油"></a>Ceph:开源分布式存储系统里的万金油</h3><p>Ceph的核心特点</p><ul><li>一套系统支持对象接口、块接口、文件接口，</li><li>但是一切皆对象</li><li>数据写入采用主备复制模型</li><li>数据分布模型采用CRUSH算法</li></ul><h2 id="单机数据库"><a href="#单机数据库" class="headerlink" title="单机数据库"></a>单机数据库</h2><p>单机数据库：单个计算机节点上的数据库系统</p><p>事务在单机内执行，也可能通过网络交互实现分布式事务</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系型数据库的通用组件：</p><p>Query Engine一负责解析quey,生成查询计划</p><ul><li><p>Txn Manager一负责事务并发管理</p></li><li><p>Lock Manager一负责锁相关的策略</p></li><li><p>Storage Engine一负责组织内存&#x2F;磁盘数据结构</p></li><li><p>Replication一负责主备同步</p></li><li><p>关键内存数据结构：B-Tree、B+-Tree、LRU List等</p></li><li><p>关键磁盘数据结构：WriteAheadLog(RedoLog)、Page</p></li></ul><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><h3 id="Elasticsearch特点："><a href="#Elasticsearch特点：" class="headerlink" title="Elasticsearch特点："></a>Elasticsearch特点：</h3><ul><li>面向「文档」存储</li><li>文档可序列化成SON,支持嵌套</li><li>存在「index」，index&#x3D;文档的集合</li><li>存储和构建索引能力依赖Lucene引擎</li><li>实现了大量搜索数据结构&amp;算法</li><li>支持RESTFU儿API,也支持弱SQL交互</li></ul><h3 id="mongoDB特点："><a href="#mongoDB特点：" class="headerlink" title="mongoDB特点："></a>mongoDB特点：</h3><ul><li>面向「文档」存储</li><li>文档可序列化成SON&#x2F;BSON,支持嵌套</li><li>存在「collection],collection&#x3D;文档的集合</li><li>存储和构建索引能力依赖wiredTiger引擎</li><li>4.0后开始支持事务（多文档、跨分片多文档等】</li><li>常用client&#x2F;SDK交互，可通过插件转译支持弱SQL</li></ul><h3 id="redis特点："><a href="#redis特点：" class="headerlink" title="redis特点："></a>redis特点：</h3><ul><li>数据结构丰富(hash表、set、Zset、ist)</li><li>C语言实现，超高性能</li><li>主要基于内存，但支持AOF&#x2F;RDB特久化</li><li>常用redis-ci&#x2F;多语言SDK交互</li></ul><h2 id="新技术演进-概览"><a href="#新技术演进-概览" class="headerlink" title="新技术演进-概览"></a>新技术演进-概览</h2><p>软件架构变更</p><p>智能存储格式转换</p><p>新硬件革命</p><h3 id="高性能硬件"><a href="#高性能硬件" class="headerlink" title="高性能硬件"></a>高性能硬件</h3><p>RDMA网络：</p><ul><li>传统的网络协议栈，需要基于多层网络协议处理数据包，存在用户态&amp;内核态的切换，足够通用但性能不是最佳</li><li>RDMA是kernel bypass的流派，不经过传统的网络协议栈，可以把用户态虚拟内存映射给网卡，减少携贝开销，减少c印u开销</li></ul><p>Persistent Memory:</p><ul><li>IO时延介于SSD和Memory:之间，约百纳秒量级</li><li>可以用作易失性内存(memory mode),也可以用作特久化介质(app-direct)</li></ul><p>可编程交换机：</p><p>P4 Switch,配有编译器、计算单元、DRAM,可以在交换机层对网络包做计算逻辑。在数据库场景下，可以实现缓存一致性协议等</p><p>CPU&#x2F;GPU&#x2F;DPU:</p><ul><li>:CPU:从multi-.core走向may-cofe</li><li>GPU:强大的算力&amp;越来越大的显存空间</li><li>DPU:异构计算，减轻CPU的workload</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><ul><li>块存储：存储软件栈里的底层系统，接口过于朴素</li><li>文件存储：日常使用最广泛的存储系统，接口十分友好，实现五花八门</li><li>对象存储：公有云上的王牌产品，immutable语义加持</li><li>key-value存储：形式最灵活，存在大量的开源&#x2F;黑盒产品</li></ul><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><ul><li>关系型数据库：基于关系和关系代数构建的，一般支持事务和SQL访问，使用体验友好的存储产品</li><li>非关系型数据库：结构灵活，访问方式灵活，针对不同场景有不同的针对性产品</li></ul><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><ul><li>数据分布策略：决定了数据怎么分布到集群里的多个物理节点，是否均匀，是否能做到高性能</li><li>数据复制协议：影响1○路径的性能、机器故障场景的处理方式</li><li>分布式事务算法：多个数据库节点协同保障一个事务的ACD特性的算法，通常基于2pC的思想设计</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 存储系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM框架</title>
      <link href="/2023/080927216.html"/>
      <url>/2023/080927216.html</url>
      
        <content type="html"><![CDATA[<h2 id="GORM概述"><a href="#GORM概述" class="headerlink" title="GORM概述"></a>GORM概述</h2><p>GORM 是基于 Go 语言的一个自动化的 ORM（Object Relational Mapping） 框架，用于对 Go 语言结构体和数据库字段之间的映射。</p><p>GORM 官方支持的数据库类型有四个</p><ol><li>MySQL（最流行的数据库）</li><li>PostgreSQL（开源协议较为宽松，很多有定制数据库需求的公司都会基于PostgreSQL进行二开）</li><li>SQLite（轻量级的关系型数据库，主要用于移动设备）</li><li>SQL Server（微软推出的关系型数据库管理系统）</li></ol><p>官方给出的使用文档链接为：<a href="https://gorm.io/zh_CN/docs/index.html">https://gorm.io/zh_CN/docs/index.html</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-powershell"><code class="language-powershell">go get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>gormgo get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>driver<span class="token operator">/</span>sqlite</code></pre><h2 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"gorm.io/driver/mysql"</span>    <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:521109#Xsq@tcp(127.0.0.1:3306)/grom_test?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注意：</strong>想要正确的处理 <code>time.Time</code> ，您需要带上 <code>parseTime</code> 参数， (<a href="https://github.com/go-sql-driver/mysql#parameters">更多参数</a>) 要支持完整的 UTF-8 编码，您需要将 <code>charset=utf8</code> 更改为 <code>charset=utf8mb4</code> 查看 <a href="https://mathiasbynens.be/notes/mysql-utf8mb4">此文章</a> 获取详情</p></blockquote><p>MySQL驱动程序提供了一些高级配置可以在初始化过程中使用，例如：</p><blockquote><pre class=" language-go"><code class="language-go">db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DSN<span class="token punctuation">:</span> <span class="token string">"gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// DSN data source name</span>  DefaultStringSize<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// string 类型字段的默认长度</span>  DisableDatetimePrecision<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span>  DontSupportRenameIndex<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span>  DontSupportRenameColumn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span>  SkipInitializeWithVersion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据当前 MySQL 版本自动配置</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></blockquote><h2 id="自定义驱动"><a href="#自定义驱动" class="headerlink" title="自定义驱动"></a>自定义驱动</h2><p>GORM允许通过DriverName选项自定义MySQL驱动，例如</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token boolean">_</span> <span class="token string">"example.com/my_mysql_driver"</span>  <span class="token string">"gorm.io/driver/mysql"</span>  <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DriverName<span class="token punctuation">:</span> <span class="token string">"my_mysql_driver"</span><span class="token punctuation">,</span>  DSN<span class="token punctuation">:</span> <span class="token string">"gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="GORM操作"><a href="#GORM操作" class="headerlink" title="GORM操作"></a>GORM操作</h2><p>gorm可自定义结构体来创建数据库表，可以将表结构直接生成对应的表，例如可以定义一个<code>Product</code>结构，具体内容如下</p><pre class=" language-go"><code class="language-go">gorm<span class="token punctuation">.</span>Model    Code  <span class="token builtin">string</span> <span class="token string">`gorm:"VARCHAR(20);NOT NULL;column:prodname"`</span>    Price <span class="token builtin">uint</span>   <span class="token string">`gorm:"INT;PRIMARY KEY;column:price"`</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过类型后的语句可实现对改变量的类型定义以及名称的更换，同样也可以自定义表名</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>Product<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"us_user"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以设置全局的logger，可以实现在每次执行sql语句的时候会答应每一行的sql</p><pre class=" language-go"><code class="language-go">newLogger <span class="token operator">:=</span> logger<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>        log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//日志输出的目标，前缀和日志包含的内容</span>        logger<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            SlowThreshold<span class="token punctuation">:</span>             time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 慢 SQL 阈值</span>            LogLevel<span class="token punctuation">:</span>                  logger<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 日志级别</span>            IgnoreRecordNotFoundError<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 忽略ErrRecordNotFound（记录未找到）错误</span>            Colorful<span class="token punctuation">:</span>                  <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 禁用彩色打印</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span></code></pre><p>下面是一些常用的gorm创建表，添加数据，以及查询数据的API实践</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    db <span class="token operator">:=</span> <span class="token function">DirectConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功"</span><span class="token punctuation">)</span>    err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"自动建表失败 err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        code <span class="token operator">:=</span> <span class="token string">"D"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> code<span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">101</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">102</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">103</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span>Product    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname = ?"</span><span class="token punctuation">,</span> <span class="token string">"D22"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname &lt;> ?"</span><span class="token punctuation">,</span> <span class="token string">"D22"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname IN ?"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"D11"</span><span class="token punctuation">,</span> <span class="token string">"D12"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname LIKE ?"</span><span class="token punctuation">,</span> <span class="token string">"%D%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname = ? AND price = ?"</span><span class="token punctuation">,</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> <span class="token string">"102"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">101</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果要修改查询的内容的话，则可以通过直接修改该引用变量，在保存即可</p><pre class=" language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> NewUser<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NewUser<span class="token punctuation">)</span>NewUser<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span>db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NewUser<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将NewUser的Name修改成"Tom"</span></code></pre><p>也可以实现删除操作</p><pre class=" language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NewUser<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 为软删除，将字段中"deleted_at"设为当前时间，在数据库中仍存在该调数据</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言操作MySQL</title>
      <link href="/2023/080928006.html"/>
      <url>/2023/080928006.html</url>
      
        <content type="html"><![CDATA[<p>Go语言操作MySQL</p><p>Go语言中的<code>database/sql</code>不包含数据库驱动，<code>database/sql</code>提供了保证SQL或类SQL数据库的泛用接口。使用sql包时必须注入（至少）一个数据库驱动。 参见<a href="https://link.juejin.cn/?target=http://golang.org/s/sqldrivers">golang.org&#x2F;s&#x2F;sqldriver…</a> 获取驱动列表。 更多用法示例，参见wiki页面：<a href="https://link.juejin.cn/?target=http://golang.org/s/sqlwiki">golang.org&#x2F;s&#x2F;sqlwiki</a>。</p><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><p>通过GO页面作为客户端访问数据库</p><ul><li>因为GO语言没有提供任何官方数据库驱动，所以需要安装第三方函数库。</li><li>由于在github上安装，所以需要安装git软件,必要时配置SSH插件</li></ul><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql<span class="token comment" spellcheck="true">//-u: 这是go get命令的一个标志，表示更新已有的模块或下载已有模块的新版本。</span></code></pre><h3 id="使用MySQL驱动"><a href="#使用MySQL驱动" class="headerlink" title="使用MySQL驱动"></a>使用MySQL驱动</h3><p>Open打开一个<code>driverName</code>指定的数据库驱动，<code>dataSourceName</code>指定数据源具有一定的格式连接信息字符串。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//sql.Open()中的数据库连接串格式为：`"用户名:密码@tcp(IP:端口)/数据库?charset=utf8"`</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>driverName<span class="token punctuation">,</span> dataSourceName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>DB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sql.Open()中的数据库连接串格式为："用户名:密码@tcp(IP:端口)/数据库?charset=utf8"</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:521109#Xsq@tcp(127.0.0.1:3306)/mysql?charset=utf8"</span>    <span class="token comment" spellcheck="true">//open打开一个drivername指定的数据库，datasourcename指定数据源</span>    <span class="token comment" spellcheck="true">//不会校验用户和密码是否正确，只会对dsn的格式进行检测</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打开数据库失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试连接数据库，Ping方法可检查数据源名称是否合法,账号密码是否正确。</span>    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败，请检查用户密码是否正确，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接数据库成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="初始化连接"><a href="#初始化连接" class="headerlink" title="初始化连接"></a>初始化连接</h2><h3 id="DB（数据库对象）"><a href="#DB（数据库对象）" class="headerlink" title="DB（数据库对象）"></a>DB（数据库对象）</h3><p>sql.DB类型代表了数据库,其它语言操作数据库的时候,需要创建一个连接,对于Go而言则是需要创建一个数据库类型, 它不是数据库连接,Go中的连接来自内部实现的连接池,连接的建立是惰性的,连接将会在操作的时候,由连接池创建并维护。</p><h2 id="数据库CRUD"><a href="#数据库CRUD" class="headerlink" title="数据库CRUD"></a>数据库CRUD</h2><p>DB的类型为:<code>*sql.DB</code>，有了DB之后我们就可以执行CRUD操作。Go将数据库操作分为两类：<code>Query</code>与<code>Exec</code>。两者的区别在于前者会返回结果，而后者不会。</p><ul><li><code>Query</code>表示查询，它会从数据库获取查询结果（一系列行，可能为空）。</li><li><code>Exec</code>表示执行语句，它不会返回行。</li></ul><p>此外还有两种常见的数据库操作模式：</p><ul><li><code>QueryRow</code>表示只返回一行的查询，作为<code>Query</code>的一个常见特例。</li><li><code>Prepare</code>表示准备一个需要多次使用的语句，供后续执行用。</li></ul><h3 id="建库建表语句"><a href="#建库建表语句" class="headerlink" title="建库建表语句"></a>建库建表语句</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> go_test<span class="token punctuation">;</span><span class="token keyword">use</span> go_test<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户昵称'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户年龄'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h3 id="DB-exec方法说明"><a href="#DB-exec方法说明" class="headerlink" title="DB.exec方法说明"></a>DB.exec方法说明</h3><p>插入、更新和删除操作都使用<code>Exec()</code>方法。<code>Exec</code>执行一次命令（包括查询、删除、更新、插入等），返回的<code>Result</code>是对已执行的SQL命令的总结。参数args表示query中的占位参数。</p><ul><li>插入数据后可以通过 LastInsertId() 方法获取插入数据的主键 id</li><li>通过 RowsAffected 可以获取受影响的行数</li><li>通过 Exec() 方法插入数据，返回的结果是 sql.Result 类型</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><p>需要注意的是,不同的数据库,使用的占位符不同,<code>mysql</code>采用<code>?</code>作为占位符,其余数据库占位符说明如下：</p><p><img src="/2023/080928006/image-20230809123701627.png" alt="image-20230809123701627"></p><h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">upDateRow</span><span class="token punctuation">(</span>updateuser user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"update user set age=?,name=? where id = ?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>age<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>name<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败 err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">insertData</span><span class="token punctuation">(</span>data user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO `user`(id,name,age) VALUES (?,?,?)"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> data<span class="token punctuation">.</span>id<span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">deleteData</span><span class="token punctuation">(</span>dedata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"DELETE FROM user WHERE id = ? AND name =?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>id<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="单行查询"><a href="#单行查询" class="headerlink" title="单行查询"></a>单行查询</h4><p>单行查询db.QueryRow()执行一次查询，并期望返回最多一行结果（即Row)。语法如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">QueryRow</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>Row</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">queryRow</span><span class="token punctuation">(</span>qudata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id=?"</span>    row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> qudata<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">var</span> u user    err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取数据错误, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="多行查询"><a href="#多行查询" class="headerlink" title="多行查询"></a>多行查询</h4><p>多行查询db.Query()执行一次查询，返回多行结果（即sql.Rows类型的结果集）, 迭代后者使用<code>Next()</code>方法，然后使用<code>Scan()</code>方法给对应类型变量赋值,以便取出结果,最后再把结果集关闭（释放连接）语法如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Rows<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">queryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id>? OR id&lt;?"</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="MySQL预处理"><a href="#MySQL预处理" class="headerlink" title="MySQL预处理"></a>MySQL预处理</h2><h3 id="什么是预处理"><a href="#什么是预处理" class="headerlink" title="什么是预处理"></a>什么是预处理</h3><p><strong>普通SQL语句得执行过程</strong></p><ul><li>客户端对SQL语句进行占位符替换得到完整的SQL语句。</li><li>客户端发送完整SQL语句到MySQL服务端</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端</li></ul><p><strong>预处理执行过程：</strong></p><ol><li>把SQL语句分成两部分，命令部分与数据部分。</li><li>先把命令部分发送给MySQL服务端，MySQL服务端进行SQL预处理。</li><li>然后把数据部分发送给MySQL服务端，MySQL服务端对SQL语句进行占位符替换。</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端</li></ol><h3 id="为什么要预处理"><a href="#为什么要预处理" class="headerlink" title="为什么要预处理"></a>为什么要预处理</h3><ul><li>优化MySQL服务器重复执行SQL的方法，可以提升服务器性能，提前让服务器编译，一次编译多次执行，节省后续编译的成本。</li><li>避免SQL注入问题。</li></ul><h3 id="MySQL预处理-1"><a href="#MySQL预处理-1" class="headerlink" title="MySQL预处理"></a>MySQL预处理</h3><p><code>Prepare</code>方法会先将sql语句发送给<code>MySQL</code>服务端，返回一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Prepare</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Stmt<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">prepareQueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id > ?"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"预处理失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="增删改预处理"><a href="#增删改预处理" class="headerlink" title="增删改预处理"></a>增删改预处理</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">prepareInsertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO user(id,name,age) VALUES(?,?,?)"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"预处理失败, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        id <span class="token operator">:=</span> <span class="token number">20</span> <span class="token operator">+</span> i        name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"批量处理成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务：一个最小的不可再分的工作单元；通常一个事务对应一个完整的业务(例如银行账户转账业务，该业务就是一个最小的工作单元)，同时这个完整的业务需要执行多次的<code>DML(insert、update、delete)</code>语句共同联合完成。A转账给B，这里面就需要执行两次update操作。 在<code>MySQL</code>中只有使用了<code>Innodb</code>数据库引擎的数据库或表才支持事务。事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。</p><h3 id="事务得ACID"><a href="#事务得ACID" class="headerlink" title="事务得ACID"></a>事务得ACID</h3><p>通常事务必须满足4个条件<code>（ACID）</code>：原子性（<code>Atomicity</code>，或称不可分割性）、一致性（<code>Consistency</code>）、隔离性（<code>Isolation</code>，又称独立性）、持久性（<code>Durability</code>）。</p><p><img src="/2023/080928006/image-20230809161935363.png" alt="image-20230809161935363"></p><h3 id="事务相关方法"><a href="#事务相关方法" class="headerlink" title="事务相关方法"></a>事务相关方法</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//开始事务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Tx<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//提交事务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>Tx<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment" spellcheck="true">//回滚事务</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>Tx<span class="token punctuation">)</span> <span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">transDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> tx <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务开启失败，err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"UPDATE user SET age=age+? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">=</span> <span class="token string">"UPDATE user SET age=age-? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务提交失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据更新成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"database/sql"</span>    <span class="token string">"fmt"</span>    <span class="token comment" spellcheck="true">//执行driver.go文件中的init(),向"database/sql"注册一个mysql的驱动</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>    <span class="token comment" spellcheck="true">//import 下划线（如：import _ github/demo）的作用：</span>    <span class="token comment" spellcheck="true">//当导入一个包时，该包下的文件里所有init()函数都会被执行，然而，</span>    <span class="token comment" spellcheck="true">//有些时候我们并不需要把整个包都导入进来，仅仅是是希望它执行init()函数而已。</span>    <span class="token comment" spellcheck="true">//这个时候就可以使用 import _ 引用该包。</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB <span class="token comment" spellcheck="true">//定义一个全局对象</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sql.Open()中的数据库连接串格式为："用户名:密码@tcp(IP:端口)/数据库?charset=utf8"</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:521109#Xsq@tcp(127.0.0.1:3306)/go_test?charset=utf8"</span>    <span class="token comment" spellcheck="true">//open打开一个drivername指定的数据库，datasourcename指定数据源</span>    <span class="token comment" spellcheck="true">//不会校验用户和密码是否正确，只会对dsn的格式进行检测</span>    db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打开数据库失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试连接数据库，Ping方法可检查数据源名称是否合法,账号密码是否正确。</span>    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败，请检查用户密码是否正确，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接数据库成功"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个和数据库表结构相同的结构体</span><span class="token keyword">type</span> user <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id   <span class="token builtin">int</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"初始化数据库失败err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// updateuser := user&amp;#123;</span>    <span class="token comment" spellcheck="true">// id:   7,</span>    <span class="token comment" spellcheck="true">// name: "蜡笔小新",</span>    <span class="token comment" spellcheck="true">// age:  98,</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// insertdata := user&amp;#123;</span>    <span class="token comment" spellcheck="true">// id:   7,</span>    <span class="token comment" spellcheck="true">// name: "王涛",</span>    <span class="token comment" spellcheck="true">// age:  23,</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// insertdata = user&amp;#123;</span>    <span class="token comment" spellcheck="true">// id:   8,</span>    <span class="token comment" spellcheck="true">// name: "肖素琴",</span>    <span class="token comment" spellcheck="true">// age:  25,</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// insertData(insertdata)</span>    <span class="token comment" spellcheck="true">// insertData(insertdata)</span>    <span class="token comment" spellcheck="true">// upDateRow(updateuser)</span>    <span class="token comment" spellcheck="true">// queryRow(insertdata)</span>    <span class="token comment" spellcheck="true">// queryRows()</span>    <span class="token function">transDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">upDateRow</span><span class="token punctuation">(</span>updateuser user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"update user set age=?,name=? where id = ?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>age<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>name<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败 err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">insertData</span><span class="token punctuation">(</span>data user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO `user`(id,name,age) VALUES (?,?,?)"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> data<span class="token punctuation">.</span>id<span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">deleteData</span><span class="token punctuation">(</span>dedata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"DELETE FROM user WHERE id = ? AND name =?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>id<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">queryRow</span><span class="token punctuation">(</span>qudata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id=?"</span>    row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> qudata<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">var</span> u user    err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取数据错误, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">queryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id>? OR id&lt;?"</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">prepareQueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id > ?"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"预处理失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">prepareInsertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO user(id,name,age) VALUES(?,?,?)"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"预处理失败, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        id <span class="token operator">:=</span> <span class="token number">20</span> <span class="token operator">+</span> i        name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"批量处理成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">transDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> tx <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务开启失败，err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"UPDATE user SET age=age+? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">=</span> <span class="token string">"UPDATE user SET age=age-? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务提交失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据更新成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC框架分层设计</title>
      <link href="/2023/080864291.html"/>
      <url>/2023/080864291.html</url>
      
        <content type="html"><![CDATA[<h2 id="远程函数调用-RPC-remote-procedure-calls"><a href="#远程函数调用-RPC-remote-procedure-calls" class="headerlink" title="远程函数调用(RPC - remote procedure calls)"></a>远程函数调用(RPC - remote procedure calls)</h2><p><img src="/2023/080864291/image-20230808163931882.png" alt="image-20230808163931882"></p><h3 id="RPC-需要解决的问题"><a href="#RPC-需要解决的问题" class="headerlink" title="RPC 需要解决的问题"></a>RPC 需要解决的问题</h3><ol><li>函数映射</li><li>数据转换成字节流</li><li>网络传输</li></ol><h2 id="RPC概念模型"><a href="#RPC概念模型" class="headerlink" title="RPC概念模型"></a>RPC概念模型</h2><p><img src="/2023/080864291/image-20230808164244545.png" alt="image-20230808164244545"></p><h2 id="一次RPC的完整过程"><a href="#一次RPC的完整过程" class="headerlink" title="一次RPC的完整过程"></a>一次RPC的完整过程</h2><p>IDL文件：通过一种中立的方式来描述接口，使得在不同平台上运行的对象和用不同语言编写的程序可以相互通信</p><p>生成代码：通过编译器工具把IDL文件转换成语言对应的静态库</p><p>编解码：从内存中表示到字节序列的转换成为编码，反之为解码，也常叫做序列化和反序列化</p><p>通信协议：规范了数据在网络中的传输内容和格式，出必须的请求、响应数据外，通常还会在包含额外的元数据</p><p>网络传输：通常基于成熟的网络库TCP&#x2F;UDP传输</p><h2 id="高性能RPC框架所满足的条件"><a href="#高性能RPC框架所满足的条件" class="headerlink" title="高性能RPC框架所满足的条件"></a>高性能RPC框架所满足的条件</h2><ol><li>框架通过中间件来注入各种服务治理策略，保障服务的稳定性</li><li>通过提供合理的默认配置和方便的命令行工具可以提升框架的易用性</li><li>框架应当提供丰富的扩展点，例如核心的传输层和协议层</li><li>观测性除了传统的Log、Metric和Tracing之外，内置状态暴露服务也很有必要</li><li>性能可以从多个层面去优化，例如选择高性能的编解码协议和网络库</li></ol>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 框架设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt带参的槽函数传递</title>
      <link href="/2023/08087724.html"/>
      <url>/2023/08087724.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用QSignalMapper实现无参信号到有参信号的传递"><a href="#使用QSignalMapper实现无参信号到有参信号的传递" class="headerlink" title="使用QSignalMapper实现无参信号到有参信号的传递"></a>使用QSignalMapper实现无参信号到有参信号的传递</h2><p>QSignalMapper类将来自于一些有标识的发送者的signal连接在一起。</p><p>该类收集一组无参的signal，然后以<a href="https://so.csdn.net/so/search?q=%E6%95%B4%E5%9E%8B&spm=1001.2101.3001.7020">整型</a>数、或字符串、或widget参数为参数重新将这些signal再次发送出去，而这里的整型数、字符串和widget参数就是原本发送该signal对象的标识信息。</p><p>QSignalMapper支持将特定的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>或整型数对应到特定的对象上，这是通过setMapping()做到的。该特定对象的signal可以被连接到QSignalMapper的map() slot，而map()会发射mapped() signal，注意这里的mapped() signal是带参数的，而参数类型就是原本发送最初signal的特定对象的标识信息，即整型数或字符串等。使用removeMappings()可以删除对应关系。</p><p>改类支持四种在参数的传递，在实际使用中，我们更喜欢通过QObject来传递参数，因为这样相当于可以自定义新的数据类型，实现都数据的封装，从而实现对槽函数大量参数的传递</p><p><img src="/2023/08087724/image-20230808132808679.png" alt="image-20230808132808679"></p><h3 id="定义自定义类型数据TestInt，用于传递新类型的数据"><a href="#定义自定义类型数据TestInt，用于传递新类型的数据" class="headerlink" title="定义自定义类型数据TestInt，用于传递新类型的数据"></a>定义自定义类型数据TestInt，用于传递新类型的数据</h3><pre class=" language-c++"><code class="language-c++">#ifndef TESTINT_H#define TESTINT_H#include <QObject>#include<QTextEdit>class TestInt : public QObject&#123;    Q_OBJECTpublic:    explicit TestInt(QObject *parent = nullptr);    TestInt(QTextEdit* edit,const int& n);    int index;    QTextEdit* textEdit;signals:&#125;;#endif // TESTINT_H</code></pre><pre class=" language-c++"><code class="language-c++">#include "testint.h"TestInt::TestInt(QObject *parent) : QObject(parent),index(0),textEdit(nullptr)&#123;&#125;TestInt::TestInt(QTextEdit *edit, const int &n)&#123;    textEdit=edit;    index=n;&#125;</code></pre><h3 id="通过QSignalMapper带参实现通信"><a href="#通过QSignalMapper带参实现通信" class="headerlink" title="通过QSignalMapper带参实现通信"></a>通过QSignalMapper带参实现通信</h3><pre class=" language-c++"><code class="language-c++">#ifndef WIDGET_H#define WIDGET_H#include <QWidget>#include<QTextEdit>#include<QVector>QT_BEGIN_NAMESPACEnamespace Ui &#123; class Widget; &#125;QT_END_NAMESPACEclass Widget : public QWidget&#123;    Q_OBJECTpublic:    Widget(QWidget *parent = nullptr);    ~Widget();protected slots:    void myslots(QObject* edit);signals:private:    Ui::Widget *ui;    QVector<QVector<QString>>res50;    QVector<QString>title;&#125;;#endif // WIDGET_H</code></pre><pre class=" language-C++"><code class="language-C++">#include "widget.h"#include "ui_widget.h"#include<QDebug>#include<QPushButton>#include<QVBoxLayout>#include<QTextEdit>#include<QSignalMapper>#include"testint.h"Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui->setupUi(this);    this->resize(500,300);    this->setWindowTitle(tr("推理结果"));    title=QVector<QString>&#123;"刀具", "刀具名称", "刀具编号", "刃数"&#125;;    res50=QVector<QVector<QString>>&#123;        &#123;"50-T01", "铣刀D14R2", "通用", " 4"&#125;,        &#123;"50 - T02", "D10R5球头铣刀"," 2B151 / 1424"," 4"&#125;,        &#123;"50 - T03"," 铣刀D8R4", "2B151 / 1423","4"&#125;&#125;;    QSignalMapper* signalmapper=new QSignalMapper(this);    QVBoxLayout* vLayout = new QVBoxLayout();    QPushButton* btn1 = new QPushButton("D14R2铣刀");  vLayout->addWidget(btn1);    QPushButton* btn2 = new QPushButton("D10R5铣刀");  vLayout->addWidget(btn2);    QPushButton* btn3 = new QPushButton("D8R4铣刀");  vLayout->addWidget(btn3);    QTextEdit* txtEdit = new QTextEdit();    txtEdit->setFont(QFont(tr("Times New Roman"), 10, QFont::Bold));    vLayout->addWidget(txtEdit);    this->setLayout(vLayout);    connect(btn1,&QPushButton::clicked,signalmapper,static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));    connect(btn2,&QPushButton::clicked,signalmapper,static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));    connect(btn3,&QPushButton::clicked,signalmapper,static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));    signalmapper->setMapping(btn1,(QObject*)(new TestInt(txtEdit,0)));    signalmapper->setMapping(btn2,(QObject*)(new TestInt(txtEdit,1)));    signalmapper->setMapping(btn3,(QObject*)(new TestInt(txtEdit,2)));    connect(signalmapper,static_cast<void (QSignalMapper::*)(QObject*)>(&QSignalMapper::mapped),this,&Widget::myslots);&#125;Widget::~Widget()&#123;    delete ui;&#125;void Widget::myslots(QObject* edit)&#123;    TestInt* obj=(TestInt*)edit;    obj->textEdit->clear();    for(int i=0;i<4;i++)&#123;        QString temp=title[i]+":\t"+res50[obj->index][i];        obj->textEdit->append(temp);    &#125;&#125;</code></pre><p><img src="/2023/08087724/image-20230808133624417.png" alt="image-20230808133624417"></p><p>通过点击随意一个按钮，实现数据的传递。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与槽函数 </tag>
            
            <tag> QSignalMapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高质量编程及编程规范</title>
      <link href="/2023/080737510.html"/>
      <url>/2023/080737510.html</url>
      
        <content type="html"><![CDATA[<p>高质量编程</p><h3 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h3><p>gofmt go语言官方提供的工具，能自动格式化go语言代码为官方统一风格</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><img src="/2023/080737510/725c6dbcc4c19f62fa90debc98915d2d.png" alt="725c6dbcc4c19f62fa90debc98915d2d"></p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p><img src="/2023/080737510/03fc7271e5b871203a0bad4b2a58518d.png" alt="03fc7271e5b871203a0bad4b2a58518d"></p><p><img src="/2023/080737510/656bcfafdcb57f2f4b86309d53b354e9.png" alt="656bcfafdcb57f2f4b86309d53b354e9"></p><p><img src="/2023/080737510/de8c9d70f573cb6555b4a2377325d94c.png" alt="de8c9d70f573cb6555b4a2377325d94c"></p><h3 id="错误处理规范"><a href="#错误处理规范" class="headerlink" title="错误处理规范"></a>错误处理规范</h3><p><img src="/2023/080737510/26986ec789c8bd0356b90de09d7d8c48.png" alt="26986ec789c8bd0356b90de09d7d8c48"></p><p><img src="/2023/080737510/1e3f59db46d84a0ca009fff4706b6d43.png" alt="1e3f59db46d84a0ca009fff4706b6d43"></p><p><img src="/2023/080737510/b127e8282b86de897775ca339f2b6488.png" alt="b127e8282b86de897775ca339f2b6488"></p><p><img src="/2023/080737510/702171a4bd9456442bbbe0d8460b3359.png" alt="702171a4bd9456442bbbe0d8460b3359"></p><p><img src="/2023/080737510/d4502b350023254b8399747a1476c293.png" alt="d4502b350023254b8399747a1476c293"></p><p><img src="/2023/080737510/b5619f3e521a1ca64fedbfe3bb9adaf9.png" alt="b5619f3e521a1ca64fedbfe3bb9adaf9"></p><p><img src="/2023/080737510/2fba950aa600325bee87c40e7df585c0.png" alt="2fba950aa600325bee87c40e7df585c0"></p><h2 id="性能调优实战"><a href="#性能调优实战" class="headerlink" title="性能调优实战"></a>性能调优实战</h2><p>通过使用Benchmark工具进行性能测试，关键行步骤为：</p><ul><li>IDE在寻找测试代码时的关键一步是寻找以<code>_test.go</code>结尾的文件，</li><li>在该文件中寻找一个Benchmark开头的函数作为测试函数</li></ul><h3 id="Slice（这与C-的vector很像）Map使用建议"><a href="#Slice（这与C-的vector很像）Map使用建议" class="headerlink" title="Slice（这与C++的vector很像）Map使用建议"></a>Slice（这与C++的vector很像）Map使用建议</h3><p>尽可能在使用make()初始化切片时提供容量信息</p><h3 id="字符串的处理上"><a href="#字符串的处理上" class="headerlink" title="字符串的处理上"></a>字符串的处理上</h3><p>在对字符串进行重复设计时，采用<code>strings.Builder</code>方法会获得更好的内存操作</p><pre class=" language-golang"><code class="language-golang">// 字符串处理func Plus(n int, str string) string &#123;    s := ""    for i := 0; i < n; i++ &#123;        s += str    &#125;    return s&#125;func StrBuilder(n int, str string) string &#123;    var builder strings.Builder    for i := 0; i < n; i++ &#123;        builder.WriteString(str)    &#125;    return builder.String()&#125;func ByteBuffer(n int, str string) string &#123;    buf := new(bytes.Buffer)    for i := 0; i < n; i++ &#123;        buf.WriteString(str)    &#125;    return buf.String()&#125;func BenchmarkPlus(b *testing.B) &#123;    for i := 0; i < b.N; i++ &#123;        Plus(10, "b")    &#125;&#125;func BenchmarkBuilder(b *testing.B) &#123;    for i := 0; i < b.N; i++ &#123;        StrBuilder(10, "b")    &#125;&#125;func BenchmarkByteBuffer(b *testing.B) &#123;    for i := 0; i < b.N; i++ &#123;        ByteBuffer(10, "b")    &#125;&#125;</code></pre><p><img src="/2023/080737510/a5ab679b9a86800009b29c6ea986bbe9.png" alt="a5ab679b9a86800009b29c6ea986bbe9"></p><h3 id="学会利用空结构体"><a href="#学会利用空结构体" class="headerlink" title="学会利用空结构体"></a>学会利用空结构体</h3><p>使用空结构体节省内存，空结构体struct{}实例不占据任何的内存空间</p><p>可作为各种场景下的占位符使用：节省资源，空结构体本身具有很强的语义，即这里不需要任何值，仅作为占位符</p><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>atomic包要比mutex的效率更好</p><h2 id="性能优化分析工具PPROF"><a href="#性能优化分析工具PPROF" class="headerlink" title="性能优化分析工具PPROF"></a>性能优化分析工具PPROF</h2><p><img src="/2023/080737510/20f3646f1dfb46f44e24da95a3a28044.png" alt="20f3646f1dfb46f44e24da95a3a28044"></p><p><img src="/2023/080737510/e2b04634ef62790a305a7ce7e00f89dd.png" alt="e2b04634ef62790a305a7ce7e00f89dd"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pprof 是 Go 语言的性能剖析工具，用于分析和优化 Go 程序的性能。它是 Go 标准库中的一个子命令，可以与 Go 工具链一起使用。pprof 支持多种类型的剖析数据，并可以生成交互式的可视化报告，帮助开发人员找出程序中的性能瓶颈。</p><p>&#x3D;&#x3D;$pprof 有两种使用方式$&#x3D;&#x3D;：</p><p>导出方式：通过在程序中调用 net&#x2F;http&#x2F;pprof 包中的函数，可以在程序运行时导出剖析数据，并使用浏览器查看可视化报告。</p><p>命令行方式：通过在程序运行后使用 go tool pprof 命令，导入已经生成的剖析数据文件，并查看分析结果。</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li>直接通过访问<code>http://localhost:6060/debug/pprof/</code>浏览器会得到一个可视化报告，其中会有相关的性能分析报告，但可视化效果较差</li><li>通过在powershell中使用<code>go tool pprof http://localhost:6060/debug/pprof/profile</code>命令可以查看CPU的使用情况，常用的命令有<code>top，list</code>等，使用<code>web</code>命令可以更加清晰的查看CPU的使用情况，但这需要下载对应的<code>graphviz</code>,下载连接为<a href="https://">https://graphviz.gitlab.io/download/</a></li><li><code>go tool pprof http://localhost:6060/debug/pprof/heap</code>命令可以查看内存使用状况，同样也可以通过上述方式进行问题定位</li><li>powershell中通过使用<code>$env:GODEBUG = &quot;gctrace=1&quot;; .\go-pprof-practice.exe | Select-String &quot;gc&quot;</code>命令查看频繁的内存回收，与其他操作系统不同的是调用<code>GODEBUG = &quot;gctrace=1&quot;</code>命令需要使用env标注，不可以直接使用grep进行筛查对应的命令为Select-string</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/allocs</code>查看内存分配情况</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/goroutline</code>可以查看协程泄漏</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/mutex</code>可以查看锁的竞争</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/block</code>可以查看阻塞情况</li><li>为了方便访问我们可以使用<code>go tool pprof -http=:8080 http://localhost:6060/debug/pprof/goroutine</code>在浏览器页面中进行访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2023/080735944.html"/>
      <url>/2023/080735944.html</url>
      
        <content type="html"><![CDATA[<p>再谈HTTP协议</p><h2 id="HTTP协议是什么"><a href="#HTTP协议是什么" class="headerlink" title="HTTP协议是什么"></a>HTTP协议是什么</h2><p>顾名思义：HTTP为超文本传输协议</p><p>HTTP（HyperText Transfer Protocol）被称为超文本传输协议，是因为它最初设计用于在互联网上传输超文本（hypertext）和超媒体（hypermedia）资源。超文本是一种非线性的、链接到其他相关文本的文本，而超媒体则包含文本之外的其他多媒体元素，如图像、音频和视频等。</p><h3 id="有如下特点："><a href="#有如下特点：" class="headerlink" title="有如下特点："></a>有如下特点：</h3><ul><li>请求-响应模型：客户端发送一个HTTP请求给服务器，请求某个资源（例如网页或图像），服务器接收请求后处理，并返回HTTP响应，其中包含请求的资源数据。</li><li>URI:URI是HTTP中用于标识资源的唯一地址。它通常由URL（Uniform Resource Locator）或URN（Uniform Resource Name）组成。URL是URI的一种常见类型，用于指定资源的位置（如<a href="http://example.com/resource%EF%BC%89%E3%80%82">http://example.com/resource）。</a></li><li>请求方法：HTTP定义了一些常用的请求方法，用于指示请求的操作类型。常见的方法有：<code>GET</code>:请求获取指定资源，<code>POST</code>向服务器提交数据，用于创建新的资源，<code>PUT</code>向服务器上传数据，用于更新指定资源,<code>DELETE</code>:请求删除指定资源.<code>HEAD</code>类似于GET请求，但只返回资源的头部信息，不返回实际数据</li><li>请求头和响应头：HTTP请求和响应都包含一系列头部信息，用于传递关于请求或响应的元数据。头部信息包含了各种标识、控制、认证和缓存等信息。这其中也包含传输内容所占的实际字节大小，该信息在包的处理上很重要</li><li>状态码：HTTP响应包含一个三位数字的状态码，用于指示请求的处理结果。常见的状态码有：200 OK：请求成功，服务器返回资源。404 Not Found：请求的资源不存在。500 Internal Server Error：服务器内部错误。</li><li>Cookie:Cokkie是一种在客户端存储数据的机制，用于在不同的HTTP请求之间维持状态，服务器可以在响应中发送Cookie客户端，客户端将其存储，并在后续的请求中发送回服务器</li><li>缓存：HTTP支持缓存机制，允许客户端在本地存储资源的副本，以减少对服务器的请求次数，提高性能和效率。</li><li>HTTPS:HTTPS（HTTP Secure）是HTTP的安全版本，通过使用加密技术（如SSL或TLS）来保护数据的传输安全。它在HTTP和TCP之间添加了一层安全通道，确保数据在传输过程中被加密。</li></ul><h2 id="协议里面有什么"><a href="#协议里面有什么" class="headerlink" title="协议里面有什么"></a>协议里面有什么</h2><p><img src="/2023/080735944/505184f180571ea14ad64843b9ca9e0e.png" alt="505184f180571ea14ad64843b9ca9e0e"></p><h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p><img src="/2023/080735944/1ea0dde4c49ffcf081f5695d59a56aa6.png" alt="1ea0dde4c49ffcf081f5695d59a56aa6"></p><h2 id="网络分层设计"><a href="#网络分层设计" class="headerlink" title="网络分层设计"></a>网络分层设计</h2><p><img src="/2023/080735944/16422a7dcbc36ce7a9501426096eb53f.png" alt="16422a7dcbc36ce7a9501426096eb53f"></p><p><img src="/2023/080735944/7c76a016af9c4e5d403d5be7908aef05.png" alt="7c76a016af9c4e5d403d5be7908aef05"></p><h3 id="路由层特点"><a href="#路由层特点" class="headerlink" title="路由层特点"></a>路由层特点</h3><p>路由层是指在服务端的一部分，用于根据客户端请求的路径来决定如何处理请求并响应相应的资源或操作，路由层通常是Web框架或者Web服务器的组件之一，负责解析请求的URL，并将其与相应的处理程序（Handler）或控制器（Controller）关联起来，从而执行相应的业务逻辑。其支持以下几种功能：</p><p>路由匹配：路由层会根据请求的URL路径，将请求映射到与之对应的处理程序。路由可以支持静态路径匹配（如&#x2F;users）和参数化路径匹配（如&#x2F;users&#x2F;{id}），后者可以捕获URL中的变量部分，并将其作为参数传递给处理程序。</p><p>HTTP方法：路由层支持指定HTTP请求方法（GET、POST、PUT、DELETE等），从而使不同的请求方法映射到不同的处理程序，实现对资源的不同操作。</p><p>中间件：路由层通常支持中间件的使用，中间件是一种类似拦截器的概念，用于在请求处理前后执行一些共用的逻辑，比如身份验证、日志记录、跨域处理等。</p><p>路由组：一些框架允许将多个相关的路由规则组织成路由组，从而使代码更加清晰和结构化。</p><p>路由的实现上可以通过map表实现，但这一类查找上还是不太方便</p><p>通过前缀匹配树(类似字典树)的方式可以快速的查找需要的路由</p><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><h3 id="1-为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。"><a href="#1-为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。" class="headerlink" title="1.为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。"></a>1.为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。</h3><p>&#x3D;&#x3D;优势：&#x3D;&#x3D;</p><ul><li>模块化和可维护性：分层设计将系统拆分为多个模块，每个模块专注于特定的功能。</li><li>可重用性：每个层级都被设计为独立的模块，可以在不同的应用场景中重复使用。</li><li>灵活性：由于各个层级相互独立，更容易对系统进行扩展或改进。</li><li>安全性：分层设计有助于隔离不同层级的功能，从而降低出现安全漏洞的风险</li></ul><p>&#x3D;&#x3D;劣势：&#x3D;&#x3D;</p><ul><li>性能损失：每个层级都需要处理传输的数据，并进行相应的处理。这可能导致一定的性能损失，特别是在处理大量数据或请求时。</li><li>复杂性：分层设计可能增加系统的复杂性。</li><li>网络开销：在分布式系统中，由于数据需要在不同层级之间传输，可能会增加网络开销，特别是在不同的物理位置之间。</li></ul><h3 id="2-现有开源社区HTTP框架有哪些优势与不足。"><a href="#2-现有开源社区HTTP框架有哪些优势与不足。" class="headerlink" title="2.现有开源社区HTTP框架有哪些优势与不足。"></a>2.现有开源社区HTTP框架有哪些优势与不足。</h3><p>Go语言中的现有的HTTP框架有以下几种</p><ol><li>net&#x2F;http:Go语言标准库中包含了一个简单但功能强大的HTTP包，可以用来构建基本的HTTP服务器和客户端。虽然不是框架，但足够处理许多HTTP任务，特别适合简单的Web应用。</li><li>Gin:Gin是一个快速而轻量级的HTTP框架，具有出色的性能。它提供了丰富的中间件支持，可用于快速构建高性能的Web应用程序和API。</li><li>Echo:Echo是另一个快速和轻量级的HTTP框架，类似于Gin，但更加简单和易于上手。</li><li>Iris:Iris是一个功能丰富的HTTP框架，提供了大量的工具和功能，用于构建复杂的Web应用程序。</li><li>Beego:Beego是一个全功能的Web框架，提供了许多内置组件和工具，用于构建大型的Web应用程序。</li><li>Chi:Chi是一个轻量级的、具有高性能的HTTP路由器。虽然不是完整的框架，但它提供了出色的路由功能，适用于构建自定义的HTTP服务。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言进阶与依赖管理</title>
      <link href="/2023/080736829.html"/>
      <url>/2023/080736829.html</url>
      
        <content type="html"><![CDATA[<h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p><img src="/2023/080736829/4f01606b98ffef9af3c5b7ac1e9543d8.png" alt="4f01606b98ffef9af3c5b7ac1e9543d8"></p><h2 id="线程与协程"><a href="#线程与协程" class="headerlink" title="线程与协程"></a>线程与协程</h2><p><img src="/2023/080736829/d88e1d1d11a3bfb68609b839357f9209.png" alt="d88e1d1d11a3bfb68609b839357f9209"></p><p>Go语言中可以通过go 开启一个协程，下述代码中的协程开启的写作方式通过C++中的Lambda表达式很像</p><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "time")func main() &#123;    HelloGoRoutine()&#125;func hello(i int) &#123;    fmt.Println("hello goroutine:" + fmt.Sprint(i))&#125;func HelloGoRoutine() &#123;    for i := 0; i < 5; i++ &#123;        go func(j int) &#123;            hello(j)        &#125;(i)    &#125;    time.Sleep(time.Second)&#125;</code></pre><p><img src="/2023/080736829/ab1dd80b7dc19188488668eebd0a09ed.png" alt="ab1dd80b7dc19188488668eebd0a09ed"></p><h2 id="消息通信"><a href="#消息通信" class="headerlink" title="消息通信"></a>消息通信</h2><p><img src="/2023/080736829/e329c79dc6a028a939a9b5564f2acc3c.png" alt="e329c79dc6a028a939a9b5564f2acc3c"></p><p><strong>channel 通过make来进行创建</strong></p><p><img src="/2023/080736829/6faefb0b1146b43fcfb8c3c5ace32eca.png" alt="6faefb0b1146b43fcfb8c3c5ace32eca"></p><h3 id="消息队列通信"><a href="#消息队列通信" class="headerlink" title="消息队列通信"></a>消息队列通信</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt")func main() &#123;    CalSquare()&#125;func CalSquare() &#123;    src := make(chan int)    dest := make(chan int, 3)    go func() &#123;        defer close(src)        for i := 0; i < 10; i++ &#123;            src <- i        &#125;    &#125;()    go func() &#123;        defer close(dest)        for i := range src &#123;            dest <- i * i        &#125;    &#125;()    for i := range dest &#123;        fmt.Println(i)    &#125;&#125;</code></pre><p><img src="/2023/080736829/6a364801d2be7363b5d902f0115387b8.png" alt="6a364801d2be7363b5d902f0115387b8"></p><h3 id="共享内存通信"><a href="#共享内存通信" class="headerlink" title="共享内存通信"></a>共享内存通信</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "sync"    //"time")var (    x    int64    lock sync.Mutex)func main() &#123;    add()&#125;func addWithLock() &#123;    for i := 0; i < 2000; i++ &#123;        lock.Lock()        x += 1        lock.Unlock()    &#125;&#125;func addWithoutLock() &#123;    for i := 0; i < 2000; i++ &#123;        x += 1    &#125;&#125;func add() &#123;    x = 0    var wg sync.WaitGroup    wg.Add(5)    for i := 0; i < 5; i++ &#123;        go func() &#123;            defer wg.Done()            addWithoutLock()        &#125;()    &#125;    wg.Wait()    //time.Sleep(time.Second)    fmt.Println("WithoutLock:", x)    var wg1 sync.WaitGroup    wg1.Add(5)    x = 0    for i := 0; i < 5; i++ &#123;        go func() &#123;            defer wg1.Done()            addWithLock()        &#125;()    &#125;    wg1.Wait()    //time.Sleep(time.Second)    fmt.Println("WithLock:", x)&#125;</code></pre><p><img src="/2023/080736829/e724de2e5e780233acd807118a4044a3.png" alt="e724de2e5e780233acd807118a4044a3"></p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p>bin 项目编译的二进制文件</p><p>pkg 项目编译的中间产物，加速编译</p><p>src 项目源码 项目代码直接依赖src下的代码</p><p>GOPATH 弊端：无法实现package的多版本控制</p><h3 id="GoVendor"><a href="#GoVendor" class="headerlink" title="GoVendor"></a>GoVendor</h3><p>项目目录下增加govender文件，所有依赖包副本形式放在$ProjectRoot&#x2F;vendor</p><p>依赖寻址方式：vendor&#x3D;&gt;GOPATH</p><p>通过每个项目引入一份依赖的副本，解决了多个项目需要同一个package依赖的冲突问题</p><h3 id="GoModule"><a href="#GoModule" class="headerlink" title="GoModule"></a>GoModule</h3><p>通过go.mod文件管理依赖包版本</p><p>通过go get&#x2F;go mod 指令工具管理依赖包</p><p><img src="/2023/080736829/db4029b4a0a32210de4e185841060d65.png" alt="db4029b4a0a32210de4e185841060d65"></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><img src="/2023/080736829/31f408ceb006fe08a34af10389d656ad.png" alt="31f408ceb006fe08a34af10389d656ad"></p><p><img src="/2023/080736829/681331c451405ed9e23d669a1e5a0dbb.png" alt="681331c451405ed9e23d669a1e5a0dbb"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>回归测试</p><p>集成测试</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><img src="/2023/080736829/7547969fb8089dec9c71f3e56c177d13.png" alt="7547969fb8089dec9c71f3e56c177d13"></p><p>&#x3D;&#x3D;<strong>单元测试规则：</strong>&#x3D;&#x3D;</p><ul><li>所有测试文件以_test.go结尾</li><li>func TestXxx(*Testing.T)</li><li>初始化逻辑放到TestMain中</li></ul><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p><img src="/2023/080736829/739cae0a1a4d2ffb8230fd71bfda9e68-1691420473372-13.png" alt="739cae0a1a4d2ffb8230fd71bfda9e68"></p><h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><p><img src="/2023/080736829/a150a547309a73572b3fa05e709b3f75.png" alt="a150a547309a73572b3fa05e709b3f75"></p><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><p><img src="/2023/080736829/48abbddc66ed2c4881a0480175904511.png" alt="48abbddc66ed2c4881a0480175904511"></p><p>数据层：数据model，外部数据的增删改查</p><p>逻辑层：业务entity，处理核心业务逻辑输出</p><p>视图层：视图view,处理何外部的交互逻辑</p><h3 id="组件工具"><a href="#组件工具" class="headerlink" title="组件工具"></a>组件工具</h3><p><img src="/2023/080736829/137351b8e6524a74075974b75ec14e56.png" alt="137351b8e6524a74075974b75ec14e56"></p><h2 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h2><ul><li><p>展示话题和回帖列表</p></li><li><p>暂不考虑前端页面实现，仅仅实现一个本地web服务</p></li><li><p>话题和回帖数据用文件存储</p><p>课后需要实现的内容为 支持发布帖子，本地id生成需要保证不重复，唯一性 append文件，更新索引</p></li></ul><h2 id="组件工具-1"><a href="#组件工具-1" class="headerlink" title="组件工具"></a>组件工具</h2><p>针对web服务，采用Go中已有的Gin框架实现，Gin 是一个用于构建 Web 应用程序和 API 的 Go 语言框架。它提供了高性能、易用的路由、中间件和其他功能，使得开发 Web 服务变得更加简单和高效。 Gin 是一个轻量级的框架，旨在快速地处理 HTTP 请求和响应。它的设计目标是提供最小的内存占用和高度优化的性能，因此在处理高并发的情况下表现出色。如果要使用的话需要import “github.com&#x2F;gin-gonic&#x2F;gin”</p><h2 id="GitHub知识"><a href="#GitHub知识" class="headerlink" title="GitHub知识"></a>GitHub知识</h2><p>针对课程源码中的GitHub库的使用上，有一些小的知识点，需要花时间去了解，对于源码中，为什么如何使用自己的GitHub包呢，首先，我们需要对go.mod中的module进行重新设置，需要更改成自己的GitHub的库地址例如下面这样： <code>module github.com/Mrmengqiushisan/go_test</code>，下一步需要通过将远端GitHub上的库进行发布并附带标签，这样我们在本地就可以随意访问我们自己的GitHub包了，例如这样<code>import &quot;github.com/Mrmengqiushisan/go_test/repository&quot;</code></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>想要实现整个功能，我们需要对该项目的结构进行分层，抽象模型的考虑上，可以分为两个：post,topic,通过两个结构体可以很好的实现，对于这两个类的如何想要实现单例模式的话，C++角度需要利用语法的机制做很多调整，但对于Go语言来说通过<code>postOnce sync.Once</code>即可实现，<code>sync.Once</code> 是 Go 语言标准库 <code>sync</code> 包中的一个结构体类型，用于实现只执行一次的操作。它通常用于确保在并发环境下某个函数只被执行一次，无论有多少个 goroutine 在同时调用该函数。 <code>sync.Once</code> 提供了一个 <code>Do</code> 方法，用于指定只执行一次的操作。该方法接收一个函数作为参数，当多个 goroutine 同时调用 <code>Do</code> 方法时，只有一个 goroutine 会执行传入的函数，其他 goroutine 将会等待执行结束。当第一个 goroutine 执行结束后，<code>done</code> 字段会被标记为已完成，后续的调用将不再执行传入的函数。所以是线程安全的，实现方式可以参考如下代码：</p><pre class=" language-golang"><code class="language-golang">package repositoryimport "sync"type Post struct &#123;    Id         int64  `json:"id"`    ParentId   int64  `json:"parent_id"`    Content    string `json:"content"`    CreateTime int64  `json:"create_time"`&#125;type PostDao struct &#123;&#125;var (    postDao  *PostDao    postOnce sync.Once)func NewPostDaoInstance() *PostDao &#123;    postOnce.Do(        func() &#123;            postDao = &PostDao&#123;&#125;        &#125;)    return postDao&#125;func (*PostDao) QueryPostsByParentId(parentid int64) []*Post &#123;    return postIndexMap[parentid]&#125;type Topic struct &#123;    Id         int64  `json:"id"`    Title      string `json:"title"`    Content    string `json:"content"`    CreateTime int64  `json:"create_time"`&#125;type TopicDao struct&#123;&#125;var (    topicDao  *TopicDao    topicOnce sync.Once)func NewTopicDaoInstance() *TopicDao &#123;    topicOnce.Do(        func() &#123;            topicDao = &TopicDao&#123;&#125;        &#125;)    return topicDao&#125;func (*TopicDao) QueryTopicById(id int64) *Topic &#123;    return topicIndexMap[id]&#125;</code></pre><h2 id="Map表的初始化创建"><a href="#Map表的初始化创建" class="headerlink" title="Map表的初始化创建"></a>Map表的初始化创建</h2><p>考虑到对帖子的更新修正以及及时访问，我们需要维护两个变量用来记录文件中已有的帖子数量，针对<code>InitTopicIndexMap InitPostIndexMap</code>这两个函数执行之前需要对该Map进行清除，以便于重新读写数据，同样也需要对文件数id进行置空，针对与这部分的实现主要有以下几个关键点：</p><ul><li>文件访问的函数使用 <code>os.open </code></li><li>拿到文件handle后如何通过<code>bufio.newScanner</code>实现文件的行遍历</li><li>map的处理行post和topic有所区别，因为post的map索引也是通过话题id来实现的，所以对于帖子的存储上我们需要通过切片方式进行存储，这样可以使用<code>append</code>方式进行追加</li></ul><pre class=" language-golang"><code class="language-golang">if len(postIndexMap) > 0 &#123;    postIndexMap = make(map[int64][]*Post)    postId = 0&#125;if len(topicIndexMap) > 0 &#123;    topicIndexMap = make(map[int64]*Topic)    topicId = 0&#125;</code></pre><h2 id="serivce设计"><a href="#serivce设计" class="headerlink" title="serivce设计"></a>serivce设计</h2><p>页面的设计上我们一般是一个话题以及追加一系列的帖子，这样需要设计的结构体上就可以设计成这样：</p><pre class=" language-golang"><code class="language-golang">type PageInfo struct &#123;    Topic    *repository.Topic    PostList []*repository.Post&#125;</code></pre><p>这个结构体的设计已经可以满足界面设计需求了，那为什么还需要设计一个更加复杂的呢，首先考虑到界面索引的问题我们需要确定话题ID，根据话题ID需要确定帖子的Map索引数据，索引查找过程为两个没有关联的过程可以开启协程处理，这样的这个结构体的设计是很有必要的</p><pre class=" language-golang"><code class="language-golang">type QueryPageInfoFlow struct &#123;    topicId  int64    pageInfo *PageInfo    topic    *repository.Topic    posts    []*repository.Post&#125;</code></pre><p>其他的设计同源码，相对而言是较简单的</p><h2 id="Controller设计"><a href="#Controller设计" class="headerlink" title="Controller设计"></a>Controller设计</h2><p>通过封装好的<code>service.QueryPageInfo(topicId)</code>实现页面数据的获取，结构体的设计如下：</p><pre class=" language-golang"><code class="language-golang">type PageData struct &#123;    Code int64       `json:"code"`    Msg  string      `json:"msg"`    Data interface&#123;&#125; `json:"data"`&#125;</code></pre><p>在 Go 语言中，<code>interface&#123;&#125;</code> 是一种特殊的数据类型，被称为空接口（Empty Interface）。空接口可以表示任意类型的值，因为它不包含任何方法，所以它对所有类型都是兼容的。</p><p>在 Go 中，每个类型都实现了空接口，因为它不要求任何方法。因此，你可以将任意值赋给空接口变量，也可以从空接口中获取任意值。</p><h2 id="server-go设计"><a href="#server-go设计" class="headerlink" title="server.go设计"></a>server.go设计</h2><p>此部分需要开启gin框架，在此之前需要进行Init两个map表，为了实现发布帖子的功能，我们需要设计一个新的函数 <code>InputPost()</code>这个函数可以在文件中添加新的帖子，设计如下：</p><pre class=" language-golang"><code class="language-golang">func InputPost() error &#123;    for &#123;        fmt.Println("结束请输入E")        fmt.Println("我需要以下信息：")        fmt.Println("请输入发布帖子的内容：")        reader := bufio.NewReader(os.Stdin)        input, err := reader.ReadString('\n')        if err != nil &#123;            fmt.Println("An error occured while reading input Please try again", err)            continue        &#125;        topicContext := strings.Trim(input, "\r\n")        if strings.ToUpper(topicContext) == "E" &#123;            break        &#125;        fmt.Println("请输入您选择的话题：")        reader = bufio.NewReader(os.Stdin)        input, err = reader.ReadString('\n')        if err != nil &#123;            fmt.Println("An error occured while reading input Please try again", err)            continue        &#125;        parentIdStr := strings.Trim(input, "\r\n")        parent, err := strconv.ParseInt(parentIdStr, 10, 64)        if err != nil &#123;            fmt.Println("Invalid input,Please enter an integer value")            continue        &#125; //构建帖子结构        now := time.Now()        id := repository.GetPostCount()        (*id)++        fmt.Println("当前id值为")        posTmp := repository.Post&#123;            Id:         *id,            ParentId:   parent,            Content:    topicContext,            CreateTime: now.Unix(),        &#125;        open, err := os.OpenFile("./data/post", os.O_WRONLY|os.O_APPEND, 0666)        if err != nil &#123;            fmt.Println("file can not open ")            return errors.New("file can not open")        &#125;        buf, err := json.Marshal(posTmp)        if err != nil &#123;            fmt.Println("序列化失败")            return err        &#125;        _, err = open.Write([]byte&#123;'\n'&#125;)        _, err = open.Write(buf)        if err != nil &#123;            fmt.Println("写入失败", err)            return err        &#125;        fmt.Println("数据写入成功")    &#125;    return nil&#125;</code></pre><p>对于main函数的修改，主要是GET的调用过程中，我们需要确认用户是否需要发布新的帖子到哪一个话题中，所以需要做一些小的修改</p><pre class=" language-golang"><code class="language-golang">func main() &#123;    if err := Init("./data/"); err != nil &#123;        os.Exit(-1)    &#125;    r := gin.Default()    r.GET("/community/page/get/:id", func(ctx *gin.Context) &#123;        topicId := ctx.Param("id")        for &#123;            fmt.Println("请问是否有帖子需要输入呢")            reader := bufio.NewReader(os.Stdin)            put, err := reader.ReadString('\n')            if err != nil &#123;                fmt.Println("input error", err)                break            &#125;            putstr := strings.Trim(put, "\r\n")            if strings.ToUpper(putstr) == "Y" &#123;                if err := InputPost(); err != nil &#123;                    break                &#125;            &#125; else &#123;                break            &#125;        &#125;        if err := Init("./data/"); err != nil &#123;            fmt.Println("再次初始化失败", err)        &#125;        data := cotroller.QueryPageInfo(topicId)        ctx.JSON(200, data)    &#125;)    err := r.Run()    if err != nil &#123;        return    &#125;&#125;</code></pre><p>展示结果如下：</p><p><img src="/2023/080736829/32a4e7fe523b558b8b3a8dde1ec52c3e.png" alt="32a4e7fe523b558b8b3a8dde1ec52c3e"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go后端基础课</title>
      <link href="/2023/08071422.html"/>
      <url>/2023/08071422.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Go中采用后置返回值的声明方式进行函数的构造，如果要返回多个值，可采用”()“的方式蒋返回类型进行声明，对于返回的变量声明也可以放在括号中，如下所示：</p><p><strong>注意 函数无法进行重载</strong></p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"func add(a int, b int) int &#123;    return a + b&#125;func add2(a, b int) int &#123;    return a + b&#125;func exists(m map[string]string, k string) (v string, ok bool) &#123;    v, ok = m[k]    return v, ok&#125;func main() &#123;    res := add(1, 2)    fmt.Println(res)    res2 := add2(3, 2)    fmt.Println(res2)    v, ok := exists(map[string]string&#123;"a": "A"&#125;, "a")    fmt.Println(v, ok)&#125;</code></pre><p><img src="/2023/08071422/92e55bf1f75e0e06e92ffe54ca751d02.png" alt="92e55bf1f75e0e06e92ffe54ca751d02"></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>Go语言中也支持指针操作，但并不能向C++一样运用的如此广泛，它可以用来真实的改变值本身的大小，而非发生拷贝操作后无法对初始值进行改变，即值传递和引用传递区别本身，传递本身也采用地址符号进行传递</p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"func add2(n int) &#123;    n += 2&#125;func add2ptr(n *int) &#123;    *n += 2&#125;func main() &#123;    n := 5    add2(n)    fmt.Println(n) // 5    add2ptr(&n)    fmt.Println(n) // 7&#125;</code></pre><p><img src="/2023/08071422/46d2bafd9e7b07ef3d13d1634aa43e85.png" alt="46d2bafd9e7b07ef3d13d1634aa43e85"></p><h2 id="结构体，类"><a href="#结构体，类" class="headerlink" title="结构体，类"></a>结构体，类</h2><p>Go中的结构体同C中的结构体很像，在定义过程中，可以有几种不同的方式进行定义，相对而言比较灵活，可以指定需要定义的成员值</p><p>成员函数的定义只需要在”func“后用括号表明这是谁的成员函数即可</p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"type user struct &#123;    name     string    password string&#125;func (u user) checkPassWordMy(password string)bool &#123;    return u.password==password&#125;func (u* user) checkPassWordPoint(password string)bool&#123;    return u.password==password&#125;func main() &#123;    a := user&#123;name: "wang", password: "1234"&#125;    b := user&#123;"wang", "1234"&#125;    c := user&#123;name: "wang"&#125;    var d user    d.name = "wang"    d.password = "1234"    fmt.Println(a, b, c, d)    fmt.Println(checkPassWord(a, "haha"))    fmt.Println(checkPassWord2(&a, "haha"))    fmt.Println(a)    fmt.Println(a.checkPassWordMy("haha"))    fmt.Println(a.checkPassWordPoint("haha"))&#125;func checkPassWord(u user, password string) bool &#123;    return u.password == password&#125;func checkPassWord2(u *user, password string) bool &#123;    if u.password != password &#123;        u.password = password        return false    &#125;    return true&#125;</code></pre><p><img src="/2023/08071422/32d4aa07dd2e4f2842ff57b05253707d.png" alt="32d4aa07dd2e4f2842ff57b05253707d"></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>Go语言中采error关键字来说明错误</p><pre class=" language-golang"><code class="language-golang">package mainimport (    "errors"    "fmt")type user struct &#123;    name     string    password string&#125;func findUser(users []user, name string) (v *user, err error) &#123;    for _, u := range users &#123;        if u.name == name &#123;            return &u, nil        &#125;    &#125;    return nil, errors.New("not found")&#125;func main() &#123;    u, err := findUser([]user&#123;&#123;"wang", "1234"&#125;&#125;, "wang")    if err != nil &#123;        fmt.Println(err)        return    &#125;    fmt.Println(*u)    if u, err := findUser([]user&#123;&#123;"wang", "324"&#125;, &#123;"xiao", "1109"&#125;&#125;, "li"); err != nil &#123;        fmt.Println(err)        return    &#125; else &#123;        fmt.Println(*u)    &#125;&#125;</code></pre><p><img src="/2023/08071422/38c075dbb1264ec9d32b612cc8850185.png" alt="38c075dbb1264ec9d32b612cc8850185"></p><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>同C++类似，可以实现对字符串的查询，追加，拼接，分割，重复使用，等等</p><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "strings")func main() &#123;    a := "hello"    fmt.Println(strings.Contains(a, "ll"))                // true    fmt.Println(strings.Count(a, "l"))                    // 2    fmt.Println(strings.HasPrefix(a, "he"))               // true    fmt.Println(strings.HasSuffix(a, "llo"))              // true    fmt.Println(strings.Index(a, "ll"))                   // 2    fmt.Println(strings.Join([]string&#123;"he", "llo"&#125;, "-")) // he-llo    fmt.Println(strings.Repeat(a, 2))                     // hellohello    fmt.Println(strings.Replace(a, "e", "E", -1))         // hEllo    fmt.Println(strings.Split("a-b-c", "-"))              // [a b c]    fmt.Println(strings.ToLower(a))                       // hello    fmt.Println(strings.ToUpper(a))                       // HELLO    fmt.Println(len(a))                                   // 5    b := "你好"    fmt.Println(len(b)) // 6&#125;</code></pre><h2 id="fmt-格式化输出"><a href="#fmt-格式化输出" class="headerlink" title="fmt 格式化输出"></a>fmt 格式化输出</h2><p>同C语言的printf很像，但对于不同的数据类型，Go均可通过%v实现输出，</p><p>%+v 表示详细输出</p><p>%#v表示更加详细的输出，包括调用的函数</p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"type point struct &#123;    x, y int&#125;func main() &#123;    s := "hello"    n := 123    p := point&#123;1, 2&#125;    fmt.Println(s, n) // hello 123    fmt.Println(p)    // &#123;1 2&#125;    fmt.Printf("s=%v\n", s)  // s=hello    fmt.Printf("n=%v\n", n)  // n=123    fmt.Printf("p=%v\n", p)  // p=&#123;1 2&#125;    fmt.Printf("p=%+v\n", p) // p=&#123;x:1 y:2&#125;    fmt.Printf("p=%#v\n", p) // p=main.point&#123;x:1, y:2&#125;    f := 3.141592653    fmt.Println(f)          // 3.141592653    fmt.Printf("%.2f\n", f) // 3.14&#125;</code></pre><p><img src="/2023/08071422/470f72b80bd16decf716f5e4043989bd.png" alt="470f72b80bd16decf716f5e4043989bd"></p><h2 id="json相关"><a href="#json相关" class="headerlink" title="json相关"></a>json相关</h2><p>对于一个已有的结构体，保证每个字段的第一个字母为大写，那么这个结构体可以通过Json.Marshal进行序列化，序列化为一个数组的形式，需要通过通过string强制类型转换才能打印出字符串</p><p>通过json.MarshalIndent可以实现json格式的buf</p><pre class=" language-golang"><code class="language-golang">//参数一代表需要处理的结构体//参数二代表需要的前缀//参数三代表间隔的方式func MarshalIndent(v any, prefix, indent string) ([]byte, error)package mainimport (    "encoding/json"    "fmt")type userInfo struct &#123;    Name  string    Age   int    Hobby []string&#125;func main() &#123;    a := userInfo&#123;Name: "wang", Age: 18, Hobby: []string&#123;"C++", "C#", "QT", "Go"&#125;&#125;    buf, err := json.Marshal(a)    if err != nil &#123;        panic(err)        return    &#125;    fmt.Println(buf)    fmt.Println(string(buf))    buf, err = json.MarshalIndent(a, "", "\t")    if err != nil &#123;        panic(err)        return    &#125;    fmt.Println(string(buf))    var b userInfo    err = json.Unmarshal(buf, &b)    if err != nil &#123;        panic(err)    &#125;    fmt.Printf("%#v\n", b)&#125;</code></pre><p><img src="/2023/08071422/12a366d9a741cdd419c7ba7ff715b61f.png" alt="12a366d9a741cdd419c7ba7ff715b61f"></p><h2 id="时间相关函数"><a href="#时间相关函数" class="headerlink" title="时间相关函数"></a>时间相关函数</h2><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "time")func main() &#123;    now := time.Now()    fmt.Println(now) // 2022-03-27 18:04:59.433297 +0800 CST m=+0.000087933    t := time.Date(2022, 3, 27, 1, 25, 36, 0, time.UTC)    t2 := time.Date(2022, 3, 27, 2, 30, 36, 0, time.UTC)    fmt.Println(t)                                                  // 2022-03-27 01:25:36 +0000 UTC    fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) // 2022 March 27 1 25    fmt.Println(t.Format("2006-01-02 15:04:05"))                    // 2022-03-27 01:25:36    diff := t2.Sub(t)    fmt.Println(diff)                           // 1h5m0s    fmt.Println(diff.Minutes(), diff.Seconds()) // 65 3900    t3, err := time.Parse("2006-01-02 15:04:05", "2022-03-27 01:25:36")    if err != nil &#123;        panic(err)    &#125;    fmt.Println(t3)    fmt.Println(t3 == t)    // true    fmt.Println(now.Unix()) // 1648738080&#125;</code></pre><p><img src="/2023/08071422/28bd3eaaa9a3630c75c35b4925c4b99b.png" alt="28bd3eaaa9a3630c75c35b4925c4b99b"></p><h2 id="字符串和数字之间的转换"><a href="#字符串和数字之间的转换" class="headerlink" title="字符串和数字之间的转换"></a>字符串和数字之间的转换</h2><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "strconv")func main() &#123;    f, _ := strconv.ParseFloat("1.234", 64)    fmt.Println(f) // 1.234    n, _ := strconv.ParseInt("111", 10, 64)    fmt.Println(n) // 111    n, _ = strconv.ParseInt("0x1000", 0, 64)    fmt.Println(n) // 4096    n2, _ := strconv.Atoi("123")    fmt.Println(n2) // 123    n2, err := strconv.Atoi("AAA")    fmt.Println(n2, err) // 0 strconv.Atoi: parsing "AAA": invalid syntax&#125;</code></pre><p><img src="/2023/08071422/3d78f856081105efd3e96d838d549a8f.png" alt="3d78f856081105efd3e96d838d549a8f"></p><h2 id="Go语言的实战案例"><a href="#Go语言的实战案例" class="headerlink" title="Go语言的实战案例"></a>Go语言的实战案例</h2><h3 id="猜谜游戏"><a href="#猜谜游戏" class="headerlink" title="猜谜游戏"></a>猜谜游戏</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "bufio"    "fmt"    "math/rand"    "os"    "strconv"    "strings"    "time")func main() &#123;    maxNum := 100    rand.Seed(time.Now().UnixNano())    secretNumber := rand.Intn(maxNum)    fmt.Println("The sercert number is ", secretNumber)    for &#123;        fmt.Println("Please input your guess")        reader := bufio.NewReader(os.Stdin)        input, err := reader.ReadString('\n')        if err != nil &#123;            fmt.Println("An error occured while reading input Please try again", err)            continue        &#125;        input = strings.Trim(input, "\r\n")        guess, err := strconv.Atoi(input)        if err != nil &#123;            fmt.Println("Invalid input,Please enter an integer value")            continue        &#125;        fmt.Println("You guess is:", guess)        if guess > secretNumber &#123;            fmt.Println("Your guess is bigger than the secret number. Please try again")        &#125; else if guess < secretNumber &#123;            fmt.Println("Your guess is smaller than the secret number. Please try again")        &#125; else &#123;            fmt.Println("Correct,you Legend!")            break        &#125;    &#125;&#125;</code></pre><h3 id="查单词字典"><a href="#查单词字典" class="headerlink" title="查单词字典"></a>查单词字典</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "bytes"    "encoding/json"    "fmt"    "io"    "log"    "net/http"    "os")type DictRequest struct &#123;    Trans_type string `json:"trans_type"`    Source     string `json:"source"`    User_ID    string `json:"user_id"`&#125;type DictResponse struct &#123;    Rc   int `json:"rc"`    Wiki struct &#123;        KnownInLaguages int `json:"known_in_laguages"`        Description     struct &#123;            Source string      `json:"source"`            Target interface&#123;&#125; `json:"target"`        &#125; `json:"description"`        ID   string `json:"id"`        Item struct &#123;            Source string `json:"source"`            Target string `json:"target"`        &#125; `json:"item"`        ImageURL  string `json:"image_url"`        IsSubject string `json:"is_subject"`        Sitelink  string `json:"sitelink"`    &#125; `json:"wiki"`    Dictionary struct &#123;        Prons struct &#123;            EnUs string `json:"en-us"`            En   string `json:"en"`        &#125; `json:"prons"`        Explanations []string      `json:"explanations"`        Synonym      []string      `json:"synonym"`        Antonym      []string      `json:"antonym"`        WqxExample   [][]string    `json:"wqx_example"`        Entry        string        `json:"entry"`        Type         string        `json:"type"`        Related      []interface&#123;&#125; `json:"related"`        Source       string        `json:"source"`    &#125; `json:"dictionary"`&#125;func query(word string) &#123;    client := &http.Client&#123;&#125;    request := DictRequest&#123;Trans_type: "en2zh", Source: word&#125; //定义一个结构体    buff, err := json.Marshal(request)                        //json 序列化    if err != nil &#123;        log.Fatal(err)    &#125;    var data = bytes.NewReader(buff) //转为字节    //创建请求    req, err := http.NewRequest("POST", "https://api.interpreter.caiyunai.com/v1/dict", data)    if err != nil &#123;        log.Fatal(err)    &#125;    //设置请求头    req.Header.Set("authority", "api.interpreter.caiyunai.com")    req.Header.Set("accept", "application/json, text/plain, */*")    req.Header.Set("accept-language", "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6")    req.Header.Set("app-name", "xy")    req.Header.Set("content-type", "application/json;charset=UTF-8")    req.Header.Set("device-id", "ae5399d5f4e62175b801e6e2c9dbd230")    req.Header.Set("origin", "https://fanyi.caiyunapp.com")    req.Header.Set("os-type", "web")    req.Header.Set("os-version", "")    req.Header.Set("referer", "https://fanyi.caiyunapp.com/")    req.Header.Set("sec-ch-ua", `"Not/A)Brand";v="99", "Microsoft Edge";v="115", "Chromium";v="115"`)    req.Header.Set("sec-ch-ua-mobile", "?0")    req.Header.Set("sec-ch-ua-platform", `"Windows"`)    req.Header.Set("sec-fetch-dest", "empty")    req.Header.Set("sec-fetch-mode", "cors")    req.Header.Set("sec-fetch-site", "cross-site")    req.Header.Set("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.183")    req.Header.Set("x-authorization", "token:qgemv4jr1y38jyq6vhvi")    resp, err := client.Do(req) //发起请求    if err != nil &#123;        log.Fatal(err)    &#125;    defer resp.Body.Close()    //读取响应    bodyText, err := io.ReadAll(resp.Body)    if err != nil &#123;        log.Fatal(err)    &#125;    if resp.StatusCode != 200 &#123;        log.Fatal("bad StatusCode:", resp.StatusCode, "body", string(bodyText))    &#125;    //fmt.Printf("%s\n", bodyText)    //buff2, err := json.MarshalIndent(bodyText, "", "\t")    //fmt.Println(string(buff2))    var dictRes DictResponse    err = json.Unmarshal(bodyText, &dictRes)    if err != nil &#123;        log.Fatal(err)    &#125;    //fmt.Printf("%#v\n", dictRes)    fmt.Println(word, "UK:", dictRes.Dictionary.Prons.En, "US:", dictRes.Dictionary.Prons.EnUs)    for _, item := range dictRes.Dictionary.Explanations &#123;        fmt.Println(item)    &#125;&#125;func main() &#123;    if len(os.Args) != 2 &#123;        fmt.Fprintf(os.Stderr, `usage:simpleDict WORD         example: simpleDict hello`)        os.Exit(1)    &#125;    word := os.Args[1]    query(word)&#125;</code></pre><h3 id="代理服务器实现"><a href="#代理服务器实现" class="headerlink" title="代理服务器实现"></a>代理服务器实现</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "bufio"    "context"    "encoding/binary"    "errors"    "fmt"    "io"    "log"    "net")const socks5Ver = 0x05const cmdBind = 0x01const atypeIPV4 = 0x01const atypeHOST = 0x03const atypeIPV6 = 0x04func main() &#123;    server, err := net.Listen("tcp", "127.0.0.1:9527")    if err != nil &#123;        log.Fatal(err)    &#125;    for &#123;        client, err := server.Accept()        if err != nil &#123;            log.Printf("Accept failed", err)        &#125;        go process(client)    &#125;&#125;func process(conn net.Conn) &#123;    defer conn.Close()    reader := bufio.NewReader(conn)    err := auth(reader, conn)    if err != nil &#123;        log.Printf("client %v auth failed:%v", conn.RemoteAddr(), err)        return    &#125;    err = connect(reader, conn)    if err != nil &#123;        log.Printf("client %v auth failed:%v", conn.RemoteAddr(), err)        return    &#125;&#125;func auth(reader *bufio.Reader, conn net.Conn) (err error) &#123;    // +----+----------+----------+    // |VER | NMETHODS | METHODS  |    // +----+----------+----------+    // | 1  |    1     | 1 to 255 |    // +----+----------+----------+    // VER: 协议版本，socks5为0x05    // NMETHODS: 支持认证的方法数量    // METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:    // X’00’ NO AUTHENTICATION REQUIRED    // X’02’ USERNAME/PASSWORD    ver, err := reader.ReadByte()    if err != nil &#123;        return fmt.Errorf("read ver failed:%dw", err)    &#125;    if ver != socks5Ver &#123;        return fmt.Errorf("not supported ver:%v", ver)    &#125;    methodSize, err := reader.ReadByte()    if err != nil &#123;        return fmt.Errorf("read ver failed:%dw", err)    &#125;    method := make([]byte, methodSize)    _, err = io.ReadFull(reader, method)    if err != nil &#123;        return fmt.Errorf("read method failed:%w", err)    &#125;    // +----+--------+    // |VER | METHOD |    // +----+--------+    // | 1  |   1    |    // +----+--------+    _, err = conn.Write([]byte&#123;socks5Ver, 0x00&#125;)    if err != nil &#123;        return fmt.Errorf("write failed:%w", err)    &#125;    return nil&#125;func connect(reader *bufio.Reader, conn net.Conn) (err error) &#123;    // +----+-----+-------+------+----------+----------+    // |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |    // +----+-----+-------+------+----------+----------+    // | 1  |  1  | X'00' |  1   | Variable |    2     |    // +----+-----+-------+------+----------+----------+    // VER 版本号，socks5的值为0x05    // CMD 0x01表示CONNECT请求    // RSV 保留字段，值为0x00    // ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。    //   0x01表示IPv4地址，DST.ADDR为4个字节    //   0x03表示域名，DST.ADDR是一个可变长度的域名    // DST.ADDR 一个可变长度的值    // DST.PORT 目标端口，固定2个字节    buf := make([]byte, 4)    _, err = io.ReadFull(reader, buf)    if err != nil &#123;        return fmt.Errorf("read header failed:%w", err)    &#125;    ver, cmd, atyp := buf[0], buf[1], buf[3]    if ver != socks5Ver &#123;        return fmt.Errorf("not supported ver:%v", ver)    &#125;    if cmd != cmdBind &#123;        return fmt.Errorf("not supported cmd:%v", cmd)    &#125;    addr := ""    switch atyp &#123;    case atypeIPV4:        _, err = io.ReadFull(reader, buf)        if err != nil &#123;            return fmt.Errorf("read atyp failed:%w", err)        &#125;        addr = fmt.Sprintf("%d.%d.%d.%d", buf[0], buf[1], buf[2], buf[3])    case atypeHOST:        hostSize, err := reader.ReadByte()        if err != nil &#123;            return fmt.Errorf("read hostSize failed:%w", err)        &#125;        host := make([]byte, hostSize)        _, err = io.ReadFull(reader, host)        if err != nil &#123;            return fmt.Errorf("read host failed:%w", err)        &#125;        addr = string(host)    case atypeIPV6:        return errors.New("IPv6: no supported yet")    default:        return errors.New("invalid atyp")    &#125;    _, err = io.ReadFull(reader, buf[:2])    if err != nil &#123;        return fmt.Errorf("read port failed:%w", err)    &#125;    port := binary.BigEndian.Uint16(buf[:2])    dest, err := net.Dial("tcp", fmt.Sprintf("%v:%v", addr, port))    if err != nil &#123;        return fmt.Errorf("dial dst failed:%w", err)    &#125;    defer dest.Close()    log.Println("dial", addr, port)    _, err = conn.Write([]byte&#123;0x05, 0x00, 0x00, 0x01, 0, 0, 0, 0, 0, 0&#125;)    if err != nil &#123;        return fmt.Errorf("write failed: %w", err)    &#125;    ctx, cancel := context.WithCancel(context.Background())    defer cancel()    go func() &#123;        _, _ = io.Copy(dest, reader)        cancel()    &#125;()    go func() &#123;        _, _ = io.Copy(conn, dest)        cancel()    &#125;()    <-ctx.Done()    return nil&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CONTAINING_RECORD宏原理与使用详解</title>
      <link href="/2023/080761350.html"/>
      <url>/2023/080761350.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、0指针的妙用"><a href="#一、0指针的妙用" class="headerlink" title="一、0指针的妙用"></a>一、0指针的妙用</h2><pre class=" language-C++"><code class="language-C++">typedef unsigned long long quint64;Test* pTest = nullptr;quint64 offset_a = (quint64)(&(pTest->a));  // offset_a==0quint64 offset_b = (quint64)(&(pTest->b));  // offset_b==4</code></pre><p>offset_a为0，offset_b为4，如果你觉得很惊喜，请继续看。</p><p>之所以pTest-&gt;a，pTest-&gt;b没有报错，是因为前面添加了取地址符&amp;，相当于我们告诉编译器，并不是真的要取a、b的值，我们只是取a、b的地址，然鹅Test对象的地址pTest为0，根据C++对象内存布局，如下图，可知当Test对象地址为0时，实际上取到的a、b地址，也就是a、b变量相对于整个对象首地址的偏移量。</p><h2 id="二、CONTAINING-RECORD宏"><a href="#二、CONTAINING-RECORD宏" class="headerlink" title="二、CONTAINING_RECORD宏"></a>二、CONTAINING_RECORD宏</h2><p>该宏的功能，是根据某个结构体中成员变量的地址，计算出结构体地址。</p><ul><li>address，成员变量地址</li><li>type，结构体类型</li><li>field，成员变量名</li></ul><p>该宏定义的原理，就是上一章中介绍的使用0指针获取成员偏移，然后再使用成员变量地址-成员偏移，就得到了结构体地址。</p><p>该宏定义的使用，如下：</p><pre class=" language-C++"><code class="language-C++">struct School&#123;    int level;    float cost;&#125;;struct Student&#123;    int age;    School school;&#125;;School sch;sch.level = 1;sch.cost = 5000;Student zhangsan;zhangsan.age = 10;zhangsan.school = sch;Student* pStu = CONTAINING_RECORD(&zhangsan.school, Student, school);qDebug() << &zhangsan;qDebug() << pStu;</code></pre><p><img src="/2023/080761350/fae12fde5abc4736a3518d851b51e0aatplv-k3u1fbpfcp-watermark.png" alt="84b19e37254b355b020959c879ffab5c.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> MFC </tag>
            
            <tag> CONTAINING_RECORD </tag>
            
            <tag> 对象模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOCP工作原理</title>
      <link href="/2023/080756526.html"/>
      <url>/2023/080756526.html</url>
      
        <content type="html"><![CDATA[<h2 id="IOCP基本原理"><a href="#IOCP基本原理" class="headerlink" title="IOCP基本原理"></a>IOCP基本原理</h2><p>IOCP 的基本原理是通过事件驱动的方式来处理 I&#x2F;O 请求，以避免传统的阻塞式 I&#x2F;O 操作带来的性能问题。具体来说，IOCP 通过以下几个步骤完成异步 I&#x2F;O 操作：</p><ol><li><p>应用程序首先创建一个或多个 I&#x2F;O 端口，并将它们关联到套接字或文件句柄上。</p></li><li><p>当应用程序需要进行 I&#x2F;O 操作时，它调用系统级别的 API，将请求提交到 I&#x2F;O 端口上。</p></li><li><p>操作系统内核将 I&#x2F;O 请求与相应的 I&#x2F;O 端口关联，并立即返回，使得应用程序可以继续执行其他操作。</p></li><li><p>内核在后台异步地执行 I&#x2F;O 操作，并将结果存储在完成队列中。</p></li><li><p>当 I&#x2F;O 操作完成时，内核会通知完成端口，并将完成信息添加到完成队列中。</p></li><li><p>应用程序通过调用 GetQueuedCompletionStatus() 函数获取完成队列中的已完成请求，并按需处理它们。</p></li><li><p>如果完成队列为空，则应用程序可以等待新的完成事件发生，或者继续执行其他操作。</p><p>以上过程中，工作者线程负责从完成队列中取出已完成的 I&#x2F;O 请求，并进行相应的处理。由于这些</p><p>线程都是从线程池中获取的，因此可以有效地管理和控制线程的数量和使用情况，从而提高系统的效率和稳定性。</p></li></ol><pre class=" language-C++"><code class="language-C++">void func(void* arg) &#123;    std::string* pstr = (std::string*)arg;    if (pstr != NULL) &#123;        printf("pop from list:%s\r\n", pstr->c_str());        delete pstr;    &#125;else&#123;      printf("List is empty,no data!\r\n");    &#125;&#125;</code></pre><pre class=" language-C++"><code class="language-C++">//用于定义传输过程中的枚举类型enum &#123;    IocpListEmpty,    IocpListPush,    IocpListPop&#125;;</code></pre><pre class=" language-C++"><code class="language-C++">//设计用于传输数据的数据结构typedef struct IocpParam &#123;    IocpParam(int op, const char* sData, _beginthread_proc_type cb=NULL)         :nOperator(op), strData(sData),cbFunc(cb) &#123;&#125;    IocpParam() :nOperator(-1) &#123;&#125;    int nOperator;//操作    std::string strData;//数据    _beginthread_proc_type cbFunc;//回调 线程中的回调函数类型&#125;IOCP_PARAM;</code></pre><pre class=" language-C++"><code class="language-C++">void threadmain(HANDLE hIOCP) &#123;    std::list<std::string>lstString;    DWORD dwTransferred = 0;    ULONG_PTR CompletionKey = 0;    OVERLAPPED* Overlapped = NULL;    int count = 0, count0 = 0, total = 0;    while (GetQueuedCompletionStatus(hIOCP, &dwTransferred, &CompletionKey, &Overlapped, INFINITE)) &#123;        if (dwTransferred == 0 || CompletionKey == NULL) &#123;            printf("thread is prepare to exit!\r\n");            break;        &#125;        IOCP_PARAM* pParam = (IOCP_PARAM*)CompletionKey;        if (pParam->nOperator == IocpListPush) &#123;            printf("push string %s %p \r\n", pParam->strData.c_str(), Overlapped);            lstString.push_back(pParam->strData);            count++;        &#125;        else if (pParam->nOperator == IocpListPop) &#123;            printf("%p size %d \r\n", pParam->cbFunc, lstString.size());            std::string str;            if (lstString.size() > 0) &#123;                str = lstString.front();                lstString.pop_front();            &#125;            if (pParam->cbFunc) &#123;                pParam->cbFunc(&str);            &#125;            count0++;        &#125;        else if (pParam->nOperator == IocpListEmpty) &#123;            lstString.clear();        &#125;        delete pParam;        printf("total %d \r\n", ++total);    &#125;    lstString.clear();    printf("thread exit count %d  count0 %d\r\n", count, count0);&#125;//由于存在内存泄露，所以采用这种形式调用线程函数void threadQueueEntry(HANDLE hIOCP) &#123;    threadmain(hIOCP);    _endthread();&#125;//注意为什么要分为两个函数写，这是因为内存泄漏的问题////代码到此为止，会导致本地对象无法调用析构，从而使得内存发生泄漏//切记 线程入口函数要和线程主体函数分开</code></pre><pre class=" language-C++"><code class="language-C++">//创建完成端口映射->得到句柄(句柄绑定内核)//创建线程，处理队列//创建完成端口HANDLE hIOCP = INVALID_HANDLE_VALUE;//Input Output Completion Port//最后一个参数表示能够同时访问队列的线程数//参数一：代表一个句柄，如果是做文件，可以是文件句柄，如果是做串口，可以做串口句柄//参数二：代表已经存在的完成端口句柄//参数三：代表KeyhIOCP = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 1);//epoll的区别点if (hIOCP == INVALID_HANDLE_VALUE || (hIOCP == NULL)) &#123;        printf("Create ICOP Failed!%d\r\n", GetLastError());        return 1;&#125;//创建线程 参数一代表线程名，参数二代表新线程堆栈的大小，一般为0，参数三代表调用线程函数的参数HANDLE hThread = (HANDLE)_beginthread(threadQueueEntry, 0, hIOCP);printf("press any key to exit ...\r\n");//按下任意键结束ULONGLONG tick = GetTickCount64();ULONGLONG tick0 = GetTickCount64();int count = 0, count0 = 0;while(_kbhit()==0)&#123;  if (GetTickCount64() - tick0 > 1300) &#123;            PostQueuedCompletionStatus(hIOCP, sizeof(IOCP_PARAM),                 (ULONG_PTR)new IOCP_PARAM(IocpListPop, "hello world",func), NULL);            tick0 = GetTickCount64();            count0++;        &#125;        if (GetTickCount64() - tick > 2000) &#123;            PostQueuedCompletionStatus(hIOCP, sizeof(IOCP_PARAM),                 (ULONG_PTR)new IOCP_PARAM(IocpListPush, "hello world"), NULL);            tick = GetTickCount64();            count++;        &#125;        Sleep(1);&#125;CloseHandle(hIOCP);//关闭IOCPprintf("exit done count %d count0 %d \r\n", count, count0);exit(0);</code></pre><h2 id="IOCP设计"><a href="#IOCP设计" class="headerlink" title="IOCP设计"></a>IOCP设计</h2><pre class=" language-C++"><code class="language-C++">#pragma once#include<string>#include <atomic>#include<list>template<class T>class CWTQueue&#123;//线程安全的队列(利用IOCP实现)public:    enum    &#123;        WQNone,        WQPush,        WQPop,        WQSize,        WQClear    &#125;;    typedef struct IocpParam &#123;        IocpParam(int op, const T& sData, HANDLE hEve = NULL)            :nOperator(op), Data(sData), hEvent(hEve) &#123;&#125;        IocpParam() :nOperator(WQNone) &#123;&#125;        size_tnOperator;//操作        TData;//数据        HANDLEhEvent;//pop操作需要的    &#125;PPARAM;//用于投递信息的结构体public:    CWTQueue();    ~CWTQueue();    bool PushBack(const T& data);    bool PopFront(T& data);    size_t Size();    bool Clear();private:    static void threadEntry(void* arg);    void threadMain();    void DealParam(PPARAM* pParam);private:    std::list<T>m_lstData;    HANDLEm_hCompletetionPort;    HANDLEm_hThread;    std::atomic<bool>m_lock;&#125;;template<class T>inline CWTQueue<T>::CWTQueue()&#123;    m_hCompletetionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 1);    m_hThread = INVALID_HANDLE_VALUE;    if (m_hCompletetionPort != NULL) &#123;        m_hThread = (HANDLE)_beginthread(&CWTQueue::threadEntry, 0, this);    &#125;&#125;template<class T>inline CWTQueue<T>::~CWTQueue()&#123;    if (m_lock)return;    m_lock = true;    PostQueuedCompletionStatus(m_hCompletetionPort, 0, NULL, NULL);    WaitForSingleObject(m_hThread, INFINITE);    //防御性编程先置空 在释放    if (m_hCompletetionPort != NULL) &#123;        HANDLE hTemp = m_hCompletetionPort;        m_hCompletetionPort = NULL;        CloseHandle(hTemp);    &#125;&#125;template<class T>inline bool CWTQueue<T>::PushBack(const T& data)&#123;    IocpParam* pParam = new IocpParam(WQPush, data);    if (m_lock == true) &#123;        delete pParam;        return false;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)pParam, NULL);    if (ret == false)delete pParam;    //printf("push back done %d %08p\r\n", ret, (void*)pParam);    return ret;&#125;template<class T>inline bool CWTQueue<T>::PopFront(T& data)&#123;    HANDLEhEvent = CreateEvent(NULL,TRUE,FALSE,NULL);    IocpParam pParam(WQPop, data, hEvent);    if (m_lock) &#123;        if (hEvent)CloseHandle(hEvent);        return -1;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)&pParam, NULL);    if (ret == false) &#123;        CloseHandle(hEvent);        return false;    &#125;    ret = WaitForSingleObject(hEvent, INFINITE) == WAIT_OBJECT_0;    if (ret) data = pParam.Data;    return ret;&#125;template<class T>inline size_t CWTQueue<T>::Size()&#123;    HANDLEhEvent = CreateEvent(NULL, TRUE, FALSE, NULL);    IocpParam pParam(WQSize, T(), hEvent);    if (m_lock) &#123;        if(hEvent)CloseHandle(hEvent);        return -1;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)&pParam, NULL);    if (ret == false) &#123;        CloseHandle(hEvent);        return -1;    &#125;    ret = WaitForSingleObject(hEvent, INFINITE) == WAIT_OBJECT_0;    if (ret) return pParam.nOperator;    return ret;&#125;template<class T>inline bool CWTQueue<T>::Clear()&#123;    if (m_lock == true)return false;    IocpParam* pParam = new IocpParam(WQClear, T());    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)pParam, NULL);    if (ret == false)delete pParam;    //printf("Clear %08p\r\n", (void*)pParam);    return true;&#125;template<class T>inline void CWTQueue<T>::threadEntry(void* arg)&#123;    CWTQueue<T>* thiz = (CWTQueue<T>*)arg;    thiz->threadMain();    _endthread();&#125;template<class T>inline void CWTQueue<T>::threadMain()&#123;    PPARAM* pParam = NULL;    ULONG_PTR CompletionKey = 0;    OVERLAPPED* Overlapped = NULL;    DWORD dwTransferred = 0;    while (GetQueuedCompletionStatus(m_hCompletetionPort,         &dwTransferred, &CompletionKey, &Overlapped, INFINITE)) &#123;        if (dwTransferred == 0 || CompletionKey == NULL) &#123;            printf("thread is prepare to exit!\r\n");            break;        &#125;        pParam = (PPARAM*)CompletionKey;        DealParam(pParam);    &#125;    //防御性编程    while ((m_hCompletetionPort,        &dwTransferred, &CompletionKey, &Overlapped, 0)) &#123;        if (dwTransferred == 0 || CompletionKey == NULL) &#123;            printf("thread is prepare to exit!\r\n");            continue;        &#125;        pParam = (PPARAM*)CompletionKey;        DealParam(pParam);    &#125;    HANDLE hTemp = m_hCompletetionPort;    m_hCompletetionPort = NULL;    CloseHandle(hTemp);&#125;template<class T>inline void CWTQueue<T>::DealParam(PPARAM* pParam)&#123;    switch (pParam->nOperator)    &#123;    case WQPush: &#123;        m_lstData.push_back(pParam->Data);        delete pParam;        //printf("delete %08p\r\n", (void*)pParam);        break;    &#125;    case WQPop: &#123;        if (m_lstData.size() > 0) &#123;            pParam->Data = m_lstData.front();            m_lstData.pop_front();        &#125;        if (pParam->hEvent != NULL) &#123;            SetEvent(pParam->hEvent);        &#125;        break;    &#125;    case WQSize: &#123;        pParam->nOperator = m_lstData.size();        if (pParam->hEvent != NULL) &#123;            SetEvent(pParam->hEvent);        &#125;        break;    &#125;    case WQClear: &#123;        m_lstData.clear();        delete pParam;        //printf("delete %08p\r\n", (void*)pParam);        break;    &#125;    default:        OutputDebugStringA("unKnown operator!\r\n");        break;    &#125;&#125;</code></pre><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><pre class=" language-C++"><code class="language-C++">/** 1 Bug测试/功能测试* 2 关键因素的测试/内存泄漏 运行的稳定性 条件性* 3 压力测试/可靠性测试* 4 性能测试*/void test(int nm) &#123;    //性能：CWTQueue push性能高 pop性能仅有1/4    //list 性能push比pop低     printf("The %d start\r\n", nm);    CWTQueue<std::string>lstString;    ULONGLONG tick0 = GetTickCount64(), tick = GetTickCount64(), total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;//完成了端口 把请求与实现 分离了        //if (GetTickCount64() - tick0 > 5) &#123;            lstString.PushBack("Hello World");            tick0 = GetTickCount64();        //&#125;        //Sleep(1);    &#125;    size_t count = lstString.Size();    printf("exit done size %d \r\n", count);    total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;        //if (GetTickCount64() - tick > 5) &#123;            std::string str;            lstString.PopFront(str);            tick = GetTickCount64();            //printf("pop from queue :%s\r\n", str.c_str());        //&#125;        //Sleep(1);    &#125;    printf("exit done size %d \r\n", count - lstString.Size());    lstString.Clear();    std::list<std::string>lstData;    total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;        lstData.push_back("hello World");    &#125;    count = lstData.size();    printf("lstData push_back size %d \r\n", lstData.size());    total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;        if (lstData.size() > 0)lstData.pop_back();    &#125;    printf("lstData pop_back size %d \r\n", count - lstData.size());&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 高并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> thread </tag>
            
            <tag> IOCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atomic操作</title>
      <link href="/2023/080737660.html"/>
      <url>/2023/080737660.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>C++原子变量是一种多线程编程中常用的同步机制，它能够确保对共享变量的操作在执行时不会被其他线程的操作干扰，从而避免竞态条件和死锁等问题。</p><p>原子变量可以看作是一种特殊的类型，它具有类似于普通变量的操作，但是这些操作都是原子级别的，即要么全部完成，要么全部未完成。C++标准库提供了丰富的原子类型，包括整型、指针、布尔值等，使用方法也非常简单，只需要通过std::atomic定义一个原子变量即可，其中T表示变量的类型。</p><p>在普通的变量中，并发的访问它可能会导致数据竞争，竞争的后果会导致操作过程不会按照正确的顺序进行操作。</p><h2 id="is-lock-free函数"><a href="#is-lock-free函数" class="headerlink" title="is_lock_free函数"></a>is_lock_free函数</h2><p>is_lock_free函数是一个成员函数，用于检查当前atomic对象是否支持无锁操作。调用此成员函数不会启动任何数据竞争。</p><pre class=" language-C++"><code class="language-C++">bool is_lock_free() const volatile noexcept;bool is_lock_free() const noexcept;</code></pre><p>返回值：如果当前atomic对象支持无锁操作，则返回true；否则返回false。</p><pre class=" language-C++"><code class="language-C++">#include <iostream>#include <atomic> int main()&#123;    std::atomic<int> a;    std::cout << std::boolalpha                // 显示 true 或 false，而不是 1 或 0              << "std::atomic<int> is "              << (a.is_lock_free() ? "" : "not ")              << "lock-free\n";     std::atomic_flag f;    std::cout << "std::atomic_flag is "              << (f.is_lock_free() ? "" : "not ")              << "lock-free\n";&#125;</code></pre><pre class=" language-C++"><code class="language-C++">std::atomic<int> is not lock-freestd::atomic_flag is lock-free</code></pre><p>示例中，首先定义了一个atomic类型的对象a和一个atomic_flag类型的对象f，并分别调用了它们的is_lock_free函数来检查它们是否支持无锁操作。由于int类型可能会有多个字节，所以它可能需要加锁才能保证原子性，因此a.is_lock_free()返回false；而atomic_flag类型是一个布尔型（只占一个字节），所以它可以使用汇编指令来实现无锁操作，因此f.is_lock_free()返回true。</p><h2 id="store函数"><a href="#store函数" class="headerlink" title="store函数"></a>store函数</h2><p>std::atomic::store()是一个成员函数，用于将给定的值存储到原子对象中。</p><pre class=" language-C++"><code class="language-C++">void store(T desired, std::memory_order order = std::memory_order_seq_cst) volatile noexcept;void store(T desired, std::memory_order order = std::memory_order_seq_cst) noexcept;//desired：要存储的值。//order：存储操作的内存顺序。默认是std::memory_order_seq_cst（顺序一致性）。</code></pre><p>示例</p><pre class=" language-C++"><code class="language-C++">#include <iostream>#include <atomic>int main()&#123;    std::atomic<int> atomic_int(0);    int val = 10;    atomic_int.store(val);    std::cout << "Value stored in atomic object: " << atomic_int << std::endl;    return 0;&#125;</code></pre><pre class=" language-C++"><code class="language-C++">Value stored in atomic object: 10</code></pre><p>例子中，首先定义了一个std::atomic类型的原子变量atomic_int，初始值为0。然后，使用store()函数将变量val的值存储到atomic_int中。最后，打印出存储在原子对象中的值。</p><p>需要注意的是，在多线程环境下使用原子变量和操作时，需要使用适当的内存顺序来保证数据的正确性和一致性。因此，store()函数中的order参数可以用来指定不同的内存顺序。如果不确定如何选择内存顺序，请使用默认值std::memory_order_seq_cst，它是最常用和最保险的。</p><h2 id="load函数"><a href="#load函数" class="headerlink" title="load函数"></a>load函数</h2><p>load函数用于获取原子变量的当前值。它有以下两种形式：</p><pre class=" language-C++"><code class="language-C++">T load(memory_order order = memory_order_seq_cst) const noexcept;operator T() const noexcept;</code></pre><p>其中，第一种形式是显式调用load函数，第二种形式是通过重载类型转换运算符实现隐式调用。</p><p>load函数的参数memory_order表示内存序，也就是对原子变量的读操作要遵循哪种内存模型。</p><p>使用load函数时，如果不指定memory_order，则默认为memory_order_seq_cst。</p><p>load函数的返回值类型为T，即原子变量的类型。在使用load函数时需要指定类型参数T。如果使用第二种形式的load函数，则无需指定类型参数T，程序会自动根据上下文推断出类型。</p><pre class=" language-C++"><code class="language-C++">std::atomic<int> foo (0);int x;do &#123;    x = foo.load(std::memory_order_relaxed);  // get value atomically&#125; while (x==0);</code></pre><h2 id="exchange函数"><a href="#exchange函数" class="headerlink" title="exchange函数"></a>exchange函数</h2><p>访问和修改包含的值，将包含的值替换并返回它前面的值。</p><pre class=" language-C++"><code class="language-C++">template< class T >T exchange( volatile std::atomic<T>* obj, T desired );</code></pre><p>其中，obj参数指向需要替换值的atomic对象，desired参数为期望替换成的值。如果替换成功，则返回原来的值。</p><p>整个操作是原子的（原子读-修改-写操作）：从读取（要返回）值的那一刻到此函数修改值的那一刻，该值不受其他线程的影响。</p><p>示例</p><pre class=" language-C++"><code class="language-C++">#include <iostream>       // std::cout#include <atomic>         // std::atomic#include <thread>         // std::thread#include <vector>         // std::vectorstd::atomic<bool> ready (false);std::atomic<bool> winner (false);void count1m (int id) &#123;  while (!ready) &#123;&#125;                  // wait for the ready signal  for (int i=0; i<1000000; ++i) &#123;&#125;   // go!, count to 1 million  if (!winner.exchange(true)) &#123; std::cout << "thread #" << id << " won!\n"; &#125;&#125;;int main ()&#123;  std::vector<std::thread> threads;  std::cout << "spawning 10 threads that count to 1 million...\n";  for (int i=1; i<=10; ++i) threads.push_back(std::thread(count1m,i));  ready = true;  for (auto& th : threads) th.join();  return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> thread </tag>
            
            <tag> atomic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理权限的检查以及获得</title>
      <link href="/2023/080730182.html"/>
      <url>/2023/080730182.html</url>
      
        <content type="html"><![CDATA[<h2 id="错误查询并在Debug栏进行显示"><a href="#错误查询并在Debug栏进行显示" class="headerlink" title="错误查询并在Debug栏进行显示"></a>错误查询并在Debug栏进行显示</h2><pre class=" language-C++"><code class="language-C++">void ShowError() &#123;    LPWSTR lpMessageBuf = NULL;    //strerror(errno)标准C语言库    FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER,        NULL, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),        (LPWSTR)&lpMessageBuf, 0, NULL);    OutputDebugString(lpMessageBuf);    LocalFree(lpMessageBuf);&#125;</code></pre><h2 id="采用hToken进行权限查询，是否以管理员方式运行"><a href="#采用hToken进行权限查询，是否以管理员方式运行" class="headerlink" title="采用hToken进行权限查询，是否以管理员方式运行"></a>采用hToken进行权限查询，是否以管理员方式运行</h2><pre class=" language-C++"><code class="language-C++">bool IsAdmin() &#123;    HANDLE hToken = NULL;    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken)) &#123;        ShowError();        return false;    &#125;    TOKEN_ELEVATION eve;    DWORD len = 0;    if (!GetTokenInformation(hToken, TokenElevation, &eve, sizeof(eve), &len)) &#123;        ShowError();        return false;    &#125;    CloseHandle(hToken);    if (len == sizeof(eve))        return eve.TokenIsElevated;    printf("Length of TokenInformation is %d\r\n", len);    return false;&#125;</code></pre><h2 id="以管理员方式运行程序"><a href="#以管理员方式运行程序" class="headerlink" title="以管理员方式运行程序"></a>以管理员方式运行程序</h2><pre class=" language-C++"><code class="language-C++">HANDLE hToken = NULL;    BOOL ret = LogonUser(L"Administrator", NULL, NULL, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, &hToken);    if (!ret) &#123;        ShowError();        MessageBox(NULL, _T("登录错误"), _T("程序错误"), 0);        exit(0);    &#125;    OutputDebugString(L"LogOn AmniniStrator success!\r\n");    STARTUPINFO si = &#123; 0 &#125;;    PROCESS_INFORMATION pi = &#123; 0 &#125;;    TCHAR sPath[MAX_PATH] = _T("");    GetCurrentDirectory(MAX_PATH, sPath);    CString strCmd = sPath;    strCmd += _T("\RemoteCtrl.exe");    CString strCmd2 = GetCommandLine();    strCmd2.Replace(_T("""), _T(""));    //ret = CreateProcessWithTokenW(hToken, LOGON_WITH_PROFILE, NULL, (LPWSTR)(LPCWSTR)strCmd, CREATE_UNICODE_ENVIRONMENT, NULL, NULL, &si, &pi);    ret = CreateProcessWithLogonW(_T("Administrator"), NULL, NULL, LOGON_WITH_PROFILE, NULL, (LPWSTR)(LPCWSTR)strCmd, CREATE_UNICODE_ENVIRONMENT, NULL, NULL, &si, &pi);    CloseHandle(hToken);    if (!ret) &#123;        ShowError();        MessageBox(NULL, strCmd, _T("创建进程失败"), 0);        exit(0);    &#125;    WaitForSingleObject(pi.hProcess, INFINITE);    CloseHandle(pi.hProcess);    CloseHandle(pi.hThread);</code></pre><p><strong>如果提示此用户无法登录，因为该帐户当前已被禁用则采用以下方式进行设置</strong></p><p><img src="/2023/080730182/8b8d73aaa4476f103e1a4026b927b318-1691401961486-1.png" alt="8b8d73aaa4476f103e1a4026b927b318"></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> hToken </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机启动的两种方式</title>
      <link href="/2023/080716572.html"/>
      <url>/2023/080716572.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用注册表"><a href="#1-使用注册表" class="headerlink" title="1 使用注册表"></a>1 使用注册表</h2><pre class=" language-C++"><code class="language-C++">void ChooseAutoInvoke() &#123;    CString strPath = CString(_T("C:\Windows\System32\RemoteCtrl.exe"));    if (PathFileExists(strPath)) &#123;        return;    &#125;    CString strSubKey = _T("SOFTWARE\Microsoft\Windows\CurrentVersion\Run");    CString strInfo = _T("该程序只允许用于合法的用途！\n");    strInfo += _T("继续使用该程序，将使得这台机器处于被监控状态！\n");    strInfo += _T("如果你不需要，请按“取消”按钮，退出程序");    strInfo += _T("按下“是”按钮，将该程序被复制到你的机器上，平随着系统启动而自动运行\n");    strInfo += _T("按下“否”按钮，程序只运行一次，不会在系统内留下任何东西\n");    int ret = MessageBox(NULL, strInfo, _T("警告"), MB_YESNOCANCEL | MB_ICONWARNING | MB_TOPMOST);    if (ret == IDYES) &#123;        char sPath[MAX_PATH]&#123; "" &#125;;        char sSys[MAX_PATH]&#123; "" &#125;;        std::string strExe = "\RemoteCtrl.exe ";        GetCurrentDirectoryA(MAX_PATH, sPath);        GetSystemDirectoryA(sSys, sizeof(sSys));        std::string strCmd = "mklink " + std::string(sSys) + strExe + std::string(sPath) + strExe;        system(strCmd.c_str());        TRACE("ret= %d\r\n", ret);        HKEY hKey = NULL;        ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, strSubKey, 0, KEY_WRITE, &hKey);//KEY_ALL_ACCESS|KEY_WOW64_64KEY        if (ret != ERROR_SUCCESS) &#123;            RegCloseKey(hKey);            MessageBox(NULL, _T("设置自动开机启动失败！是否权限不足？\r\n程序启动失败！"), _T("错误"), MB_ICONERROR | MB_TOPMOST);            exit(0);        &#125;        TCHAR sSysPath[MAX_PATH] = _T("");        GetSystemDirectoryW(sSysPath, MAX_PATH);        CString strPath = sSysPath + CString(_T("\RemoteCtrl.exe"));        ret = RegSetValueEx(hKey, _T("RemoteCtrl"), 0, REG_SZ, (BYTE*)(LPCTSTR)strPath, strPath.GetLength() * sizeof(TCHAR));        if (ret != ERROR_SUCCESS) &#123;            RegCloseKey(hKey);            MessageBox(NULL, _T("设置自动开机启动失败！是否权限不足？\r\n程序启动失败！"), _T("错误"), MB_ICONERROR | MB_TOPMOST);            exit(0);        &#125;        RegCloseKey(hKey);    &#125;    else if (ret == IDCANCEL) &#123;        exit(0);    &#125;&#125;</code></pre><h2 id="2-使用开机启动项"><a href="#2-使用开机启动项" class="headerlink" title="2 使用开机启动项"></a>2 使用开机启动项</h2><ol><li>win+R 输入shell:startup</li><li>将文件复制到该文件夹下</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用指南</title>
      <link href="/2023/080644954.html"/>
      <url>/2023/080644954.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先需要安装Nodejs"><a href="#首先需要安装Nodejs" class="headerlink" title="首先需要安装Nodejs"></a>首先需要安装Nodejs</h2><p>打开网站<code>Nodejs.org</code>进行下载</p><h2 id="window下打开powershell进行操作"><a href="#window下打开powershell进行操作" class="headerlink" title="window下打开powershell进行操作"></a>window下打开powershell进行操作</h2><pre class=" language-powershell"><code class="language-powershell">node <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看node版本</span>npm <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看npm版本</span>npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry=http:<span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token comment" spellcheck="true">#安装淘宝的cnpm 管理器</span>cnpm <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看cnpm版本</span>cnpm install <span class="token operator">-</span>g hexo<span class="token operator">-</span><span class="token function">cli</span>    <span class="token comment" spellcheck="true">#安装hexo框架</span>hexo <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看hexo版本</span>mkdir blog<span class="token comment" spellcheck="true">#创建blog目录</span>cd blog <span class="token comment" spellcheck="true">#进入blog目录</span>sudo hexo init <span class="token comment" spellcheck="true">#生成博客 初始化博客</span>hexo s<span class="token comment" spellcheck="true">#启动本地博客服务</span>http:<span class="token operator">/</span><span class="token operator">/</span>localhost:4000<span class="token operator">/</span><span class="token comment" spellcheck="true">#本地访问地址</span>hexo n <span class="token string">"我的第一篇文章"</span> <span class="token comment" spellcheck="true">#创建新的文章 </span><span class="token comment" spellcheck="true">#返回blog目录</span>hexo clean <span class="token comment" spellcheck="true">#清理</span>hexo g <span class="token comment" spellcheck="true">#生成</span><span class="token comment" spellcheck="true">#Github创建一个新的仓库 YourGithubName.github.io</span>cnpm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token comment" spellcheck="true">#在blog目录下安装git部署插件</span></code></pre><h2 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h2><pre class=" language-powershell"><code class="language-powershell">  <span class="token comment" spellcheck="true"># Deployment</span>    <span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>    deploy:          <span class="token function">type</span>: <span class="token string">'git'</span>           repo: git@github<span class="token punctuation">.</span>com:Mrmengqiushisan<span class="token operator">/</span>mrmengqiushisan<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git          branch: main</code></pre><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><pre class=" language-powershell"><code class="language-powershell">hexo d<span class="token comment" spellcheck="true">#部署到Github仓库里</span>https:<span class="token operator">/</span><span class="token operator">/</span>mrmengqiushisan<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>  <span class="token comment" spellcheck="true">#访问这个地址可以查看博客</span></code></pre><h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><pre class=" language-powershell"><code class="language-powershell">git clone https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>litten<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>yilia<span class="token punctuation">.</span>git themes<span class="token operator">/</span>yilia  <span class="token comment" spellcheck="true">#下载yilia主题到本地</span><span class="token comment" spellcheck="true">#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span>hexo c<span class="token comment" spellcheck="true">#清理一下</span>hexo g<span class="token comment" spellcheck="true">#生成</span>hexo d<span class="token comment" spellcheck="true">#部署到远程Github仓库</span></code></pre><h2 id="主题更换链接"><a href="#主题更换链接" class="headerlink" title="主题更换链接"></a>主题更换链接</h2><p><a href="https://hexo.io/themes/"><code>https://hexo.io/themes/</code></a></p><h2 id="基于Hexo的matery主题搭建博客并优化"><a href="#基于Hexo的matery主题搭建博客并优化" class="headerlink" title="基于Hexo的matery主题搭建博客并优化"></a>基于Hexo的matery主题搭建博客并优化</h2><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651"><code>https://blog.csdn.net/jspnetcn/article/details/104111651</code></a></p>]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/080516107.html"/>
      <url>/2023/080516107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
