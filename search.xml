<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>静态库使用</title>
      <link href="/2023/090526179.html"/>
      <url>/2023/090526179.html</url>
      
        <content type="html"><![CDATA[<p>GCC工作流程</p><p><img src="/2023/090526179/0dc636c7a1f38e9dd6388d09b7030136.png" alt="0dc636c7a1f38e9dd6388d09b7030136"></p><p><img src="/2023/090526179/f6fd2a4fa5abb40922f565d600a59968.png" alt="f6fd2a4fa5abb40922f565d600a59968"></p><p><img src="/2023/090526179/f155c5e1139fc86a3d9a8f50f8597bc0.png" alt="f155c5e1139fc86a3d9a8f50f8597bc0"></p><p><img src="/2023/090526179/6decac904e247b8482929b00826ee0d1.png" alt="6decac904e247b8482929b00826ee0d1"></p><p>注意：.i为预处理文件 .s为汇编文件 .o为目标文件 .out为可执行文件</p><p>同样也可以通过gcc来编译c++代码，原则上gcc在程序的预处理，编译文件，汇编文件，不可以进行链接但可以指定<code>-stdc++</code>来使用gcc生成可执行文件</p><p><img src="/2023/090526179/199534084dfb63cb430dc4d3df5c81ec.png" alt="199534084dfb63cb430dc4d3df5c81ec"></p><h2 id="库的定义与特点"><a href="#库的定义与特点" class="headerlink" title="库的定义与特点"></a>库的定义与特点</h2><ol><li>库文件是计算机上的一类文件，可以简单的把库文件看成一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类。</li><li>库是特殊的一种程序，编写库的程序和编写一般的程序区别不大，只是库不能单独运行。</li><li>库文件有两种，静态库和动态库（共享库），区别是：静态库在程序的链接阶段被复制到了程序中；动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用。</li><li>库的好处：1.代码保密 2.方便部署和分发</li></ol><h2 id="静态库的制作"><a href="#静态库的制作" class="headerlink" title="静态库的制作"></a>静态库的制作</h2><p><img src="/2023/090526179/image-20230905212311428.png" alt="image-20230905212311428"></p><p><img src="/2023/090526179/image-20230905213403681.png" alt="image-20230905213403681"></p><p><img src="/2023/090526179/image-20230905213427862.png" alt="image-20230905213427862"></p><h2 id="静态库的使用"><a href="#静态库的使用" class="headerlink" title="静态库的使用"></a>静态库的使用</h2><p><img src="/2023/090526179/image-20230905215133541.png" alt="image-20230905215133541"></p><p><img src="/2023/090526179/image-20230905215334268.png" alt="image-20230905215334268"></p><h2 id="动态库的制作"><a href="#动态库的制作" class="headerlink" title="动态库的制作"></a>动态库的制作</h2><p><img src="/2023/090526179/image-20230905215616532.png" alt="image-20230905215616532"></p><p><img src="/2023/090526179/image-20230905220446660.png" alt="image-20230905220446660"></p><h2 id="静态库与动态库的区别"><a href="#静态库与动态库的区别" class="headerlink" title="静态库与动态库的区别"></a>静态库与动态库的区别</h2><ol><li>静态库：GCC进行链接时，会把静态库中代码打包到可执行程序中</li><li>动态库：GCC进行链接时T动态库的代码不会被打包到可执行程序中</li><li>程序启动之后，动态库会被动态加载到内存中，通过1dd(list dynamicdependencies)命令检查动态库依赖关系</li><li>如何定位共享库文件呢？当系统加载可执行代码时候，能够知道其所依赖的库的名字，但是还需要知道绝对路径。此时就需要系统的动态载入器来获取该绝对路径。对于elf格式的可执行程序，是由ld-1inux.so来完成的，它先后搜索elf文件的DT_RPATH段一&gt;环境变量LD_LIBRARY_PATH一&gt;&#x2F;etc&#x2F;1d.so.cache文件列表-&gt;&#x2F;1ib&#x2F;,&#x2F;usr&#x2F;1ib目录找到库文件后将其载入内存。</li></ol><h2 id="这种配置方式是临时的"><a href="#这种配置方式是临时的" class="headerlink" title="这种配置方式是临时的"></a>这种配置方式是临时的</h2><p><img src="/2023/090526179/image-20230905222933320.png" alt="image-20230905222933320"></p><p>通过修改<code>.ashrc</code>文件添加环境变量来实现全局配置，配置之后需要执行source .bashrc命令生效</p><p>通过修改&#x2F;etc&#x2F;profile&#x2F;文件中的环境变量实现全局配置</p><p>通过修改&#x2F;etc&#x2F;ld.so.conf 直接添加绝对路径即可，无需添加LD_LIBRARY_PATH环境变量 记得更新sudo ldconfig</p><h2 id="静态库的优缺点"><a href="#静态库的优缺点" class="headerlink" title="静态库的优缺点"></a>静态库的优缺点</h2><p>优点：</p><ol><li>静态库被打包到应用程序中加载速度快</li><li>发布程序无需提供静态库，移植方便</li></ol><p>缺点：</p><ol><li>消耗系统资源，浪费内存</li><li>更新、部署、发布麻烦</li></ol><p><img src="/2023/090526179/image-20230906102202481.png" alt="image-20230906102202481"></p><h2 id="动态库的优缺点"><a href="#动态库的优缺点" class="headerlink" title="动态库的优缺点"></a>动态库的优缺点</h2><p>优点：</p><ol><li>可以实现进程间资源共享</li><li>更新、部署、发布简单</li><li>可以控制何时加载动态库</li></ol><p>缺点：</p><ol><li>加载速度比静态库慢</li><li>发布程序时需要提供依赖的动态库</li></ol><p><img src="/2023/090526179/image-20230906102540214.png" alt="image-20230906102540214"></p>]]></content>
      
      
      <categories>
          
          <category> 静态库动态库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全</title>
      <link href="/2023/082445331.html"/>
      <url>/2023/082445331.html</url>
      
        <content type="html"><![CDATA[<h2 id="网络安全泄漏的分类"><a href="#网络安全泄漏的分类" class="headerlink" title="网络安全泄漏的分类"></a>网络安全泄漏的分类</h2><ol><li>数据泄漏</li><li>服务瘫痪</li><li>成果失窃</li><li>系统劫持</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式</title>
      <link href="/2023/082221407.html"/>
      <url>/2023/082221407.html</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>主要用于创建对象，新添加类时，不会影响以前的系统代码，核心思想是用一个工厂来根据输入的条件产生不同的类，然后根据不同类的virtual函数得到不同的结果。</p><p><img src="/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20230822223901811.png" alt="image-20230822223901811"></p><pre class=" language-c++"><code class="language-c++">#pragma onceusing namespace std;class COperation &#123;public:    int m_First;    int m_Second;    virtual double GetResult() &#123;        double dResult&#123; 0 &#125;;        return dResult;    &#125;&#125;;//加法class AddOperation :public COperation &#123;    double GetResult()override &#123;        return m_Second + m_First;    &#125;&#125;;//减法class SubOperation :public COperation &#123;    double GetResult()override &#123;        return m_First - m_Second;    &#125;&#125;;//乘法class MultiOperation :public COperation &#123;    double GetResult()override &#123;        return m_First * m_Second;    &#125;&#125;;//除法class DivOperation :public COperation &#123;    double GetResult()override &#123;        if (m_Second != 0)            return m_First - m_Second;        return INT_MAX;    &#125;&#125;;//工厂类class CCalculatorFactory &#123;public:    static COperation* Create(char cOpertaor);&#125;;COperation* CCalculatorFactory::Create(char cOpertaor)&#123;    COperation* oper;    switch (cOpertaor) &#123;    case '+':        oper = new AddOperation();        break;    case '-':        oper = new SubOperation();        break;    case '*':        oper = new MultiOperation();        break;    case '/':        oper = new DivOperation();        break;    default:        oper = new AddOperation();        break;    &#125;    return oper;&#125;</code></pre><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>它定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p><p>GOOD:适合类中的成员以方法为主，算法经常变动；简化了单元测试（因为每个 算法都有自己的类，可以通过自己的接口单独测试</p><p>策略模式和简单工厂基本相同，但简单工厂模式只能解决对象创建问题，对于经常 变动的算法应使用策略模式。</p><p>BUG:客户端要做出判断。</p><pre class=" language-C++"><code class="language-C++">#pragma once#include <string>enum CASHTYPE &#123;    CASH_NORMAL,    CASH_REBATE,    CASH_RETURN&#125;;class CashSuper &#123;public:    virtual double acceptCash(double money) = 0;    ~CashSuper() &#123;&#125;;&#125;;class CashNormal :public CashSuper &#123;public:    double acceptCash(double money)override &#123;        return money;    &#125;&#125;;class CashRebate :public CashSuper &#123;public:    double rebate;    CashRebate() :rebate(0.0) &#123;&#125;    CashRebate(double data) :rebate(data) &#123;&#125;    double acceptCash(double money)override &#123;        return money * rebate;    &#125;&#125;;class CashReturn :public CashSuper &#123;public:    double m_condition;    double m_return;    CashReturn() :m_condition(0.0), m_return(0.0) &#123;&#125;    CashReturn(double condition, double retun) :m_condition(condition), m_return(retun) &#123;&#125;    double acceptCash(double money)override &#123;        double res&#123; 0.0 &#125;;        if (money >= m_condition) &#123;            res = money - (money / m_condition) * m_return;        &#125;        return res;    &#125;&#125;;class CashContext &#123;public:    CashSuper* cs = NULL;    CashContext(CASHTYPE type) &#123;        switch (type)&#123;        case CASH_NORMAL:            cs = new CashNormal();            break;        case CASH_REBATE:            cs = new CashRebate(0.8);            break;        case CASH_RETURN:            cs = new CashReturn(300, 100);            break;        default:            cs = new CashNormal();            break;        &#125;    &#125;    double GetResult(double money) &#123;        return cs->acceptCash(money);    &#125;&#125;;</code></pre><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>就一个类而言，应该仅有一个引起它变化的原因。 </p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削 弱或者抑制这个类完成其它职责能力。这种耦合会导制脆弱的设计，当变化发生时，设计会 遭受到意想不到的破坏。</p><p>如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。</p><h2 id="开放–封闭原则"><a href="#开放–封闭原则" class="headerlink" title="开放–封闭原则"></a>开放–封闭原则</h2><p>​软件实体可以扩展，但是不可修改。即对于扩展是开放的，对于修改是封闭的。面 对需求，对程序的改动是通过增加代码来完成的，而不是改动现有的代码</p><p>​当变化发生时，我们就创建抽象来隔离以后发生同类的变化。</p><p>​开放――封闭原则是面向对象的核心所在。开发人员应该对程序中呈现出频繁变化 的那部分做出抽象，拒绝对任何部分都刻意抽象及不成熟的抽象。</p><h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2><p>​一个软件实体如果使用的是一个父类的话，那么一定适用其子类。而且它察觉不出 父类对象和子类对象的区别。也就是说：在软件里面，把父类替换成子类，程序的行为没有 变化。</p><p>​子类型必须能够替换掉它们的父类型。</p><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><p>​抽象不应该依赖细节，细节应该依赖抽象。即针对接口编程，不要对实现编程。</p><p>​高层模块不能依赖低层模块，两者都应依赖抽象。</p><p>​依赖倒转原则是面向对象的标志，用哪种语言编写程序不重要，如果编写时考虑的 是如何针对抽象编程而不是针对细节编程，即程序的所有依赖关系都终止于抽象类或接口。 那就是面向对象设计，反之那就是过程化设计。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构设计</title>
      <link href="/2023/082244269.html"/>
      <url>/2023/082244269.html</url>
      
        <content type="html"><![CDATA[<h2 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a>单机架构</h2><p>软件系统需要具备对外提供服务，单机，就是把所有功能都实现在一个进程里，并部署在一台机器上。</p><h2 id="单体，垂直应用-垂直切分"><a href="#单体，垂直应用-垂直切分" class="headerlink" title="单体，垂直应用|垂直切分"></a>单体，垂直应用|垂直切分</h2><p>单体架构：分布式部署</p><p>垂直应用架构：按应用垂直切分的单体</p><p><img src="/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/image-20230822195806072.png" alt="image-20230822195806072"></p><h2 id="SOA-微服务-水平切分"><a href="#SOA-微服务-水平切分" class="headerlink" title="SOA,微服务|水平切分"></a>SOA,微服务|水平切分</h2><p>将应用的不同功能抽象为服务，定义服务之间的通信标准</p><p><img src="/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/image-20230822200429142.png" alt="image-20230822200429142"></p><h2 id="后端结构剖析"><a href="#后端结构剖析" class="headerlink" title="后端结构剖析"></a>后端结构剖析</h2>]]></content>
      
      
      <categories>
          
          <category> 产品架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows编程</title>
      <link href="/2023/082060118.html"/>
      <url>/2023/082060118.html</url>
      
        <content type="html"><![CDATA[<h2 id="MessageBoxA和MessageBoxEx和MessageBox有什么区别"><a href="#MessageBoxA和MessageBoxEx和MessageBox有什么区别" class="headerlink" title="MessageBoxA和MessageBoxEx和MessageBox有什么区别"></a>MessageBoxA和MessageBoxEx和MessageBox有什么区别</h2><h3 id="MessageBoxA-多字节字符集"><a href="#MessageBoxA-多字节字符集" class="headerlink" title="MessageBoxA: (多字节字符集)"></a><strong>MessageBoxA</strong>: (多字节字符集)</h3><p>这是 <code>MessageBox</code> 函数的 ANSI 版本。在 Windows API 中，函数名后缀 “A” 表示 ANSI 字符集。这个函数用于显示一个标准的消息框，其中包含文本消息、图标和按钮。消息框可以包含一个或多个按钮，用户可以根据需要选择一个按钮，然后执行相应的操作。这个函数主要用于英文和其他单字节字符集的情况。</p><h3 id="MessageBoxEx"><a href="#MessageBoxEx" class="headerlink" title="MessageBoxEx:"></a><strong>MessageBoxEx</strong>:</h3><p>这是一个扩展的消息框函数，它提供了比标准 <code>MessageBox</code> 更多的选项。通过 <code>MessageBoxEx</code>，您可以更精确地控制消息框的外观和行为，包括自定义按钮标签、图标、默认按钮等。这个函数在某些情况下可以更好地满足特定的用户界面需求。</p><h3 id="MessageBox-可以自动切换需要的字符集"><a href="#MessageBox-可以自动切换需要的字符集" class="headerlink" title="MessageBox: (可以自动切换需要的字符集)"></a><strong>MessageBox</strong>: (可以自动切换需要的字符集)</h3><p>这是一个通用的消息框函数，根据编译时的宏定义，它可以根据当前字符集（ANSI 或 Unicode）选择调用 <code>MessageBoxA</code> 或 <code>MessageBoxW</code>。函数名后缀 “W” 表示 Unicode 字符集。<code>MessageBox</code> 函数的主要优点是它能够根据编译时的设置在 ANSI 和 Unicode 环境下都能正常工作。如果您的程序同时需要支持多种字符集，那么使用 <code>MessageBox</code> 可以更方便地处理这种情况。</p><h2 id="Windows中-T-的作用是"><a href="#Windows中-T-的作用是" class="headerlink" title="Windows中_T()的作用是"></a>Windows中_T()的作用是</h2><p>在 Windows 编程中，<code>_T()</code> 是一个宏，用于支持程序在 ANSI 字符集和 Unicode 字符集之间进行切换，以确保代码的跨字符集兼容性。</p><p>具体来说，<code>_T()</code> 宏会根据编译时的设置自动将字符串文字转换为 ANSI 或 Unicode 格式的字符串。这在编写可在不同字符集环境下运行的程序时非常有用。</p><h2 id="FILE的使用"><a href="#FILE的使用" class="headerlink" title="FILE的使用"></a>FILE的使用</h2><p><code>freed()</code>用于获取文件指针当前位置相对于文件开头的偏移量</p><p><code>fseek()</code>用于偏移文件中的指针</p><pre class=" language-c++"><code class="language-c++">FILE* pFile = NULL;errno_t ret = fopen_s(&pFile, strPath.c_str(), "rb");if(ret!=0)return -1;if (pFile != NULL) &#123;    fseek(pFile, 0, SEEK_SET);        data = _ftelli64(pFile);        CPacket head(4, (BYTE*)data, 8);        CServerSocket::getInstance()->Send(head);        fseek(pFile, 0, SEEK_SET);        char buffer[1024]&#123;&#125;;        size_t rLen = 0;        do &#123;            rLen = fread(buffer, 1, sizeof(buffer), pFile);            CPacket pack(4, (BYTE*)buffer, rLen);            CServerSocket::getInstance()->Send(pack);        &#125; while (rLen >= 1024);        fclose(pFile);    &#125;    CPacket pack(4, NULL, 0);    CServerSocket::getInstance()->Send(pack);    return 0;</code></pre><h2 id="设置鼠标的位置"><a href="#设置鼠标的位置" class="headerlink" title="设置鼠标的位置"></a>设置鼠标的位置</h2><p><code>SetCursorPos(mouse.ptXY.x, mouse.ptXY.y);</code></p><h2 id="屏幕参数"><a href="#屏幕参数" class="headerlink" title="屏幕参数"></a>屏幕参数</h2><ul><li><code>HDC hScreen = ::GetDC(NULL);</code>主要是在Windows环境下获取主显示设备的设备上下文句柄，</li><li><code>GetDC</code> 函数的作用是获取指定窗口或设备的设备上下文，用于在窗口上绘图、显示图像等操作，传递 <code>NULL</code> 参数给 <code>GetDC</code> 表示获取主显示设备的设备上下文，这意味着您可以在主显示设备上进行绘图操作。</li><li><code>int nBitPerPixel = GetDeviceCaps(hScreen, BITSPIXEL);</code>用于获取设备的能力信息，<code>GetDeviceCaps</code> 可以获取各种设备的信息，包括分辨率、颜色深度、物理尺寸等。</li><li><code>BitBlt(screen.GetDC(), 0, 0, 1920, 1020, hScreen, 0, 0, SRCCOPY);</code>用于在设备上下文之间复制位图数据，它可以在两个设备上下文之间进行位图数据的传输，从而实现图像的显示，复制等操作，<code>BitBlt</code> 可以用于在屏幕上显示图像、从一个设备上下文复制到另一个设备上下文，或在内存 DC（内存中的设备上下文）之间进行位图传输等。</li><li><code>ReleaseDC</code> 是 Windows API 中的函数，用于释放设备上下文（Device Context，简称 HDC）句柄。</li><li><code>GlobalAlloc</code> 是 Windows API 中的函数，用于分配全局内存块。它可以分配一块指定大小的内存，并返回一个句柄，通过该句柄可以访问和管理分配的内存块，<code>GMEM_MOVEABLE</code>: 内存分配的标志，表示分配的内存块可以移动。</li><li><code>IStream</code>用于在不同的数据介质之间进行数据流的读取和写入，</li><li><code>CreateStreamOnHGlobal</code> 是 Windows COM 技术中的一个函数，用于创建一个基于内存全局句柄的数据流。这个函数可以用于将内存块包装成一个 COM 可用的数据流，以便在不同组件之间传递和处理数据。</li><li><code>GlobalLock</code> 函数用于锁定一个全局内存句柄，以便您可以访问和操作该内存块。锁定内存块后，您可以将其视为一个指向数据的指针，从而可以进行读取和写入操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MFC </tag>
            
            <tag> Windows </tag>
            
            <tag> SOCKET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go消息队列</title>
      <link href="/2023/081964717.html"/>
      <url>/2023/081964717.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++并发编程</title>
      <link href="/2023/081715494.html"/>
      <url>/2023/081715494.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对象存储</title>
      <link href="/2023/081652827.html"/>
      <url>/2023/081652827.html</url>
      
        <content type="html"><![CDATA[<h2 id="短视频结构初探"><a href="#短视频结构初探" class="headerlink" title="短视频结构初探"></a>短视频结构初探</h2><p><img src="/2023/081652827/image-20230816155318379.png" alt="image-20230816155318379"></p><p>把短视频生产&#x2F;消费链路做更详细粒度分解</p><p><img src="/2023/081652827/image-20230816155444751.png" alt="image-20230816155444751"></p><h2 id="为什么要对象存储"><a href="#为什么要对象存储" class="headerlink" title="为什么要对象存储"></a>为什么要对象存储</h2><p><img src="/2023/081652827/image-20230816160128901.png" alt="image-20230816160128901"></p><h3 id="存储对比"><a href="#存储对比" class="headerlink" title="存储对比"></a>存储对比</h3><p><img src="/2023/081652827/image-20230816160536164.png" alt="image-20230816160536164"></p><p><img src="/2023/081652827/image-20230816160851058.png" alt="image-20230816160851058"></p><p><img src="/2023/081652827/image-20230816162237915.png" alt="image-20230816162237915"></p><h2 id="对象存储使用方法"><a href="#对象存储使用方法" class="headerlink" title="对象存储使用方法"></a>对象存储使用方法</h2><p><img src="/2023/081652827/image-20230816162340191.png" alt="image-20230816162340191"></p><p><img src="/2023/081652827/image-20230816162655133.png" alt="image-20230816162655133"></p><p><img src="/2023/081652827/image-20230816163720193.png" alt="image-20230816163720193"></p><p><img src="/2023/081652827/image-20230816163735767.png" alt="image-20230816163735767"></p><h2 id="开发一个对象存储"><a href="#开发一个对象存储" class="headerlink" title="开发一个对象存储"></a>开发一个对象存储</h2><p><img src="/2023/081652827/image-20230816164405288.png" alt="image-20230816164405288"></p><p><img src="/2023/081652827/image-20230816164441333.png" alt="image-20230816164441333"></p>]]></content>
      
      
      <categories>
          
          <category> 对象存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系统化学习</title>
      <link href="/2023/0815770.html"/>
      <url>/2023/0815770.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要Redis"><a href="#为什么需要Redis" class="headerlink" title="为什么需要Redis"></a>为什么需要Redis</h2><p><img src="/2023/0815770/image-20230819200657466.png" alt="image-20230819200657466"></p><h2 id="Redis基本工作原理"><a href="#Redis基本工作原理" class="headerlink" title="Redis基本工作原理"></a>Redis基本工作原理</h2><ol><li>数据从内存中读写</li><li>数据保存到硬盘上防止重启数据丢失<ul><li>增量数据保存到AOF文件</li><li>全量数据保存到RDB文件</li></ul></li></ol><p>​ 3.  单线程处理所有操作命令</p><p><img src="/2023/0815770/image-20230819200714058.png" alt="image-20230819200714058"></p><p><img src="/2023/0815770/image-20230819200725535.png" alt="image-20230819200725535"></p><h2 id="Redis客户端常用命令"><a href="#Redis客户端常用命令" class="headerlink" title="Redis客户端常用命令"></a>Redis客户端常用命令</h2><h3 id="字符串命令"><a href="#字符串命令" class="headerlink" title="字符串命令"></a>字符串命令</h3><ul><li>set 设置存储在给定键中的值</li><li>get 获取存储在给定键中的值</li><li>del 删除存储在给定键中的值（这个命令可以用于所有类型）</li></ul><p><img src="/2023/0815770/image-20230817163354468.png" alt="image-20230817163354468"></p><h3 id="列表命令"><a href="#列表命令" class="headerlink" title="列表命令"></a>列表命令</h3><ul><li>rpush 将给定值推入列表的右端</li><li>lrange 获取列表在给定范围上的所有值</li><li>lindex 获取列表在给定位置上的单个元素</li><li>lpop   从列表的左端弹出一个值，并返回被弹出的值</li></ul><p><img src="/2023/0815770/image-20230817164217438.png" alt="image-20230817164217438"></p><h3 id="集合命令"><a href="#集合命令" class="headerlink" title="集合命令"></a>集合命令</h3><ul><li>sadd 将元素添加到集合中</li><li>srem 从集合中移除元素</li><li>sismember 快速的检查一个元素是否已存在与集合中</li><li>smembers 获取集合中包含的所有元素</li></ul><p><img src="/2023/0815770/image-20230817165435533.png" alt="image-20230817165435533"></p><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><ul><li>hset 在散列里面关联给定的键值对</li><li>hget 获取指定散列键的值</li><li>hgetall 获取散列包含的所有键值对</li><li>hdel 如果给定键存在与散列里面，那么移除这个键</li></ul><p><img src="/2023/0815770/image-20230817170147781.png" alt="image-20230817170147781"></p><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><ul><li>zadd 将一个带有给定分值的成员添加到有序集合里面</li><li>zrange 根据元素在有序排列中所处的位置，从有序集合里面获取多个元素</li><li>zrangebyscore 获取有序集合中在给定分值范围内的所有元素</li><li>zrem 如果给定成员存在与有序集合，那么移除这个项目</li></ul><p><img src="/2023/0815770/image-20230817170933216.png" alt="image-20230817170933216"></p><h2 id="Redis应用案例"><a href="#Redis应用案例" class="headerlink" title="Redis应用案例"></a>Redis应用案例</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>首先需要确保系统内下载了Redis服务端，官网提供了Windows和Linux的下载方式，因为本人电脑使用的是Window，所以下载了Window版的，开启Redis-server后，通过后台我们需要确保Redis服务已开启，如下图：</p><p><img src="/2023/0815770/image-20230819201230232.png" alt="image-20230819201230232"></p><h3 id="搭建Go环境Redis客户端"><a href="#搭建Go环境Redis客户端" class="headerlink" title="搭建Go环境Redis客户端"></a>搭建Go环境Redis客户端</h3><p>通过<code>go get -u github.com/go-redis/redis</code>可以下载Go开发依赖包</p><p>go-redis包自带了连接池，会自动维护redis连接，因此创建一次client即可，不要查询一次redis就关闭client</p><h3 id="Redis连接测试"><a href="#Redis连接测试" class="headerlink" title="Redis连接测试"></a>Redis连接测试</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> example<span class="token keyword">import</span> <span class="token string">"github.com/go-redis/redis"</span><span class="token keyword">var</span> RedisClient <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token keyword">func</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RedisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Addr<span class="token punctuation">:</span>     <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>        Password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        DB<span class="token punctuation">:</span>       <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="连续签到"><a href="#连续签到" class="headerlink" title="连续签到"></a>连续签到</h3><p>用户每日有一次签到的机会，如果断签，连续签到计数将归0，连续签到的定义；每天必须在23：59：59前签到</p><ul><li>Key: cc_uid_11658948334101</li><li>value:252</li><li>expireAt:后天的0点</li></ul><h4 id="用到的数据结构：string"><a href="#用到的数据结构：string" class="headerlink" title="用到的数据结构：string"></a>用到的数据结构：string</h4><p><img src="/2023/0815770/image-20230819201238281.png" alt="image-20230819201238281"></p><p>这个例子主要用到是最简单的redis存储方式，即可以直接给与对应的key值既可，可以通过incr函数进行自增，程序复现代码以及运行结果如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> example<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">const</span> continuesCheckKey <span class="token operator">=</span> <span class="token string">"cc_uid_%d"</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Ex01 连续签到天数</span><span class="token keyword">func</span> <span class="token function">Ex01</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> userID<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">addContinuesDays</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"参数错误,param=%v,error:%v\n"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// addContinuesDays 为用户签到续期</span><span class="token keyword">func</span> <span class="token function">addContinuesDays</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> userID <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>continuesCheckKey<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"用户[%d]连续签到失败"</span><span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        expAT <span class="token operator">:=</span> <span class="token function">beginningOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//设置签到记录在后天的0点到期</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">ExpireAt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> expAT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打印用户签到后的连续签到天数</span>            day<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getUserCheckInDays</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"用户[%d]连续签到,%d天,过期时间:%s\n"</span><span class="token punctuation">,</span> userID<span class="token punctuation">,</span> day<span class="token punctuation">,</span> expAT<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">getUserCheckInDays</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> userID <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>continuesCheckKey<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    days<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> daysInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>days<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> daysInt<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">beginningOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/0815770/image-20230817211539350.png" alt="image-20230817211539350"></p><h3 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h3><p>用list作为消息队列，使用场景：消息通知。例如当文章更新时，将更新后的文章推送到S,用户就能搜索到最新的文章数据</p><p><img src="/2023/0815770/image-20230819200831923.png" alt="image-20230819200831923"></p><p>这一部分的实现需要我们去监听我们想看的列表，所以需要去构建并发线程的思想，为了更好的去查看协程的执行情况，我们应该定义一个日志搜集器，来监听协程执行过程中信息，对于这个搜集器的定义，主要有以下几个需要注意的点：</p><ul><li>在总体设计上，我们只对外使用一个ConcurrentEventLogger结构，该结构中会存储一个类型为 EventLog的切片</li><li>EventLog结构主要是有一个当前时间和日志信息，通过保存这两个消息，可以打印出对应的消息</li><li>为ConcurrentEventLogger结构封装了几个主要使用的关键接口</li><li>用于初始化搜集器的接口<strong>NewConcurrentEventLogs</strong></li><li>用于追加日志的结构Append</li><li>用于将所有日志正序输出的接口PrintLogs</li><li>用于构建一条结构化的日志语句的接口LogFormat</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> common<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"fmt"</span>    <span class="token string">"sort"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义并发日志收集器</span><span class="token keyword">type</span> ConcurrentEventLogger <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    eventlogs <span class="token punctuation">[</span><span class="token punctuation">]</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// EventLog 搜集日志的结构</span><span class="token keyword">type</span> EventLog <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    EventTime time<span class="token punctuation">.</span>Time    Log       <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">NewConcurrentEventLogs</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> logsLength <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ConcurrentEventLogger <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> logsLength <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        logsLength <span class="token operator">=</span> <span class="token number">32</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    logContainer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>EventLog<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> logsLength<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConcurrentEventLogger<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>eventlogs<span class="token punctuation">:</span> logContainer<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Append 追加日志</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ceLog <span class="token operator">*</span>ConcurrentEventLogger<span class="token punctuation">)</span> <span class="token function">Append</span><span class="token punctuation">(</span>mLog EventLog<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ceLog<span class="token punctuation">.</span>eventlogs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ceLog<span class="token punctuation">.</span>eventlogs<span class="token punctuation">,</span> mLog<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// PrintLogs 日志按时间正序输出</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ceLog <span class="token operator">*</span>ConcurrentEventLogger<span class="token punctuation">)</span> <span class="token function">PrintLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>ceLog<span class="token punctuation">.</span>eventlogs<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ceLog<span class="token punctuation">.</span>eventlogs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>EventTime<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>ceLog<span class="token punctuation">.</span>eventlogs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> ceLog<span class="token punctuation">.</span>eventlogs <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ceLog<span class="token punctuation">.</span>eventlogs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Log<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LogFormat 包含通用日志前缀 [2022-11-27T12:36:00.213454+08:00] routine[5]</span><span class="token keyword">func</span> <span class="token function">LogFormat</span><span class="token punctuation">(</span>routine <span class="token builtin">int</span><span class="token punctuation">,</span>format <span class="token builtin">string</span><span class="token punctuation">,</span>a <span class="token operator">...</span>any<span class="token punctuation">)</span><span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tpl<span class="token operator">:=</span><span class="token string">"[%s] routine[%d]"</span><span class="token operator">+</span>format    sr<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span>routine<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sr<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>sr<span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span>sr<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>定义并发协程类，这个结构为主要的执行结构，因为我们需要通过这个结构实现并发执行，首先看一下主要的结构体</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 并发执行器对象定义</span><span class="token keyword">type</span> ConCurrentRoutine <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routineNums           <span class="token builtin">int</span>                    <span class="token comment" spellcheck="true">//定义并发协程的数量</span>    concurrentEventLogger <span class="token operator">*</span>ConcurrentEventLogger <span class="token comment" spellcheck="true">//并发日志搜集器</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过该结构体我们可以看出其实很简单，只记录了协程数量以及一个搜集器，这个搜集器是所有协程所共享的，一般对于协程的封装来说我们会给外部暴露一个初始化接口以及一个运行接口，初始化简单，无非就是初始化结构体中的变量</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NewConcurrentRoutine 初始化一个并发执行器</span><span class="token keyword">func</span> <span class="token function">NewConcurrentRoutine</span><span class="token punctuation">(</span>routineNums <span class="token builtin">int</span><span class="token punctuation">,</span> concurrentEventLog <span class="token operator">*</span>ConcurrentEventLogger<span class="token punctuation">)</span> <span class="token operator">*</span>ConCurrentRoutine <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConCurrentRoutine<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        routineNums<span class="token punctuation">:</span> routineNums<span class="token punctuation">,</span> concurrentEventLogger<span class="token punctuation">:</span> concurrentEventLog<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对于Run接口的定义呢，需要详细考虑，首先在这里我们需要开启线程所以<code>&amp;sync.WaitGroup&#123;&#125;</code>结构必不可少，其次协程运行后，改去执行什么内容呢，其实对于协程的设计者而言并不知道，因为我们只是想更好的封装这个结构体，并不会考虑具体的执行，所以这里我们可以推给用户去做，则定义一个回调函数即可，正对函调函数的参数呢，自由定义，这里采用了一个新的结构体</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// CInstParams 定义传入callBack的参数</span><span class="token keyword">type</span> CInstParams <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Routine               <span class="token builtin">int</span> <span class="token comment" spellcheck="true">//协程编号</span>    ConcurrentEventLogger <span class="token operator">*</span>ConcurrentEventLogger    CustomParams          <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用户自定义参数</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">type</span> callBack <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> params CInstParams<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//定义一个用户自定义执行函数</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Run 并发执行用户自定义函数 workFun</span><span class="token keyword">func</span> <span class="token punctuation">(</span>cInst <span class="token operator">*</span>ConCurrentRoutine<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> customParams <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> workFun callBack<span class="token punctuation">)</span></code></pre><p>通过参数可以看出主要需要的是一个自由变量，主要用于提供给回调函数的使用中，回调函数是更重要的参数，其实现过程如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>cInst <span class="token operator">*</span>ConCurrentRoutine<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> customParams <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> workFun callBack<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    wg <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cInst<span class="token punctuation">.</span>routineNums<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>mCtx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> mRoutine <span class="token builtin">int</span><span class="token punctuation">,</span> mParams <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">workFun</span><span class="token punctuation">(</span>mCtx<span class="token punctuation">,</span> CInstParams<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Routine<span class="token punctuation">:</span> mRoutine<span class="token punctuation">,</span> ConcurrentEventLogger<span class="token punctuation">:</span> cInst<span class="token punctuation">.</span>concurrentEventLogger<span class="token punctuation">,</span> CustomParams<span class="token punctuation">:</span> mParams<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> i<span class="token punctuation">,</span> customParams<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>以上完成了并发线程的所有东西，接下来就需要监听Redis中的队列了，下面这个接口则是这个功能的重头戏，通过它我们可以实现阻塞，直至有消息进来为止</p><pre class=" language-go"><code class="language-go">RedisClient<span class="token punctuation">.</span><span class="token function">BRPop</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ex04ListenList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这段代码中<code>BRPop</code> 是 Redis 中的一条命令，用于阻塞连接，直到一个指定列表中有元素可用，然后从列表中弹出该元素。其对应的参数含义为：</p><ul><li><code>ctx</code> 是上下文对象，表示操作的上下文。通常用于管理超时、截止时间和操作的取消。</li><li><code>0</code> 是超时值，以秒为单位。在这种情况下，<code>0</code> 表示该命令将无限期地阻塞，直到列表中有元素可用。</li><li><code>ex04ListenList</code>是我们要监听的列表的名称</li></ul><p>定义函数主体，主要是初始化日志打印器以及协程结构体</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> example<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span>    <span class="token string">"main.go/example/common"</span><span class="token punctuation">)</span><span class="token keyword">const</span> Ex02ListenList <span class="token operator">=</span> <span class="token string">"my_First_list"</span><span class="token keyword">type</span> Ex02Params <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">Ex02</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    eventLogger <span class="token operator">:=</span> <span class="token operator">&amp;</span>common<span class="token punctuation">.</span>ConcurrentEventLogger<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//new 一个并发执行器</span>    <span class="token comment" spellcheck="true">//routineNums是消费者的数量 多消费的场景，可以使用</span>    cInst <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">NewConcurrentRoutine</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> eventLogger<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//并发执行用户自定义函数work</span>    cInst<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Ex02Params<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> ex02ConsumerPop<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//按日志时间正序打印日志</span>    eventLogger<span class="token punctuation">.</span><span class="token function">PrintLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ex02ConsumerPop 使用rpop逐条消费队列中的信息，数据从队列中移除</span><span class="token comment" spellcheck="true">// 生成端使用：lpush my_First_list AA BB</span><span class="token keyword">func</span> <span class="token function">ex02ConsumerPop</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cInstParam common<span class="token punctuation">.</span>CInstParams<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routine <span class="token operator">:=</span> cInstParam<span class="token punctuation">.</span>Routine    <span class="token keyword">for</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        items<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">BRPop</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Ex02ListenList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span>routine<span class="token punctuation">,</span> <span class="token string">"读取文章[%s]标题,正文,发送到ES更新索引"</span><span class="token punctuation">,</span> items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//将文章推送至ES</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/0815770/image-20230818112240276.png" alt="image-20230818112240276"></p><h4 id="List数据结构QuickList"><a href="#List数据结构QuickList" class="headerlink" title="List数据结构QuickList"></a>List数据结构QuickList</h4><p>QuickList由一个双向链表和listpack实现</p><p><img src="/2023/0815770/image-20230819200858760.png" alt="image-20230819200858760"></p><p><img src="/2023/0815770/image-20230819200904852.png" alt="image-20230819200904852"></p><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>一个用户有多项计数需求，可通过hash结构存储</p><p><img src="/2023/0815770/image-20230819200911054.png" alt="image-20230819200911054"></p><p>这个案例主要是针对Redis中哈希表的练习，给结构体主要通过一个key键值，存储value值，这个value一般都是通过map进行存储，先看一下函数主体的实现：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ex03</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"args can NOT be empty\n"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    arg1 <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">switch</span> arg1 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"init"</span><span class="token punctuation">:</span>        <span class="token function">Ex03InitUserCount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"get"</span><span class="token punctuation">:</span>        userID<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">GetUserCounter</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"incr_like"</span><span class="token punctuation">:</span>        userID<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">IncrByUserLike</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"incr_collect"</span><span class="token punctuation">:</span>        useID<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">IncrByUserCollect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> useID<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"decr_like"</span><span class="token punctuation">:</span>        userID<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">DecrByUserLike</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"decr_collect"</span><span class="token punctuation">:</span>        userID<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">DecrByUserCollect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> userID<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过这段代码可以看出，对redis中的一些调用过程进行了封装，接下来我们逐个实现函数的调用过程，<code>init</code>函数主要是初始化写入的数据，这一部分按照之前的学习可以通过<code>HSET</code>方法对数据进行存储，这样做是可以的，但为了减少对redis的调用，加快写入，引入了<code>RedisClient.Pipeline()</code>方法，这是redis的一个流水线对象，可以用于在一次网络往返中发送多个命令，从而提高效率，配合它的主要方式为：</p><ul><li>pipe.Del() &#x2F;&#x2F;从 Redis 中删除指定的键</li><li>pipe.HMSet()   &#x2F;&#x2F;将多个字段值对一次性设置到一个哈希（Hash）数据结构中</li><li>pipe.Exec()       &#x2F;&#x2F;实际发送这些命令到 Redis 服务器并执行它们</li></ul><p>具体的实现过程如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ex03InitUserCount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这段代码创建了一个用于执行多个 Redis 命令的流水线（Pipeline）对象。</span>    pipe <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    userCounters <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"1556564194374926"</span><span class="token punctuation">,</span> <span class="token string">"got_digg_count"</span><span class="token punctuation">:</span> <span class="token number">10693</span><span class="token punctuation">,</span> <span class="token string">"got_view_count"</span><span class="token punctuation">:</span> <span class="token number">2238438</span><span class="token punctuation">,</span> <span class="token string">"followee_count"</span><span class="token punctuation">:</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token string">"follower_count"</span><span class="token punctuation">:</span> <span class="token number">9895</span><span class="token punctuation">,</span> <span class="token string">"follow_collect_set_count"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subscribe_tag_count"</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"1111"</span><span class="token punctuation">,</span> <span class="token string">"got_digg_count"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"got_view_count"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"2222"</span><span class="token punctuation">,</span> <span class="token string">"got_digg_count"</span><span class="token punctuation">:</span> <span class="token number">1238</span><span class="token punctuation">,</span> <span class="token string">"follower_count"</span><span class="token punctuation">:</span> <span class="token number">379</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> counter <span class="token operator">:=</span> <span class="token keyword">range</span> userCounters <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        uid<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span><span class="token string">"user_id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        key <span class="token operator">:=</span> <span class="token function">GetUserCounterKey</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//从 Redis 中删除指定的键</span>        rw<span class="token punctuation">,</span> err <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"del %s,rw=%d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> rw<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将多个字段值对一次性设置到一个哈希（Hash）数据结构中</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> pipe<span class="token punctuation">.</span><span class="token function">HMSet</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"设置 uid=%d ,key =%s\n"</span><span class="token punctuation">,</span> uid<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//批量执行上面for循环设置好的hmset命令</span>    <span class="token comment" spellcheck="true">//使用 pipe.Exec(ctx) 方法来实际发送这些命令到 Redis 服务器并执行它们</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> pipe<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Get:获取主键uid中对应的数据，这一部分的处理也采用流水线对象的方式实现，通过<code>pipe.HGetAll</code>获取一个哈希数据结构中的所有字段和对应的值，通过执行<code>pipe.Exec</code>获得主键对应的对象，<code>cmder.(*redis.MapStringStringCmd)</code>这个转换数据类型，具体实现如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetUserCounter</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> userID <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    pipe <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">GetUserCounterKey</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//个命令用于获取一个哈希（Hash）数据结构中的所有字段和对应的值</span>    pipe<span class="token punctuation">.</span><span class="token function">HGetAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">GetUserCounterKey</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span><span class="token punctuation">)</span>    cmders<span class="token punctuation">,</span> err <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cmder <span class="token operator">:=</span> <span class="token keyword">range</span> cmders <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将cmder转换为*redis.MapStringStringCmd类型</span>        counterMap<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmder<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>MapStringStringCmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> field<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> counterMap <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s:%s\n"</span><span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对于具体数据的自增自减主要是通过redis自带的<code>HIncrBy</code>以及<code>HDecrBy</code>实现，这一块的代码逻辑较为简单，主要是封装<code>change</code>接口即可</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> userID <span class="token builtin">int64</span><span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">,</span> incr <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    rediskey <span class="token operator">:=</span> <span class="token function">GetUserCounterKey</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span>    before<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">HGet</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> rediskey<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    beforeInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>before<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> beforeInt<span class="token operator">+</span>incr <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"禁止变更计数，计数变更后小于0，%d+(%d)=%d\n"</span><span class="token punctuation">,</span> beforeInt<span class="token punctuation">,</span> incr<span class="token punctuation">,</span> beforeInt<span class="token operator">+</span>incr<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user_id: %d\n更新前\n%s = %s\n--------\n"</span><span class="token punctuation">,</span> userID<span class="token punctuation">,</span> field<span class="token punctuation">,</span> before<span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> RedisClient<span class="token punctuation">.</span><span class="token function">HIncrBy</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> rediskey<span class="token punctuation">,</span> field<span class="token punctuation">,</span> incr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    count<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">HGet</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> rediskey<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user_id: %d\n更新后\n%s = %s\n--------\n"</span><span class="token punctuation">,</span> userID<span class="token punctuation">,</span> field<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Hash数据结构dict"><a href="#Hash数据结构dict" class="headerlink" title="Hash数据结构dict"></a>Hash数据结构dict</h4><ul><li>rehash:rehash操作是将ht[O]中的数据全部迁移到ht[1]中。数据量小的场景下直接将数据从ht[o]拷贝到ht[1]速度是较快的。数据量大的场景，例如存有上百万的KV时，迁移过程将会明显阻塞用户请求</li><li>渐进式rehash:为避免出现这种情况，使用了rehash方案。基本原理就是，每次用户访问时都会迁移少量数据。将整个迁移过程，平摊到所有的访问用不请求过程中</li></ul><p><img src="/image-20230819200938054.png" alt="image-20230819200938054"></p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>积分变化时，排名要实时变更</p><p>结合dict后，可实现通过key操作跳表的功能</p><p>这一部分主要是针对有序集合的一个练习，改结构体中主要需要两个参数一个就是成员名，另一个为分数，形如这样：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Z <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Score  <span class="token builtin">float64</span>    Member <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以将数据存入切片中，通过<code>ZAdd</code>接口实现数据的添加，注意这个接口可以实现数据的批量存入，所以只需要写成<code>initList...</code>的形式即可放入所有数据，下面是封装好的<code>init</code>接口：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ex04InitUserScore</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    initList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>redis<span class="token punctuation">.</span>Z<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Member<span class="token punctuation">:</span> <span class="token string">"user1"</span><span class="token punctuation">,</span> Score<span class="token punctuation">:</span> <span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Member<span class="token punctuation">:</span> <span class="token string">"user2"</span><span class="token punctuation">,</span> Score<span class="token punctuation">:</span> <span class="token number">232</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Member<span class="token punctuation">:</span> <span class="token string">"user3"</span><span class="token punctuation">,</span> Score<span class="token punctuation">:</span> <span class="token number">129</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Member<span class="token punctuation">:</span> <span class="token string">"user4"</span><span class="token punctuation">,</span> Score<span class="token punctuation">:</span> <span class="token number">232</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Ex04RankKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    nums<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">ZAdd</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Ex04RankKey<span class="token punctuation">,</span> initList<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"初始化榜单Item数量：%d\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果想到得到已有的数据排名，redis给出了响应的接口函数，可参考以下这个方式获得想要的数据，如果需要获得所有的数据，则通过指明<code>0，-1</code>即可</p><blockquote><p>zrange ex06_rank_zset 300 0 byscore rev limit 1 2 withscores &#x2F;&#x2F; 取300分到0分之间的排名</p><p>   zrange ex06_rank_zset -inf +inf byscore withscores 正序输出</p><p>   ZRANGE ex06_rank_zset +inf -inf BYSCORE  REV WITHSCORES 逆序输出所有排名</p><p>  zrange ex06_rank_zset +inf -inf byscore rev limit 0 2 withscores 逆序分页输出排名</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetRevOrderAllList</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> offset <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    resList<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">ZRevRangeWithScores</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Ex04RankKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n榜单：\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> z <span class="token operator">:=</span> <span class="token keyword">range</span> resList <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d名 %s\t%f\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">.</span>Member<span class="token punctuation">,</span> z<span class="token punctuation">.</span>Score<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果想查看单个用户的排名或者分数可以通过<code>ZRevRank ZScore</code>实现，这两个接口会返回需要的排名或者对应的分数</p><p>如果想更改单个用户的分数，可以通过<code>ZIncrBy</code>接口更改数据</p><h4 id="zset数据结构zskiplist"><a href="#zset数据结构zskiplist" class="headerlink" title="zset数据结构zskiplist"></a>zset数据结构zskiplist</h4><p><img src="/2023/0815770/image-20230819200946653.png" alt="image-20230819200946653"></p><p><img src="/2023/0815770/image-20230819200950653.png" alt="image-20230819200950653"></p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>要求1秒内放行的请求为N，超过N则禁止访问</p><p><img src="/2023/0815770/image-20230819200954997.png" alt="image-20230819200954997"></p><p>这部分的实现需要用到并发协程的设计思想，但我们已经在之前设计好了，所以只需要设计真正的执行函数即可，这里我们的函数主体为<code>ex05work</code>在这个函数的实现相对简单，首先根据传时间创建唯一的key将改key放入redis中，它会返回当前key对应的值，因为我们可以同时启动很多的协程在同一秒内，对一个key的访问可能会很高，通过其看会的值是否大于10即可首先对应的协程是否被限流，其函数主体如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ex05work</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cParams common<span class="token punctuation">.</span>CInstParams<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routeKey <span class="token operator">:=</span> cParams<span class="token punctuation">.</span>Routine    eventlog <span class="token operator">:=</span> cParams<span class="token punctuation">.</span>ConcurrentEventLogger    limitKey <span class="token operator">:=</span> <span class="token function">ex05LimitKey</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    currentQFX<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> limitKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err <span class="token operator">==</span> redis<span class="token punctuation">.</span>Nil <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        err <span class="token operator">=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">ex05LimitKey</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> currentQFX <span class="token operator">></span> ex05MaxQPS <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        eventlog<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Log<span class="token punctuation">:</span>       common<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span>routeKey<span class="token punctuation">,</span> <span class="token string">"被限流[%d"</span><span class="token punctuation">,</span> currentQFX<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>        err <span class="token operator">=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Decr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> limitKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        eventlog<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Log<span class="token punctuation">:</span>       common<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span>routeKey<span class="token punctuation">,</span> <span class="token string">"流量放行[%d]"</span><span class="token punctuation">,</span> currentQFX<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>accessQueryNum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ex05</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    eventlogger <span class="token operator">:=</span> <span class="token operator">&amp;</span>common<span class="token punctuation">.</span>ConcurrentEventLogger<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    cInst <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">NewConcurrentRoutine</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> eventlogger<span class="token punctuation">)</span>    cInst<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Ex05Params<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> ex05work<span class="token punctuation">)</span>    eventlogger<span class="token punctuation">.</span><span class="token function">PrintLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"放行总数：%d\n"</span><span class="token punctuation">,</span> accessQueryNum<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n------\n下一秒请求\n------\n"</span><span class="token punctuation">)</span>    accessQueryNum <span class="token operator">=</span> <span class="token number">0</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    cInst <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">NewConcurrentRoutine</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> eventlogger<span class="token punctuation">)</span>    cInst<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Ex05Params<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> ex05work<span class="token punctuation">)</span>    eventlogger<span class="token punctuation">.</span><span class="token function">PrintLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"放行总数：%d\n"</span><span class="token punctuation">,</span> accessQueryNum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/0815770/image-20230819161610349.png" alt="image-20230819161610349"></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>并发场景，要求一次只能有一个协程执行，执行完成后，其它等待中的协程才能执行，可以使用redis的setnx实现，利用了两个特性</p><ul><li>Redis是单线程执行命令</li><li>setnx只有未设置过才能执行成功</li></ul><p><img src="/2023/0815770/image-20230819201017352.png" alt="image-20230819201017352"></p><p>这一部分实现方式也是主要针对的是回调函数，回调函数中应该实现针<code>SetNX Get Del</code>等一系列操作，对于这几个接口的解释可参考如下：</p><ul><li>SETNX:用于设置键的值，但仅在该键不存在时执行</li><li>GET:获取对应的键值对应的值</li><li>DEL删除个键值</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ex06work</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cInstParam common<span class="token punctuation">.</span>CInstParams<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routine <span class="token operator">:=</span> cInstParam<span class="token punctuation">.</span>Routine    eventLogger <span class="token operator">:=</span> cInstParam<span class="token punctuation">.</span>ConcurrentEventLogger    <span class="token keyword">defer</span> <span class="token function">ex06ReleaseLock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> routine<span class="token punctuation">,</span> eventLogger<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        acquired<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">SetNX</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> resourceKey<span class="token punctuation">,</span> routine<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            eventLogger<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Log<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"[%s] error routine[%d], %v"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span> routine<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> acquired <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2. 成功获取锁</span>            eventLogger<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Log<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"[%s] routine[%d] 获取锁"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span> routine<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 3. sleep 模拟业务逻辑耗时</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>            eventLogger<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Log<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"[%s] routine[%d] 完成业务逻辑"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span> routine<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">ex06ReleaseLock</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> routine <span class="token builtin">int</span><span class="token punctuation">,</span> eventLogger <span class="token operator">*</span>common<span class="token punctuation">.</span>ConcurrentEventLogger<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routineMark<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> resourceKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>routine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">!=</span> routineMark <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其它协程误删lock</span>        <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"del err lock[%s] can not del by [%d]"</span><span class="token punctuation">,</span> routineMark<span class="token punctuation">,</span> routine<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    set<span class="token punctuation">,</span> err <span class="token operator">:=</span> RedisClient<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> resourceKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> set <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        eventLogger<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Log<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"[%s] routine[%d] 释放锁"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span> routine<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        eventLogger<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>EventLog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            EventTime<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Log<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"[%s] routine[%d] no lock to del"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span> routine<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"[%s] error routine=%d, %v"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span><span class="token punctuation">,</span> routine<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Redis使用注意事项"><a href="#Redis使用注意事项" class="headerlink" title="Redis使用注意事项"></a>Redis使用注意事项</h2><h3 id="大key，热key"><a href="#大key，热key" class="headerlink" title="大key，热key"></a>大key，热key</h3><p><img src="/2023/0815770/image-20230819201025552.png" alt="image-20230819201025552"></p><p>大key的危害：</p><ul><li>读取成本高</li><li>容易导致慢查询(过期，删除)</li><li>主从复制异常，服务阻塞 无法正常响应请求</li></ul><p><img src="/2023/0815770/image-20230819201032921.png" alt="image-20230819201032921"></p><h4 id="消除大key的方法"><a href="#消除大key的方法" class="headerlink" title="消除大key的方法"></a>消除大key的方法</h4><ol><li>拆分</li></ol><p>​  将大key拆分为小key，例如一个string拆分成多个string</p><p><img src="/2023/0815770/image-20230819201040523.png" alt="image-20230819201040523"></p><pre><code> 2. 压缩</code></pre><p>​  将value压缩后写入redis,读取时解压后在使用，压缩算法可以是gzip,snappy,lz4更，通常情况下，一个压缩算法压缩率高，则解压耗时就长，需要对实际数据进行测试后，选择一个合适的算法，如果存储的是JSON字符串，可以考虑使用MessagePack进行序列化</p><pre><code> 3. 集合类结构hash,list,set,   - 拆分：可以用hash取余、位掩码的方式决定放在哪个key中   - 区分冷热：如榜单列表场景使用zset,只缓存前10页数据，后续数据走db</code></pre><p>热key的定义</p><p>​用户访问一个Key的QPS特别高，导致Server实例出现cPU负载突增或者不均的情况。热key没有明确的标准，QPS超过500就有可能被识别为热Key。</p><p><img src="/2023/0815770/image-20230819201051178.png" alt="image-20230819201051178"></p><h4 id="热key的解决方式"><a href="#热key的解决方式" class="headerlink" title="热key的解决方式"></a>热key的解决方式</h4><ol><li>设置Localcache</li></ol><p>​在访问Redis前，在业务服务侧设置Localcache,降低访问Redis的QPS。LocalCache中缓存过期或未命中，则从Redis中将数据更新到LocalCache。Java的Guava、Golang的Bigcache就是这类LocalCache。</p><p><img src="/2023/0815770/image-20230819201059904.png" alt="image-20230819201059904"></p><ol start="2"><li><p>拆分</p><p>将key:valuei这一个热Key复制写入多份，例如key1:value,key2:value,访问的时候访问多个key,但value,是同一以此将qs分散到不同实例上，降低负载。代价是，更新时需要更新多个key,存在数据短暂不一致的风险。</p></li></ol><p><img src="/2023/0815770/image-20230819201108160.png" alt="image-20230819201108160"></p><ol start="3"><li><p>使用Redis代理的热key承载能力</p><p>字节跳动的Redisi访问代理就具备热Key承载能力。本质上是结合了“热Key发现”、“LocalCache”两个功能</p><p><img src="/2023/0815770/image-20230819201113876.png" alt="image-20230819201113876"></p></li></ol><h3 id="慢查询场景"><a href="#慢查询场景" class="headerlink" title="慢查询场景"></a>慢查询场景</h3><p>容易导致redis慢查询的操作</p><ol><li>批量操作一次性传入过多的key&#x2F;value,如mset&#x2F;hmset&#x2F;&#x2F;sadd&#x2F;zadd等o(n)操作，建议单批次不要超过100，超过100之后性能下降明显。</li><li>zset大部分命令都是0(logn),当大小超过5k以上时，简单的zadd&#x2F;zrem也可能导致慢查询</li><li>操作的单个valuej过大，超过10KB。也即，避免使用大Key</li><li>对大key的delete&#x2F;expire操作也可能导致慢查询，Redis44.O之前不支持异步删除unlink,大key删除会阻塞Redis</li></ol><h3 id="缓存穿透、缓存雪崩"><a href="#缓存穿透、缓存雪崩" class="headerlink" title="缓存穿透、缓存雪崩"></a>缓存穿透、缓存雪崩</h3><ul><li>缓存穿透：热点数据查询绕过缓存，直接查询数据库</li><li>缓存雪崩：大量缓存同时过期</li></ul><h4 id="缓存穿透的危害"><a href="#缓存穿透的危害" class="headerlink" title="缓存穿透的危害"></a>缓存穿透的危害</h4><ol><li><p>查询一个一定不存在的数据通常不会缓存不存在的数据，这类查询请求都会直接打到b，,如果有系统bug或人为攻击，那么容易导致b响应慢甚至宕机</p></li><li><p>缓存过期时在高并发场景下，一个热key如果过期，会有大量请求同时击穿至db,容易影响db性能和稳定。</p><p>同一时间有大量key集中过期时，也会导致大量请求落到db上，导致查询变慢，甚至出现b无法响应新的查询</p></li></ol><h3 id="如何减少缓存穿透"><a href="#如何减少缓存穿透" class="headerlink" title="如何减少缓存穿透"></a>如何减少缓存穿透</h3><ol><li><p>缓存空值如一个不存在的userID。这个id在缓存和数据库中都不存在。则可以缓存一个空值，下次再查缓存直接反空值，</p></li><li><p>布隆过滤器</p><p>通过bloom filter?算法来存储合法Key,得益于该算法超高的压缩率，只需占用极小的空间就能存储大量key值</p></li></ol><h3 id="如何避免缓冲雪崩"><a href="#如何避免缓冲雪崩" class="headerlink" title="如何避免缓冲雪崩"></a>如何避免缓冲雪崩</h3><ol><li><p>缓存空值</p><p>将缓存失效时间分散开，比如在原有的失效时间基础上增加一个随机值，例如不同Key过期时间可以设置为10分1秒过期，10分23秒过期，10分8秒过期。单位秒部分就是随机时间，这样过期时间就分散了对于热点数据，过期时间尽量设置得长一些，冷门的数据可以相对设置过期时间短一些。</p></li><li><p>使用缓存集群，避免单机宕机造成的缓存雪崩。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDP穿透的原理</title>
      <link href="/2023/081337957.html"/>
      <url>/2023/081337957.html</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信原理"><a href="#网络通信原理" class="headerlink" title="网络通信原理"></a>网络通信原理</h2><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>​之前的远程控制端实现的代码都是基于TCP协议进行连接的，但TCP的缺点是在网络层面上两台直连的PC机才能实现接通，在远程控制视频监控层面会存在较大问题。</p><p><img src="/2023/081337957/image-20230813154508922.png" alt="image-20230813154508922"></p><p>​由于无法实现外网设备突破临时IP，防火墙，安全性等问题，需要引入UDP穿透的方式，试想如果分别处于俩个局域网的两台PC机要实现通信，我们需要将服务器程序安装在被控端机器上，此时开启服务器，服务器开始监听需要连接的设备，而另一台PC机开启客户端之后，输入服务端PC机的IP地址（注意：该IP地址为局域网内部的IP地址，即为临时性IP地址），那么在网络寻找该IP地址时就会遇到问题，无法发现真正的服务端在哪里。</p><p>TCP连接需要通过三次握手；稳定可靠(IP,PORT)要公开，否则只能作为客户端</p><p>UDP不需要握手，不可靠；</p><p>UDP在视频、音频通讯上引用非常广泛</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>需要有一个公网的服务器(IP,PORT),通过UDP协议可以实现该连接方式，但发起方式只能是由内网发起，然后连接公网的服务器</p><p><img src="/2023/081337957/image-20230813165424040.png" alt="image-20230813165424040"></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于IOCP的服务器开发</title>
      <link href="/2023/08123684.html"/>
      <url>/2023/08123684.html</url>
      
        <content type="html"><![CDATA[<p>f</p><h2 id="枚举类型定义以及相关类的提前声明"><a href="#枚举类型定义以及相关类的提前声明" class="headerlink" title="枚举类型定义以及相关类的提前声明"></a>枚举类型定义以及相关类的提前声明</h2><pre class=" language-C++"><code class="language-C++">//枚举类型：用于说明所做的操作enum CWTOperator&#123;    ENone,    EAccept,    ERecv,    ESend,    EError&#125;;//提前声明：服务端类 客户端类 复用类class CWTServer;class CWTClient; class CWTOverLapped;//重命名template<CWTOperator>class AcceptOverLapped;template<CWTOperator>class RecvOverLapped;template<CWTOperator>class SendOverLapped;template<CWTOperator>class ErrorOverLapped;using PCLIENT= std::shared_ptr<CWTClient>;using ACCEPTOVERLAPPED= AcceptOverLapped<EAccept>;using RECVOVERLAPPED= RecvOverLapped<ERecv>;using SENDOVERLAPPED= SendOverLapped<ESend>;using ERROROVERLAPPED= ErrorOverLapped<EError>;</code></pre><h2 id="复用类型定义"><a href="#复用类型定义" class="headerlink" title="复用类型定义"></a>复用类型定义</h2><pre class=" language-c++"><code class="language-c++">//定义复用类class CWTOverLapped &#123;public:    OVERLAPPED          m_overlapped;    DWORD               m_operaotr;     //参见CWTOperator    std::vector<char>   m_buffer;       //缓冲区    ThreadWorker        m_worker;       //处理函数    CWTServer*m_server;//服务器    CWTClient*m_client;//对应的客户端    WSABUF    m_wsabuffer;    virtual ~CWTOverLapped() &#123;        m_buffer.clear();    &#125;&#125;;</code></pre><h2 id="创建服务端类"><a href="#创建服务端类" class="headerlink" title="创建服务端类"></a>创建服务端类</h2><pre class=" language-c++"><code class="language-c++">//定义服务端class CWTServer :public ThreadFuncBase&#123;public:    CWTServer(const std::string& ip = "0.0.0.0", short port = 9527);    bool StartServer();    bool NewAccept();    void BindNewSocket(SOCKET s);    ~CWTServer();private:    void CreateSocket();    int threadIocp();    CWTThreadPool m_pool;    HANDLE m_hIOCP;    SOCKET m_sock;    sockaddr_in m_addr;    std::map<SOCKET, std::shared_ptr<CWTClient>>m_client;&#125;;</code></pre><pre class=" language-C++"><code class="language-C++">CWTServer::CWTServer(const std::string& ip /* = "0.0.0.0" */, short port /* = 9527 */) : m_pool(10) &#123;    m_hIOCP = INVALID_HANDLE_VALUE;    m_sock = INVALID_SOCKET;    m_addr.sin_family = AF_INET;    m_addr.sin_addr.s_addr = inet_addr(ip.c_str());    m_addr.sin_port = htons(port);&#125;bool CWTServer::StartServer() &#123;    CreateSocket();    if (bind(m_sock, (sockaddr*)&m_addr, sizeof(m_addr)) == -1) &#123;        closesocket(m_sock);        m_sock = INVALID_SOCKET;        return false;    &#125;    if (listen(m_sock, 3) == -1) &#123;        closesocket(m_sock);        m_sock = INVALID_SOCKET;        return false;    &#125;    m_hIOCP = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 4);    if (m_hIOCP == NULL) &#123;        closesocket(m_sock);        m_sock = INVALID_SOCKET;        m_hIOCP = INVALID_HANDLE_VALUE;        return false;    &#125;    CreateIoCompletionPort((HANDLE)m_sock, m_hIOCP, (ULONG_PTR)this, 0);    m_pool.Invoke();    m_pool.DispatchWorker(ThreadWorker(this, (FUNCTYPE)&CWTServer::threadIocp));    if (!NewAccept())return false;    return true;&#125;void CWTServer::CreateSocket() &#123;    WSADATA WSAData;    WSAStartup(MAKEWORD(2, 2), &WSAData);    m_sock = WSASocket(PF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED);    int opt = 1;    setsockopt(m_sock, SOL_SOCKET, SO_REUSEADDR, (const char*)&opt, sizeof(opt));&#125;bool CWTServer::NewAccept() &#123;    PCLIENT pClient = std::make_shared<CWTClient>();    pClient->SetOverlapped(pClient);    m_client.insert(std::pair<SOCKET, PCLIENT>(*pClient, pClient));    if (!AcceptEx(m_sock, *pClient, *pClient, 0,        sizeof(sockaddr_in) + 16, sizeof(sockaddr_in) + 16,        *pClient, *pClient)) &#123;        //TRACE("%d\r\n", WSAGetLastError());        if (WSAGetLastError() != WSA_IO_PENDING) &#123;            closesocket(m_sock);            m_sock = INVALID_SOCKET;            m_hIOCP = INVALID_HANDLE_VALUE;            return false;        &#125;    &#125;    return true;&#125;void CWTServer::BindNewSocket(SOCKET s)&#123;    CreateIoCompletionPort((HANDLE)s, m_hIOCP, (ULONG_PTR)this, 0);&#125;CWTServer::~CWTServer()&#123;    closesocket(m_sock);    std::map<SOCKET, PCLIENT>::iterator it = m_client.begin();    for (; it != m_client.end(); it++) &#123;        it->second.reset();    &#125;    m_client.clear();    CloseHandle(m_hIOCP);    m_pool.Stop();    WSACleanup();&#125;int CWTServer::threadIocp() &#123;    DWORD transferred = 0;    ULONG_PTR completionkey = 0;    OVERLAPPED* lpOverLapped = NULL;    if (GetQueuedCompletionStatus(m_hIOCP, &transferred, &completionkey, &lpOverLapped, INFINITE)) &#123;        if (completionkey != 0) &#123;            CWTOverLapped* pOverLapped = CONTAINING_RECORD(lpOverLapped, CWTOverLapped, m_overlapped);            TRACE("pOverLapped->m_operaotr %d\r\n", pOverLapped->m_operaotr);            pOverLapped->m_server = this;            switch (pOverLapped->m_operaotr) &#123;            case EAccept: &#123;                ACCEPTOVERLAPPED* pOverac = (ACCEPTOVERLAPPED*)pOverLapped;                m_pool.DispatchWorker(pOverac->m_worker);                break;            &#125;            case ERecv: &#123;                RECVOVERLAPPED* pOverre = (RECVOVERLAPPED*)pOverLapped;                m_pool.DispatchWorker(pOverre->m_worker);                break;            &#125;            case ESend: &#123;                SENDOVERLAPPED* pOverse = (SENDOVERLAPPED*)pOverLapped;                m_pool.DispatchWorker(pOverse->m_worker);                break;            &#125;            case EError: &#123;                ERROROVERLAPPED* pOveror = (ERROROVERLAPPED*)pOverLapped;                m_pool.DispatchWorker(pOveror->m_worker);                break;            &#125;            &#125;        &#125;        else return -1;    &#125;    return 0;&#125;</code></pre><h2 id="创建客户端类"><a href="#创建客户端类" class="headerlink" title="创建客户端类"></a>创建客户端类</h2><pre class=" language-c++"><code class="language-c++">//定义客户端class CWTClient:public ThreadFuncBase &#123;public:    CWTClient();    void SetOverlapped(PCLIENT& ptr);    ~CWTClient();    operator PVOID();    operator SOCKET();    operator LPOVERLAPPED();    operator LPDWORD();    LPWSABUF RecvWSABuffer();    LPWSAOVERLAPPED RecvOverlapped();    LPWSABUF SendWSABuffer();    LPWSAOVERLAPPED SendOverlapped();    DWORD& Flags() &#123; return m_flags; &#125;    sockaddr_in* GetLocalAddr() &#123; return &m_laddr; &#125;    sockaddr_in* GetRemoteAddr() &#123; return &m_raddr; &#125;    size_t GetBufferSize()const &#123; return m_buffer.size(); &#125;    int Recv();    int Send(void* buffer, size_t nSize);    int SendData(std::vector<char>& data);private:    SOCKETm_sock;    DWORDm_received;    DWORDm_flags;    std::shared_ptr<ACCEPTOVERLAPPED>m_overlapped;    std::shared_ptr<RECVOVERLAPPED>m_recv;    std::shared_ptr<SENDOVERLAPPED>m_send;    std::vector<char>m_buffer;    size_tm_used;   //已经使用的缓冲区大小    sockaddr_inm_laddr;    sockaddr_inm_raddr;    boolm_isbusy;    CWTSendQueue<std::vector<char>>m_vecSend;//发送数据队列    &#125;;</code></pre><pre class=" language-C++"><code class="language-C++">CWTClient::CWTClient()     :m_flags(0),     m_recv(new RECVOVERLAPPED()),    m_send(new SENDOVERLAPPED()),    m_overlapped(new ACCEPTOVERLAPPED()),     m_isbusy(false),    m_vecSend(this,(SENDCALLBACK)& CWTClient::SendData) &#123;    m_sock = WSASocket(PF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED);    m_buffer.resize(1024);    memset(&m_laddr, 0, sizeof(m_laddr));    memset(&m_raddr, 0, sizeof(m_raddr));&#125;void CWTClient::SetOverlapped(PCLIENT& ptr) &#123;    m_overlapped->m_client = ptr.get();    m_recv->m_client = ptr.get();    m_send->m_client = ptr.get();&#125;CWTClient::~CWTClient() &#123;    closesocket(m_sock);    m_recv.reset();    m_send.reset();    m_overlapped.reset();    m_buffer.clear();    m_vecSend.Clear();&#125;CWTClient::operator PVOID() &#123;    return &m_buffer[0];&#125;CWTClient::operator SOCKET() &#123;    return m_sock;&#125;CWTClient::operator LPOVERLAPPED() &#123;    return &m_overlapped->m_overlapped;&#125;CWTClient::operator LPDWORD() &#123;    return &m_received;&#125;LPWSABUF CWTClient::RecvWSABuffer() &#123;    return &m_recv.get()->m_wsabuffer;&#125;LPWSAOVERLAPPED CWTClient::RecvOverlapped()&#123;    return &m_recv->m_overlapped;&#125;LPWSABUF CWTClient::SendWSABuffer() &#123;    return &m_send.get()->m_wsabuffer;&#125;LPWSAOVERLAPPED CWTClient::SendOverlapped()&#123;    return &m_send->m_overlapped;&#125;int CWTClient::Recv() &#123;    int ret = recv(m_sock, m_buffer.data(), m_buffer.size(), 0);    if (ret <= 0)return -1;    m_used += (size_t)ret;    //TODO:解析数据    CWTool::Dump((BYTE*)m_buffer.data(), ret);    return 0;&#125;int CWTClient::Send(void* buffer, size_t nSize)&#123;    std::vector<char>data(nSize);    memcpy(data.data(), buffer, nSize);    if (m_vecSend.PushBack(data))return 0;    return -1;&#125;int CWTClient::SendData(std::vector<char>& data)&#123;    if (m_vecSend.Size() > 0) &#123;        int ret = WSASend(m_sock, SendWSABuffer(), 1, &m_received, m_flags, &m_send->m_overlapped, NULL);        if (ret != 0 && (WSAGetLastError() != WSA_IO_PENDING)) &#123;            CWTool::ShowError();            return ret;        &#125;    &#125;    return 0;&#125;</code></pre><h2 id="继承业务类型"><a href="#继承业务类型" class="headerlink" title="继承业务类型"></a>继承业务类型</h2><pre class=" language-C++"><code class="language-C++">//定义模板类用于说明复用类型(感觉没有起到真正的模板作用)//连接template<CWTOperator op>class AcceptOverLapped :public CWTOverLapped, public ThreadFuncBase &#123;public:    AcceptOverLapped();    int AcceptWorker();&#125;;//接受template<CWTOperator>class RecvOverLapped :public CWTOverLapped, public ThreadFuncBase &#123;public:    RecvOverLapped();    int RecvWorker();    &#125;;//发送template<CWTOperator>class SendOverLapped :public CWTOverLapped, public ThreadFuncBase &#123;public:    SendOverLapped();    int SendWorker() &#123;        //TODO:发送数据        /*        * 1 Send 可能不会立即完成        *         */        return 1;    &#125;&#125;;//错误处理template<CWTOperator>class ErrorOverLapped :public CWTOverLapped, public ThreadFuncBase &#123;public:    ErrorOverLapped();    int ErrorWorker() &#123;        //TODO:        return 1;    &#125;&#125;;template<CWTOperator op>inline AcceptOverLapped<op>::AcceptOverLapped() &#123;    m_worker = ThreadWorker(this, (FUNCTYPE)&AcceptOverLapped<op>::AcceptWorker);    m_operaotr = EAccept;    memset(&m_overlapped, 0, sizeof(m_overlapped));    m_buffer.resize(1024);    m_server = NULL;&#125;template<CWTOperator op>inline int AcceptOverLapped<op>::AcceptWorker()&#123;    INT lLength = 0, rLength = 0;    if (m_client->GetBufferSize() > 0) &#123;        sockaddr* plocal=NULL, * preomte = NULL;        GetAcceptExSockaddrs(*m_client, 0,             sizeof(sockaddr_in) + 16, sizeof(sockaddr_in) + 16,             (sockaddr**)&plocal, &lLength,             (sockaddr**)&preomte, &rLength);        memcpy(m_client->GetLocalAddr(), plocal, sizeof(sockaddr_in));        memcpy(m_client->GetRemoteAddr(), preomte, sizeof(sockaddr_in));        m_server->BindNewSocket(*m_client);        int ret = WSARecv((SOCKET)*m_client,m_client->RecvWSABuffer(), 1, *m_client, &m_client->Flags(), m_client->RecvOverlapped(), NULL);        if (ret == SOCKET_ERROR && (WSAGetLastError() != WSA_IO_PENDING)) &#123;            //TODO:报错            TRACE("ret = %d error = %d\r\n", ret, WSAGetLastError());        &#125;        if (!m_server->NewAccept()) &#123;            return -2;        &#125;    &#125;    return 0;&#125;template<CWTOperator op>inline RecvOverLapped<op>::RecvOverLapped() &#123;    m_operaotr = ERecv;    m_worker = ThreadWorker(this, (FUNCTYPE)&RecvOverLapped<op>::RecvWorker);    memset(&m_overlapped, 0, sizeof(m_overlapped));    m_buffer.resize(1024 * 256);&#125;template<CWTOperator op>inline int RecvOverLapped<op>::RecvWorker()&#123;    int ret = m_client->Recv();    return ret;&#125;template<CWTOperator op>inline SendOverLapped<op>::SendOverLapped() &#123;    m_operaotr = ESend;    m_worker = ThreadWorker(this, (FUNCTYPE)&SendOverLapped<op>::SendWorker);    memset(&m_overlapped, 0, sizeof(m_overlapped));    m_buffer.resize(1024 * 256);&#125;template<CWTOperator op>inline ErrorOverLapped<op>::ErrorOverLapped() &#123;    m_operaotr = EError;    m_worker = ThreadWorker(this, (FUNCTYPE)&ErrorOverLapped<op>::ErrorWorker);    memset(&m_overlapped, 0, sizeof(m_overlapped));    m_buffer.resize(1024);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> IOCP </tag>
            
            <tag> SOCKET编程 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 队列 </tag>
            
            <tag> Overlapped重叠结构的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架学习</title>
      <link href="/2023/081132645.html"/>
      <url>/2023/081132645.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Gin"><a href="#安装Gin" class="headerlink" title="安装Gin"></a>安装Gin</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin</code></pre><h2 id="简单搭建Gin框架"><a href="#简单搭建Gin框架" class="headerlink" title="简单搭建Gin框架"></a>简单搭建Gin框架</h2><h3 id="你好GIN"><a href="#你好GIN" class="headerlink" title="你好GIN"></a>你好GIN</h3><p>可以采用两种方式启动监听</p><ul><li><p>然后通过Http方法绑定路由规则和路由函数。不同于<code>net/http</code>库的路由函数，gin进行了封装，把<code>request</code>和<code>response</code>都封装到了<code>gin.Context</code>的上下文环境中。</p></li><li><p>通过Gin.Run启动</p></li><li><p>通过http.ListenAndServe</p></li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"net/http"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"hell Gin"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个路由</span>    rou <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 绑定路由规则和路由函数，访问/index的路由，将由对应的函数去处理</span>    rou<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 启动监听，gin会把web服务器运行在本机的8080端口上</span>    <span class="token comment" spellcheck="true">// 启动方式一 :</span>    rou<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 启动方式二 : 原生http服务的方式</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8888"</span><span class="token punctuation">,</span> rou<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在浏览器上输入<code>localhost:8080/index</code>则会弹出以下界面</p><p><img src="/2023/081132645/image-20230811164517082.png" alt="image-20230811164517082"></p><h2 id="gin-Context"><a href="#gin-Context" class="headerlink" title="gin.Context"></a>gin.Context</h2><p>​在 Gin 中，Context 是一个非常重要的概念，用于处理 HTTP 请求和响应。在 Gin 的处理流程中，Context 贯穿整个处理过程，用于传递请求和响应的信息。</p><p>​Context 中封装了原生的 Go HTTP 请求和响应对象，同时还提供了一些方法，用于获取请求和响应的信息、设置响应头、设置响应状态码等操作。</p><p>​在 Gin 中，Context 是通过中间件来传递的。在处理 HTTP 请求时，Gin 会依次执行注册的中间件，每个中间件可以对 Context 进行一些操作，然后将 Context 传递给下一个中间件。</p><h2 id="响应机制"><a href="#响应机制" class="headerlink" title="响应机制"></a>响应机制</h2><h3 id="响应字符串"><a href="#响应字符串" class="headerlink" title="响应字符串"></a>响应字符串</h3><pre class=" language-go"><code class="language-go">rou<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/txt"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"返回txt"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><img src="/2023/081132645/image-20230811165922279.png" alt="image-20230811165922279"></p><h3 id="响应JSON"><a href="#响应JSON" class="headerlink" title="响应JSON"></a>响应JSON</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">_json</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/081132645/image-20230811170250547.png" alt="image-20230811170250547"></p><h3 id="响应结构体，map和直接响应json"><a href="#响应结构体，map和直接响应json" class="headerlink" title="响应结构体，map和直接响应json"></a>响应结构体，map和直接响应json</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">_json</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Username <span class="token builtin">string</span>        Age      <span class="token builtin">uint</span>        Address  <span class="token builtin">string</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    user <span class="token operator">:=</span> User<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"王涛"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"山西省大同市"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/081132645/image-20230811170607696.png" alt="image-20230811170607696"></p><h3 id="响应xml"><a href="#响应xml" class="headerlink" title="响应xml"></a>响应xml</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">_xml</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">XML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token string">"xsq"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"happy"</span><span class="token punctuation">,</span> <span class="token string">"like"</span><span class="token punctuation">:</span> <span class="token string">"play shopping"</span><span class="token punctuation">,</span> <span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"wangtao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/081132645/image-20230811171002011.png" alt="image-20230811171002011"></p><h3 id="响应yaml"><a href="#响应yaml" class="headerlink" title="响应yaml"></a>响应yaml</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">_yaml</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">YAML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token string">"ys"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"大黄"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="文件响应"><a href="#文件响应" class="headerlink" title="文件响应"></a>文件响应</h3><pre class=" language-go"><code class="language-go">unc <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个路由</span>    rou <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 在go中，没有相对文件的路径，只有相对于项目的路径</span>    <span class="token comment" spellcheck="true">// 网页请求这个静态目录的前缀，第二个参数是一个目录，注意:前缀不能重复</span>    rou<span class="token punctuation">.</span><span class="token function">StaticFS</span><span class="token punctuation">(</span><span class="token string">"/static"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"static/static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置单个文件   网络请求的路由，文件的路径</span>    rou<span class="token punctuation">.</span><span class="token function">StaticFile</span><span class="token punctuation">(</span><span class="token string">"bizhi.png"</span><span class="token punctuation">,</span> <span class="token string">"static/bizhi.png"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/081132645/image-20230811204828270.png" alt="image-20230811204828270"></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>重定向(Redirect)就是通过各种方法将各种网络请求重新定个方向转到其它位置</p><pre><code>router.GET(&quot;/redirect&quot;, func(c *gin.Context) &#123;    //支持内部和外部的重定向    c.Redirect(http.StatusMovedPermanently, &quot;http://www.baidu.com/&quot;)&#125;)</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">_redirect</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/081132645/image-20230811172816884.png" alt="image-20230811172816884"></p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li>301 Moved Permanently</li></ul><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><ul><li>302 Found</li></ul><p>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><h2 id="Gin框架设计"><a href="#Gin框架设计" class="headerlink" title="Gin框架设计"></a>Gin框架设计</h2><h3 id="路由文件adminRoutes-go"><a href="#路由文件adminRoutes-go" class="headerlink" title="路由文件adminRoutes.go"></a>路由文件adminRoutes.go</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> routing<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>route <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Engine是gin里面的一个结构体,里面有很多字段,它还嵌套了RouterGroup结构体</span>    adminTRouter <span class="token operator">:=</span> route<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        adminTRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"user-ok"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        adminTRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/news"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"news-ok"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="路由文件apiRoutes-go"><a href="#路由文件apiRoutes-go" class="headerlink" title="路由文件apiRoutes.go"></a>路由文件apiRoutes.go</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> routing<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">ApiRoutesInit</span><span class="token punctuation">(</span>routes <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    apiroute <span class="token operator">:=</span> routes<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        apiroute<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        apiroute<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/news"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"新闻"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="路由文件default-Routes-go"><a href="#路由文件default-Routes-go" class="headerlink" title="路由文件default Routes.go"></a>路由文件default Routes.go</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> routing<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">DefaultRoutesInit</span><span class="token punctuation">(</span>router <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    defaultRoute <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        defaultRoute<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"首先"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="主文件main-go"><a href="#主文件main-go" class="headerlink" title="主文件main.go"></a>主文件main.go</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"main.go/routing"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// form:"username"：这个标签表示在处理HTTP表单数据时，该字段应该对应于表单中的 "username" 参数。这意味着在从HTTP请求中解析表单数据时，将会使用 "username" 参数的值填充到这个字段。</span><span class="token comment" spellcheck="true">// json:"user"：这个标签表示在JSON编码和解码中，该字段应该对应于JSON对象中的 "user" 键。这意味着在将该结构体实例转换为JSON时，字段会以 "user" 键表示，而在从JSON解码时，会使用 "user" 键的值填充到这个字段。</span><span class="token keyword">type</span> UserInfo <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Username <span class="token builtin">string</span> <span class="token string">`form:"username" json:"user"`</span>    Password <span class="token builtin">string</span> <span class="token string">`form:"password" json:"password"`</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    routing<span class="token punctuation">.</span><span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    routing<span class="token punctuation">.</span><span class="token function">ApiRoutesInit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    routing<span class="token punctuation">.</span><span class="token function">DefaultRoutesInit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Gin中自定义控制器"><a href="#Gin中自定义控制器" class="headerlink" title="Gin中自定义控制器"></a>Gin中自定义控制器</h2><p>可以把控制器方法从路由器中单独抽离出来，并与结构体进行绑定，这样就能绑定父类的方法，从而实现，controller-service:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 控制器方法</span><span class="token keyword">type</span> UserController <span class="token keyword">struct</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>con UserController<span class="token punctuation">)</span> <span class="token function">Index</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"用户列表"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>con UserController<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"用户列表-add"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>route <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    adminRouter <span class="token operator">:=</span> route<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/index"</span><span class="token punctuation">,</span> UserController<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>Index<span class="token punctuation">)</span>        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> UserController<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>Add<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Gin中间件"><a href="#Gin中间件" class="headerlink" title="Gin中间件"></a>Gin中间件</h2><p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。通俗的讲：中间件就是匹配路由前和匹配路由完成后执行的一系列操作；</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">initMiddleware</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"我是第一个中间件"</span><span class="token punctuation">)</span>    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取此时纳秒的时间戳</span>    c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">//作用:先执行后面的程序，最后再执行c.Next()后面的程序</span>    end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2-我是一个中间件"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求出之间的时间就是程序执行的时间</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程和线程池</title>
      <link href="/2023/081029011.html"/>
      <url>/2023/081029011.html</url>
      
        <content type="html"><![CDATA[<h2 id="线程类"><a href="#线程类" class="headerlink" title="线程类"></a>线程类</h2><pre class=" language-C++"><code class="language-C++">class CWTThread&#123;public:    CWTThread() :m_hThread(NULL), m_bStatus(false) &#123;&#125;    ~CWTThread() &#123;Stop();&#125;    //True 表示成功 False 表示失败    bool Start();    bool IsValid();    bool Stop();    void UpdateWorker(const ::ThreadWorker& worker = ::ThreadWorker());    //true 表示空闲 false 表示分配了工作    bool IsIdle();private:           void ThreadWorker();    static void ThreadEntry(void* arg);private:    HANDLE m_hThread;    bool m_bStatus;//false 表示线程将要关闭 true 表示线程正在运行    std::atomic<::ThreadWorker*>m_worker;&#125;;</code></pre><pre class=" language-C++"><code class="language-C++">bool CWTThread::Start() &#123;    m_bStatus = true;    m_hThread = (HANDLE)_beginthread(&CWTThread::ThreadEntry, 0, this);    if (!IsValid())m_bStatus = false;    return m_bStatus;&#125;//启动线程bool CWTThread::IsValid() &#123;//返回true表示有效 返回false表示无效    if (m_hThread == NULL || (m_hThread == INVALID_HANDLE_VALUE))return false;    return WaitForSingleObject(m_hThread, 0) == WAIT_TIMEOUT;&#125;//判断线程的有效性bool CWTThread::Stop() &#123;    if (m_bStatus == false)return true;    m_bStatus = false;    DWORD ret = WaitForSingleObject(m_hThread, INFINITE) == WAIT_OBJECT_0;    if (ret == WAIT_TIMEOUT) &#123;        TerminateThread(m_hThread, -1);    &#125;    UpdateWorker();    return ret;&#125;//线程停止执行void CWTThread::UpdateWorker(const::ThreadWorker& worker) &#123;    if (m_worker.load() != NULL && m_worker.load() != &worker) &#123;        ::ThreadWorker* pWorker = m_worker.load();        m_worker.store(NULL);        delete pWorker;    &#125;    if (m_worker.load() == &worker)return;    if (!worker.IsValid()) &#123;        m_worker.store(NULL);        return;    &#125;        m_worker.store(new ::ThreadWorker());&#125;//更新线程中执行的函数void CWTThread::ThreadWorker() &#123;    while (m_bStatus) &#123;        if (m_worker.load() == NULL) &#123;            Sleep(1);            continue;        &#125;        ::ThreadWorker worker = *m_worker.load();        if (worker.IsValid()) &#123;            if (WaitForSingleObject(m_hThread, 0) == WAIT_TIMEOUT) &#123;                int ret = worker();                if (ret != 0) &#123;                    CString str;                    str.Format(_T("thread found warning code %d\r\n"), ret);                    OutputDebugString(str);                &#125;                else if (ret < 0) &#123;                    m_worker.store(NULL);                &#125;            &#125;        &#125;        else &#123;            Sleep(1);        &#125;    &#125;&#125;//函数执行主体void CWTThread::ThreadEntry(void* arg) &#123;    CWTThread* thiz = (CWTThread*)arg;    if (thiz)thiz->ThreadWorker();    _endthread();&#125;</code></pre><h2 id="线程函数执行主体"><a href="#线程函数执行主体" class="headerlink" title="线程函数执行主体"></a>线程函数执行主体</h2><p>为了和灵活更改线程函数的执行主体，我们需要新定义一个类，用于让用户执行线程函数的执行主体</p><p><code>ThreadWorker</code>中维护了两个变量，一个是<code>ThreadFuncBase</code>的指针以及一个成员函数指针，这个类会初始化基类指针以及成员函数指针，通过仿函数实现线程函数主体的调用。</p><pre class=" language-C++"><code class="language-C++">//线程函数基类class ThreadFuncBase &#123;&#125;;typedef int(ThreadFuncBase::* FUNCTYPE)();//threadworker中维护了两个变量class ThreadWorker &#123;public:    ThreadWorker() :thiz(NULL), func(NULL) &#123;&#125;    ThreadWorker(void* obj, FUNCTYPE f) :thiz((ThreadFuncBase*)obj), func(f) &#123;&#125;    ThreadWorker(const ThreadWorker& worker) &#123;        thiz = worker.thiz;        func = worker.func;    &#125;    ThreadWorker& operator=(const ThreadWorker& worker) &#123;        if (this != &worker) &#123;            thiz = worker.thiz;            func = worker.func;        &#125;        return *this;    &#125;    int operator()() &#123;        if (IsValid()) &#123;            return (thiz->*func)();        &#125;        return -1;    &#125;    bool IsValid() const &#123; return thiz != NULL && func != NULL; &#125;    ThreadFuncBase* thiz;    FUNCTYPE func;&#125;;</code></pre><h2 id="线程池实现"><a href="#线程池实现" class="headerlink" title="线程池实现"></a>线程池实现</h2><pre class=" language-c++"><code class="language-c++">class CWTThreadPool &#123;public:    CWTThreadPool(size_t size);    CWTThreadPool() &#123;&#125;    ~CWTThreadPool();    bool Invoke();    void Stop();    int  DispatchWorker(const ThreadWorker& worker);    bool CheckThreadValid(size_t index);private:    std::mutex m_lock;    std::vector<CWTThread*>m_threads;&#125;;</code></pre><pre class=" language-c++"><code class="language-c++">CWTThreadPool::CWTThreadPool(size_t size) &#123;    m_threads.resize(size);    for (size_t i = 0; i < size; i++) &#123;        m_threads[i] = new CWTThread();    &#125;&#125;bool CWTThreadPool::Invoke() &#123;    bool ret = true;    for (size_t i = 0; i < m_threads.size(); i++) &#123;        if (m_threads[i]->Start() == false) &#123;            ret = false;            break;        &#125;    &#125;    if (ret == false) &#123;        for (size_t i = 0; i < m_threads.size(); i++) &#123;            m_threads[i]->Stop();        &#125;    &#125;    return ret;&#125;void CWTThreadPool::Stop() &#123;    for (size_t i = 0; i < m_threads.size(); i++) &#123;        m_threads[i]->Stop();    &#125;&#125;int CWTThreadPool::DispatchWorker(const ThreadWorker& worker) &#123;    int index = -1;    m_lock.lock();    for (size_t i = 0; i < m_threads.size(); i++) &#123;        if (m_threads[i]->IsIdle()) &#123;            m_threads[i]->UpdateWorker(worker);            index = i;            break;        &#125;    &#125;    m_lock.unlock();    return index;&#125;bool CWTThreadPool::CheckThreadValid(size_t index) &#123;    if (index < m_threads.size()) &#123;        return m_threads[index]->IsValid();    &#125;    return false;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> thread </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOCP网络编程和重叠结构的使用</title>
      <link href="/2023/081040534.html"/>
      <url>/2023/081040534.html</url>
      
        <content type="html"><![CDATA[<h2 id="SOCKET与IOCP的结合"><a href="#SOCKET与IOCP的结合" class="headerlink" title="SOCKET与IOCP的结合"></a>SOCKET与IOCP的结合</h2><pre class=" language-c++"><code class="language-c++"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> IOCP </tag>
            
            <tag> Overlapped </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全的队列</title>
      <link href="/2023/081023928.html"/>
      <url>/2023/081023928.html</url>
      
        <content type="html"><![CDATA[<h2 id="设计方式"><a href="#设计方式" class="headerlink" title="设计方式"></a>设计方式</h2><pre class=" language-c++"><code class="language-c++">template<class T>class CWTQueue&#123;public:    //定义枚举类型，说明队列所做的操作    enum&#123;        WQNone,        WQPush,        WQPop,        WQSize,        WQClear    &#125;;    //该结构体只属于类内部使用，用于向IOCP投递信息    typedef struct IocpParam &#123;        IocpParam(int op, const T& sData, HANDLE hEve = NULL)            :nOperator(op), Data(sData), hEvent(hEve) &#123;&#125;        IocpParam() :nOperator(WQNone) &#123;&#125;        size_tnOperator;//操作        TData;//数据        HANDLEhEvent;//pop 操作需要的    &#125;PPARAM; public://定义类主体函数    CWTQueue();    virtual bool PopFront(T& data);    boolPushBack(const T& data);    boolClear();    size_tSize();    virtual ~CWTQueue();protected://声明线程函数体    static  void threadEntry(void* arg);//对外封装接口     virtual void DealParam(PPARAM* pParam);//消息处理函数            void threadMain();//线程主体函数protected:    std::list<T>m_lstData;//内部维护的链表，存储信息    HANDLEm_hCompletetionPort;//iocp句柄    HANDLEm_hThread;//线程接口    std::atomic<bool>m_lock;//原子类型&#125;;</code></pre><pre class=" language-c++"><code class="language-c++">template<class T>inline CWTQueue<T>::CWTQueue()&#123;    //最后一个参数表示能够同时访问队列的线程数    //参数一：代表一个句柄，如果是做文件，可以是文件句柄，如果是做串口，可以做串口句柄    //参数二：代表已经存在的完成端口句柄    //参数三：代表Key    m_hCompletetionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 1);    m_hThread = INVALID_HANDLE_VALUE;    if (m_hCompletetionPort != NULL) &#123;        //开启处理IOCP消息的线程函数        m_hThread = (HANDLE)_beginthread(&CWTQueue::threadEntry, 0, this);    &#125;&#125;template<class T>inline bool CWTQueue<T>::PushBack(const T& data)&#123;    IocpParam* pParam = new IocpParam(WQPush, data);//创建投递的信息    if (m_lock == true) &#123;//通过该原子类型决定并发安全        delete pParam;        return false;    &#125;    //投递信息    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)pParam, NULL);    if (ret == false)delete pParam;    //printf("push back done %d %08p\r\n", ret, (void*)pParam);    return ret;&#125;template<class T>inline bool CWTQueue<T>::PopFront(T& data)&#123;    HANDLEhEvent = CreateEvent(NULL,TRUE,FALSE,NULL);//创建事件    IocpParam pParam(WQPop, data, hEvent);    if (m_lock) &#123;        if (hEvent)CloseHandle(hEvent);        return false;    &#125;    //投递信息    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)&pParam, NULL);    if (ret == false) &#123;        CloseHandle(hEvent);        return false;    &#125;    //等待事件暂停    ret = WaitForSingleObject(hEvent, INFINITE) == WAIT_OBJECT_0;    if (ret) data = pParam.Data;    return ret;&#125;template<class T>inline size_t CWTQueue<T>::Size()&#123;    HANDLEhEvent = CreateEvent(NULL, TRUE, FALSE, NULL);    IocpParam pParam(WQSize, T(), hEvent);    if (m_lock) &#123;        if(hEvent)CloseHandle(hEvent);        return -1;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)&pParam, NULL);    if (ret == false) &#123;        CloseHandle(hEvent);        return -1;    &#125;    ret = WaitForSingleObject(hEvent, INFINITE) == WAIT_OBJECT_0;    if (ret) return pParam.nOperator;    return ret;&#125;template<class T>inline bool CWTQueue<T>::Clear()&#123;    if (m_lock == true)return false;    IocpParam* pParam = new IocpParam(WQClear, T());    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)pParam, NULL);    if (ret == false)delete pParam;    //printf("Clear %08p\r\n", (void*)pParam);    return true;&#125;template<class T>inline CWTQueue<T>::~CWTQueue()&#123;    if (m_lock)return;    m_lock = true;    PostQueuedCompletionStatus(m_hCompletetionPort, 0, NULL, NULL);    WaitForSingleObject(m_hThread, INFINITE);    //防御性编程先置空 在释放    if (m_hCompletetionPort != NULL) &#123;        HANDLE hTemp = m_hCompletetionPort;        m_hCompletetionPort = NULL;        CloseHandle(hTemp);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> thread </tag>
            
            <tag> IOCP </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言操作Redis</title>
      <link href="/2023/08098470.html"/>
      <url>/2023/08098470.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-非关系型数据库"><a href="#Redis-非关系型数据库" class="headerlink" title="Redis-非关系型数据库"></a>Redis-非关系型数据库</h2><ul><li>性能极高 –- <code>Redis</code>能读的速度是<code>110000次/s</code>,写的速度是<code>81000次/s</code> 。</li><li>丰富的数据类型 –- <code>Redis</code>支持二进制案例的 <code>Strings,Lists,Hashes,Sets及Ordered Sets</code>数据类型操作。</li><li>原子–<code>Redis</code>的所有操作都是原子性的，同时<code>Redis</code>还支持对几个操作全并后的原子性执行。</li><li>丰富的特性 – Redis还支持<code>publish/subscribe</code>,通知,<code>key</code>过期等等特性。</li></ul><h2 id="Go开发安装依赖包"><a href="#Go开发安装依赖包" class="headerlink" title="Go开发安装依赖包"></a>Go开发安装依赖包</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>redis<span class="token operator">/</span>redis</code></pre><p>go-redis包自带了连接池，会自动维护redis连接，因此创建一次client即可，不要查询一次redis就关闭client</p><h2 id="redis连接测试"><a href="#redis连接测试" class="headerlink" title="redis连接测试"></a>redis连接测试</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/go-redis/redis"</span><span class="token punctuation">)</span><span class="token keyword">var</span> redisDb <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token keyword">func</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    redisDb <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Addr<span class="token punctuation">:</span>     <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//redis地址</span>        Password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">//redis密码</span>        DB<span class="token punctuation">:</span>       <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//默认数据库，默认是0</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//通过 *redis.Client.Ping() 来检查是否成功连接到了redis服务器</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis 连接失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis连接成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="redis-options参数含义"><a href="#redis-options参数含义" class="headerlink" title="redis.options参数含义"></a>redis.options参数含义</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Options <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 网络类型 tcp 或者 unix.</span>    <span class="token comment" spellcheck="true">// 默认是 tcp.</span>    Network <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// redis地址，格式 host:port</span>    Addr <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 新建一个redis连接的时候，会回调这个函数</span>    OnConnect <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Conn<span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// redis密码，redis server没有设置可以为空。</span>    Password <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// redis数据库，序号从0开始，默认是0，可以不用设置</span>    DB <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// redis操作失败最大重试次数，默认不重试。</span>    MaxRetries <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 最小重试时间间隔.</span>    <span class="token comment" spellcheck="true">// 默认是 8ms ; -1 表示关闭.</span>    MinRetryBackoff time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// 最大重试时间间隔</span>    <span class="token comment" spellcheck="true">// 默认是 512ms; -1 表示关闭.</span>    MaxRetryBackoff time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// redis连接超时时间.</span>    <span class="token comment" spellcheck="true">// 默认是 5 秒.</span>    DialTimeout time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// socket读取超时时间</span>    <span class="token comment" spellcheck="true">// 默认 3 秒.</span>    ReadTimeout time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// socket写超时时间</span>    WriteTimeout time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// redis连接池的最大连接数.</span>    <span class="token comment" spellcheck="true">// 默认连接池大小等于 cpu个数 * 10</span>    PoolSize <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// redis连接池最小空闲连接数.</span>    MinIdleConns <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// redis连接最大的存活时间，默认不会关闭过时的连接.</span>    MaxConnAge time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// 当你从redis连接池获取一个连接之后，连接池最多等待这个拿出去的连接多长时间。</span>    <span class="token comment" spellcheck="true">// 默认是等待 ReadTimeout + 1 秒.</span>    PoolTimeout time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// redis连接池多久会关闭一个空闲连接.</span>    <span class="token comment" spellcheck="true">// 默认是 5 分钟. -1 则表示关闭这个配置项</span>    IdleTimeout time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// 多长时间检测一下，空闲连接</span>    <span class="token comment" spellcheck="true">// 默认是 1 分钟. -1 表示关闭空闲连接检测</span>    IdleCheckFrequency time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// 只读设置，如果设置为true， redis只能查询缓存不能更新。</span>    readOnly <span class="token builtin">bool</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="基本键值操作"><a href="#基本键值操作" class="headerlink" title="基本键值操作"></a>基本键值操作</h2><p>redis基本的key.value操作，指的是针对value值得类型为字符串或者数字类型的读写操作，go-redis常用函数如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cmdable <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给数据库中名称为key的string赋予值value,并设置失效时间，0为永久有效</span>    <span class="token function">Set</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> expiration time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">*</span>StatusCmd    <span class="token comment" spellcheck="true">//查询数据库中名称为key的value值</span>    <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">//设置一个key的值，并返回这个key的旧值</span>    <span class="token function">GetSet</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">//如果key不存在，则设置这个key的值,并设置key的失效时间。如果key存在，则设置不生效</span>    <span class="token function">SetNX</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> expiration time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd    <span class="token comment" spellcheck="true">//批量查询key的值。比如redisDb.MGet("name1","name2","name3")</span>    <span class="token function">MGet</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>SliceCmd    <span class="token comment" spellcheck="true">//批量设置key的值。redisDb.MSet("key1", "value1", "key2", "value2", "key3", "value3")</span>    <span class="token function">MSet</span><span class="token punctuation">(</span>pairs <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>StatusCmd    <span class="token comment" spellcheck="true">//Incr函数每次加一,key对应的值必须是整数或nil</span>    <span class="token comment" spellcheck="true">//否则会报错incr key1: ERR value is not an integer or out of range</span>    <span class="token function">Incr</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">// IncrBy函数,可以指定每次递增多少,key对应的值必须是整数或nil</span>    <span class="token function">IncrBy</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">// IncrByFloat函数,可以指定每次递增多少，跟IncrBy的区别是累加的是浮点数</span>    <span class="token function">IncrByFloat</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token comment" spellcheck="true">// Decr函数每次减一,key对应的值必须是整数或nil.否则会报错</span>    <span class="token function">Decr</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//DecrBy,可以指定每次递减多少,key对应的值必须是整数或nil</span>    <span class="token function">DecrBy</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> decrement <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//删除key操作,支持批量删除redisDb.Del("key1","key2","key3")</span>    <span class="token function">Del</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//设置key的过期时间,单位秒</span>    <span class="token function">Expire</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> expiration time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd    <span class="token comment" spellcheck="true">//给数据库中名称为key的string值追加value</span>    <span class="token function">Append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Set-Get示例"><a href="#Set-Get示例" class="headerlink" title="Set&#x2F;Get示例"></a>Set&#x2F;Get示例</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis 连接失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis连接成功"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//参数含义为key value 过期时间 0代表不会过期</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"set err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name的值为："</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="GetSet-SetNX示例"><a href="#GetSet-SetNX示例" class="headerlink" title="GetSet&amp;SetNX示例"></a>GetSet&amp;SetNX示例</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis 连接失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis连接成功"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//参数含义为key value 过期时间 0代表不会过期</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"set err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name的值为："</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    oldval<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">GetSet</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"new_zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"修改失败 err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name1:"</span><span class="token punctuation">,</span> oldval<span class="token punctuation">)</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">SetNX</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"设置nx err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    val<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name的值为："</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="MGet-MSet示例"><a href="#MGet-MSet示例" class="headerlink" title="MGet&amp;MSet示例"></a>MGet&amp;MSet示例</h3><pre class=" language-go"><code class="language-go">err <span class="token operator">:=</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis 连接失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis连接成功"</span><span class="token punctuation">)</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">MSet</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"批量插入失败：err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    vals<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">MGet</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查找数据失败：err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span></code></pre><h3 id="自增自减操作"><a href="#自增自减操作" class="headerlink" title="自增自减操作"></a>自增自减操作</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis 连接失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"redis连接成功"</span><span class="token punctuation">)</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败：err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    redisDb<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">IncrBy</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">Decr</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">DecrBy</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> val <span class="token builtin">string</span>    val<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age="</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Del-Expire-Append示例"><a href="#Del-Expire-Append示例" class="headerlink" title="Del&amp;Expire&amp;Append示例"></a>Del&amp;Expire&amp;Append示例</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//redis连接错误</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置一个name对应的值是hello</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    redisDb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">)</span>    val<span class="token punctuation">,</span>err<span class="token operator">:=</span>redisDb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//helloChina</span>        <span class="token comment" spellcheck="true">//设置key的过期时间为5秒</span>    redisDb<span class="token punctuation">.</span><span class="token function">Expire</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//批量删除</span>    redisDb<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span></code></pre><h2 id="list操作"><a href="#list操作" class="headerlink" title="list操作"></a>list操作</h2><p><code>Redis</code>列表(<code>list</code>)是简单的字符串列表,列表是有序的,列表中的元素可以重复.可以添加一个元素到列表的头部(左边)或者尾部(右边)常用操作方法如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cmdable <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从列表左边插入数据,list不存在则新建一个继续插入数据</span>    <span class="token function">LPush</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//跟LPush的区别是，仅当列表存在的时候才插入数据</span>    <span class="token function">LPushX</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//返回名称为 key 的 list 中 start 至 end 之间的元素</span>    <span class="token comment" spellcheck="true">//返回从0开始到-1位置之间的数据，意思就是返回全部数据</span>    <span class="token function">LRange</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//返回列表的长度大小</span>    <span class="token function">LLen</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//截取名称为key的list的数据，list的数据为截取后的值</span>    <span class="token function">LTrim</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StatusCmd    <span class="token comment" spellcheck="true">//根据索引坐标，查询列表中的数据</span>    <span class="token function">LIndex</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> index <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">//给名称为key的list中index位置的元素赋值</span>    <span class="token function">LSet</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> index <span class="token builtin">int64</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>StatusCmd    <span class="token comment" spellcheck="true">//在指定位置插入数据。op为"after或者before"</span>    <span class="token function">LInsert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> op <span class="token builtin">string</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//在指定位置前面插入数据</span>    <span class="token function">LInsertBefore</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//在指定位置后面插入数据</span>    <span class="token function">LInsertAfter</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//从列表左边删除第一个数据，并返回删除的数据</span>    <span class="token function">LPop</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">//删除列表中的数据。删除count个key的list中值为value 的元素。</span>    <span class="token function">LRem</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> count <span class="token builtin">int64</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="list操作示例"><a href="#list操作示例" class="headerlink" title="list操作示例"></a>list操作示例</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">list_operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//list操作</span>    <span class="token comment" spellcheck="true">//只有列表存在的时候才会插入数据，不存在的话，误差插入</span>    err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPushX</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//列表不存在依然可以插入</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPush</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"xsq"</span><span class="token punctuation">,</span> <span class="token string">"wangtao"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此列表存在的时候才能插入数据</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPushX</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回数据</span>    <span class="token comment" spellcheck="true">// 返回从0开始到-1位置之间的数据，意思就是返回全部数据</span>    vals<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回从[0,2]位置之间的数据，意思就是返回3个数据</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    studentLen<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LLen</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>studentLen<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 列表索引从0开始计算，这里返回第3个元素</span>    index<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LIndex</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//截取名称为key的list,并把截取后的值赋值给studentList</span>    val <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LTrim</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//给名称为key的list中index位置的元素赋值，把原来的数据覆盖</span>    redisDb<span class="token punctuation">.</span><span class="token function">LSet</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"wangtao"</span><span class="token punctuation">)</span>    index<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LIndex</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//在list列表studentList中值为jack前面添加元素hello</span>    redisDb<span class="token punctuation">.</span><span class="token function">LInsert</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"before"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">LInsert</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"after"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//从列表左边删除第一个数据，并返回删除的数据</span>    first<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPop</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除列表中的数据。删除count个key的list中值为value 的元素。如果出现重复元素，仅删除1次，也就是删除第一个</span>    rem<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRem</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="集合Set操作"><a href="#集合Set操作" class="headerlink" title="集合Set操作"></a>集合Set操作</h2><p><code>redi</code>的<code>set类型</code>（集合）是<code>string</code>类型数值的无序集合，并且集合元素唯一。常用函数如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cmdable <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向名称为key的set中添加元素member</span>    <span class="token function">SAdd</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//获取集合set元素个数</span>    <span class="token function">SCard</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//判断元素member是否在集合set中</span>    <span class="token function">SIsMember</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> member <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd    <span class="token comment" spellcheck="true">//返回名称为 key 的 set 的所有元素</span>    <span class="token function">SMembers</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//求差集</span>    <span class="token function">SDiff</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//求差集并将差集保存到 destination 的集合</span>    <span class="token function">SDiffStore</span><span class="token punctuation">(</span>destination <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//求交集</span>    <span class="token function">SInter</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//求交集并将交集保存到 destination 的集合</span>    <span class="token function">SInterStore</span><span class="token punctuation">(</span>destination <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//求并集</span>    <span class="token function">SUnion</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//求并集并将并集保存到 destination 的集合</span>    <span class="token function">SUnionStore</span><span class="token punctuation">(</span>destination <span class="token builtin">string</span><span class="token punctuation">,</span> keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//随机返回集合中的一个元素，并且删除这个元素</span>    <span class="token function">SPop</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">// 随机返回集合中的count个元素，并且删除这些元素</span>    <span class="token function">SPopN</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> count <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//删除名称为 key 的 set 中的元素 member,并返回删除的元素个数</span>    <span class="token function">SRem</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//随机返回名称为 key 的 set 的一个元素</span>    <span class="token function">SRandMember</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">//随机返回名称为 key 的 set 的count个元素</span>    <span class="token function">SRandMemberN</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> count <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//把集合里的元素转换成map的key</span>    <span class="token function">SMembersMap</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringStructMapCmd    <span class="token comment" spellcheck="true">//移动集合source中的一个member元素到集合destination中去</span>    <span class="token function">SMove</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> destination <span class="token builtin">string</span><span class="token punctuation">,</span> member <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">set_operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加10到集合中</span>    err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SAdd</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">SAdd</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">430</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//随机返回集合中的一个元素，并且删除这个元素,这里删除的是400</span>    member1<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SPop</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>member1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 随机返回集合中的4个元素，并且删除这些元素</span>    member2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SPopN</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>member2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除集合stuSet名称为300,400的元素,并返回删除的元素个数</span>    member3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SRem</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>member3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//随机返回集合stuSet中的一个元素</span>    member4<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SRandMember</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>member4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//随机返回集合stuSet中的3个元素</span>    member5<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SRandMemberN</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>member5<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把集合里的元素转换成map的key</span>    map1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SMembersMap</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//移动集合stuSet中的一个200元素到集合resSet中去</span>    ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SMove</span><span class="token punctuation">(</span><span class="token string">"stuset"</span><span class="token punctuation">,</span> <span class="token string">"resset"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取集合中元素的个数</span>    redisDb<span class="token punctuation">.</span><span class="token function">SAdd</span><span class="token punctuation">(</span><span class="token string">"blackList"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">,</span> <span class="token string">"xsq"</span><span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">SAdd</span><span class="token punctuation">(</span><span class="token string">"whiteList"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"wangtao"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 求交集, 即既在黑名单中, 又在白名单中的元素</span>    names<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SInter</span><span class="token punctuation">(</span><span class="token string">"blackList"</span><span class="token punctuation">,</span> <span class="token string">"whiteList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"names:"</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//求交集并将交集保存到 destSet 的集合</span>    res<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SInterStore</span><span class="token punctuation">(</span><span class="token string">"destset"</span><span class="token punctuation">,</span> <span class="token string">"blackList"</span><span class="token punctuation">,</span> <span class="token string">"whiteList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取交集的值[the Elder]</span>    dest<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">SMembers</span><span class="token punctuation">(</span><span class="token string">"destset"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//求差集</span>    names<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">SDiff</span><span class="token punctuation">(</span><span class="token string">"blackList"</span><span class="token punctuation">,</span> <span class="token string">"whiteList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"names:"</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="hash数据操作"><a href="#hash数据操作" class="headerlink" title="hash数据操作"></a>hash数据操作</h2><p>如果你希望<code>key/value</code>的值也能作为<code>hash</code>结构进行操作，可以选择<code>redis hash</code>类型。</p><p>如果我们希望缓存一条用户信息(包括用户id、用户名、email字段)，希望能够做到局部读写用户信息（例如：读写用户名），也能够读取整条用户信息，那么hash类型就支持这些操作。 <code>Redis hash</code>操作主要有如下2-3个元素组成</p><ul><li><code>key</code> - <code>redis key</code>唯一标识</li><li><code>field</code> - <code>hash</code>数据的字段名</li><li><code>value</code> - 值,有些操作不需要值</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cmdable <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据key和字段名，删除hash字段，支持批量删除hash字段</span>    <span class="token function">HDel</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//检测hash字段名是否存在。</span>    <span class="token function">HExists</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd    <span class="token comment" spellcheck="true">//根据key和field字段，查询field字段的值</span>    <span class="token function">HGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringCmd    <span class="token comment" spellcheck="true">//根据key查询所有字段和值</span>    <span class="token function">HGetAll</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringStringMapCmd    <span class="token comment" spellcheck="true">//根据key和field字段，累加数值。</span>    <span class="token function">HIncrBy</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">,</span> incr <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//根据key和field字段，累加数值。</span>    <span class="token function">HIncrByFloat</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">,</span> incr <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token comment" spellcheck="true">//根据key返回所有字段名</span>    <span class="token function">HKeys</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//根据key，查询hash的字段数量</span>    <span class="token function">HLen</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//根据key和多个字段名，批量查询多个hash字段值</span>    <span class="token function">HMGet</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>SliceCmd    <span class="token comment" spellcheck="true">//根据key和多个字段名和字段值，批量设置hash字段值</span>    <span class="token function">HMSet</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>StatusCmd    <span class="token comment" spellcheck="true">//根据key和field字段设置，field字段的值</span>    <span class="token function">HSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd    <span class="token comment" spellcheck="true">//根据key和field字段，查询field字段的值</span>    <span class="token function">HSetNX</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>BoolCmd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hash_operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据key和field字段设置,field字段的值。 user_1 是hash key，username 是字段名, admin是字段值</span>    redisDb<span class="token punctuation">.</span><span class="token function">HSet</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//根据key和field字段,查询field字段的值。user_1 是hash key，username是字段名</span>    username<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HGet</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">HSet</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"521109"</span><span class="token punctuation">)</span>    data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HGetAll</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> field<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    batchData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    batchData<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wangtao"</span>    batchData<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123456</span>    redisDb<span class="token punctuation">.</span><span class="token function">HMSet</span><span class="token punctuation">(</span><span class="token string">"user_2"</span><span class="token punctuation">,</span> batchData<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果email字段不存在，则设置hash字段值</span>    redisDb<span class="token punctuation">.</span><span class="token function">HSetNX</span><span class="token punctuation">(</span><span class="token string">"user_2"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"13209832943@163.com"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// HMGet支持多个field字段名，意思是一次返回多个字段值</span>    values<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HMGet</span><span class="token punctuation">(</span><span class="token string">"user_2"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 累加count字段的值，一次性累加2， user_1为hash key</span>    count<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HIncrBy</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 累加score字段的值，一次性累加3.2， user_1为hash key</span>    score<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HIncrByFloat</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 根据key返回所有字段名，keys是一个string数组</span>    keys<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HKeys</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//根据key，查询hash的字段数量</span>    size<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HLen</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 删除一个字段id</span>    redisDb<span class="token punctuation">.</span><span class="token function">HDel</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span>    keys<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">HKeys</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>    exists<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">HExists</span><span class="token punctuation">(</span><span class="token string">"user_1"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><p><code>Redis</code>有序集合<code>(sorted set)</code>和集合一样也是<code>string</code>类型元素的集合,且不允许重复的成员,不同的是每个元素都会关联一个<code>double</code>类型的分数,这个分数主要用于集合元素排序。</p><blockquote><p><em>&#x2F;&#x2F; Z 表示已排序的集合成员</em> </p><p><strong>type</strong> Z <strong>struct</strong> { </p><p>Score  <strong>float64</strong>  <em>&#x2F;&#x2F; 分数</em> </p><p>Member <strong>interface</strong>{} <em>&#x2F;&#x2F; 元素名</em> </p><p>}</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Cmdable <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加一个或者多个元素到集合，如果元素已经存在则更新分数</span>    <span class="token function">ZAdd</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span>Z<span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token function">ZAddNX</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span>Z<span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token function">ZAddXX</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span>Z<span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token function">ZAddCh</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span>Z<span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token function">ZAddNXCh</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span>Z<span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">// 添加一个或者多个元素到集合，如果元素已经存在则更新分数</span>    <span class="token function">ZAddXXCh</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span>Z<span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//增加元素的分数</span>    <span class="token function">ZIncr</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> member Z<span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token function">ZIncrNX</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> member Z<span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token function">ZIncrXX</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> member Z<span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token comment" spellcheck="true">//增加元素的分数，增加的分数必须是float64类型</span>    <span class="token function">ZIncrBy</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> increment <span class="token builtin">float64</span><span class="token punctuation">,</span> member <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token comment" spellcheck="true">// 存储增加分数的元素到destination集合</span>    <span class="token function">ZInterStore</span><span class="token punctuation">(</span>destination <span class="token builtin">string</span><span class="token punctuation">,</span> store ZStore<span class="token punctuation">,</span> keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//返回集合元素个数</span>    <span class="token function">ZCard</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//统计某个分数范围内的元素个数</span>    <span class="token function">ZCount</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//返回集合中某个索引范围的元素，根据分数从小到大排序</span>    <span class="token function">ZRange</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//ZRevRange的结果是按分数从大到小排序。</span>    <span class="token function">ZRevRange</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//根据分数范围返回集合元素，元素根据分数从小到大排序，支持分页。</span>    <span class="token function">ZRangeByScore</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> opt ZRangeBy<span class="token punctuation">)</span> <span class="token operator">*</span>StringSliceCmd    <span class="token comment" spellcheck="true">//根据分数范围返回集合元素，用法类似ZRangeByScore，区别是元素根据分数从大到小排序。</span>    <span class="token function">ZRemRangeByScore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//用法跟ZRangeByScore一样，区别是除了返回集合元素，同时也返回元素对应的分数</span>    <span class="token function">ZRangeWithScores</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>ZSliceCmd    <span class="token comment" spellcheck="true">//根据元素名，查询集合元素在集合中的排名，从0开始算，集合元素按分数从小到大排序</span>    <span class="token function">ZRank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> member <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//ZRevRank的作用跟ZRank一样，区别是ZRevRank是按分数从大到小排序。</span>    <span class="token function">ZRevRank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> member <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd     <span class="token comment" spellcheck="true">//查询元素对应的分数</span>    <span class="token function">ZScore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> member <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>FloatCmd    <span class="token comment" spellcheck="true">//删除集合元素</span>    <span class="token function">ZRem</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd    <span class="token comment" spellcheck="true">//根据索引范围删除元素。从最低分到高分的（stop-start）个元素</span>    <span class="token function">ZRemRangeByRank</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>IntCmd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">list_operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//list操作</span>    <span class="token comment" spellcheck="true">//只有列表存在的时候才会插入数据，不存在的话，误差插入</span>    err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPushX</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//列表不存在依然可以插入</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPush</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"xsq"</span><span class="token punctuation">,</span> <span class="token string">"wangtao"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此列表存在的时候才能插入数据</span>    err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPushX</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回数据</span>    <span class="token comment" spellcheck="true">// 返回从0开始到-1位置之间的数据，意思就是返回全部数据</span>    vals<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回从[0,2]位置之间的数据，意思就是返回3个数据</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    studentLen<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LLen</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>studentLen<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 列表索引从0开始计算，这里返回第3个元素</span>    index<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LIndex</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//截取名称为key的list,并把截取后的值赋值给studentList</span>    val <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LTrim</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//给名称为key的list中index位置的元素赋值，把原来的数据覆盖</span>    redisDb<span class="token punctuation">.</span><span class="token function">LSet</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"wangtao"</span><span class="token punctuation">)</span>    index<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LIndex</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//在list列表studentList中值为jack前面添加元素hello</span>    redisDb<span class="token punctuation">.</span><span class="token function">LInsert</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"before"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    redisDb<span class="token punctuation">.</span><span class="token function">LInsert</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token string">"after"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//从列表左边删除第一个数据，并返回删除的数据</span>    first<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LPop</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除列表中的数据。删除count个key的list中值为value 的元素。如果出现重复元素，仅删除1次，也就是删除第一个</span>    rem<span class="token punctuation">,</span> err <span class="token operator">:=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRem</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span>    vals<span class="token punctuation">,</span> err <span class="token operator">=</span> redisDb<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">"studentList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p><code>redis</code>事务可以一次执行多个命令,事务中的命令要么全部被执行,要么全部都不执行。以下示例是以<code>Pipeline</code>的方式操作事务,接口结构如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Pipeliner <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    StatefulCmdable    <span class="token function">Do</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cmd    <span class="token function">Process</span><span class="token punctuation">(</span>cmd Cmder<span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token function">Discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Cmder<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre><code>//以Pipeline的方式操作事务TxPipeline() PipelinerWatch - redis乐观锁支持</code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存与存储系统</title>
      <link href="/2023/080926390.html"/>
      <url>/2023/080926390.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是存储系统"><a href="#什么是存储系统" class="headerlink" title="什么是存储系统"></a>什么是存储系统</h2><p>一个提供了读写、控制类接口、能够安全有效地把数据持久化的软件，就可以称为存储系统</p><h2 id="系统特点"><a href="#系统特点" class="headerlink" title="系统特点"></a>系统特点</h2><ol><li>性能敏感</li><li>容易受硬件影响</li><li>存储系统代码，既简单又复杂</li></ol><h2 id="单机存储"><a href="#单机存储" class="headerlink" title="单机存储"></a>单机存储</h2><p>单机存储&#x3D;单个计算机节点上的存储软件系统，一般不涉及网络交互</p><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>文件系统的管理单元：文件</p><p>文件系统接口：文件系统繁多，如Ext2&#x2F;3&#x2F;4,sysfs,rootfs等，但都遵循VFS的统一抽象接口</p><p>Linux文件系统的两大数据结构：Index Node&amp;Directory Entry</p><ul><li>Index Node 记录文件元数据，如d、大小、权限、磁盘位置等，inode是一个文件的唯一标识，会被存储到磁盘上，inode的总数在格式化文件系统时就固定了</li><li>Directory Entry：记录文件名、inode:指针，层级关系(parent)等，dentry是内存结构，与inodel的关系是N:l(hardlink的实现)</li></ul><h3 id="key-value存储"><a href="#key-value存储" class="headerlink" title="key-value存储"></a>key-value存储</h3><p>常见使用方式：put(k,)&amp;get(k)</p><p>常见数据结构：LSM-Tree,某种程度上牺性读性能，追求写入性能</p><p>拳头产品：RocksDB</p><h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><h3 id="HDFS-堪称大数据时代的基石"><a href="#HDFS-堪称大数据时代的基石" class="headerlink" title="HDFS:堪称大数据时代的基石"></a>HDFS:堪称大数据时代的基石</h3><p>HDFS核心特点：</p><ul><li>支持海量数据存储</li><li>高容错性</li><li>弱POSIX语义</li><li>使用普通x86服务器，性价比高</li></ul><h3 id="Ceph-开源分布式存储系统里的万金油"><a href="#Ceph-开源分布式存储系统里的万金油" class="headerlink" title="Ceph:开源分布式存储系统里的万金油"></a>Ceph:开源分布式存储系统里的万金油</h3><p>Ceph的核心特点</p><ul><li>一套系统支持对象接口、块接口、文件接口，</li><li>但是一切皆对象</li><li>数据写入采用主备复制模型</li><li>数据分布模型采用CRUSH算法</li></ul><h2 id="单机数据库"><a href="#单机数据库" class="headerlink" title="单机数据库"></a>单机数据库</h2><p>单机数据库：单个计算机节点上的数据库系统</p><p>事务在单机内执行，也可能通过网络交互实现分布式事务</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系型数据库的通用组件：</p><p>Query Engine一负责解析quey,生成查询计划</p><ul><li><p>Txn Manager一负责事务并发管理</p></li><li><p>Lock Manager一负责锁相关的策略</p></li><li><p>Storage Engine一负责组织内存&#x2F;磁盘数据结构</p></li><li><p>Replication一负责主备同步</p></li><li><p>关键内存数据结构：B-Tree、B+-Tree、LRU List等</p></li><li><p>关键磁盘数据结构：WriteAheadLog(RedoLog)、Page</p></li></ul><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><h3 id="Elasticsearch特点："><a href="#Elasticsearch特点：" class="headerlink" title="Elasticsearch特点："></a>Elasticsearch特点：</h3><ul><li>面向「文档」存储</li><li>文档可序列化成SON,支持嵌套</li><li>存在「index」，index&#x3D;文档的集合</li><li>存储和构建索引能力依赖Lucene引擎</li><li>实现了大量搜索数据结构&amp;算法</li><li>支持RESTFU儿API,也支持弱SQL交互</li></ul><h3 id="mongoDB特点："><a href="#mongoDB特点：" class="headerlink" title="mongoDB特点："></a>mongoDB特点：</h3><ul><li>面向「文档」存储</li><li>文档可序列化成SON&#x2F;BSON,支持嵌套</li><li>存在「collection],collection&#x3D;文档的集合</li><li>存储和构建索引能力依赖wiredTiger引擎</li><li>4.0后开始支持事务（多文档、跨分片多文档等】</li><li>常用client&#x2F;SDK交互，可通过插件转译支持弱SQL</li></ul><h3 id="redis特点："><a href="#redis特点：" class="headerlink" title="redis特点："></a>redis特点：</h3><ul><li>数据结构丰富(hash表、set、Zset、ist)</li><li>C语言实现，超高性能</li><li>主要基于内存，但支持AOF&#x2F;RDB特久化</li><li>常用redis-ci&#x2F;多语言SDK交互</li></ul><h2 id="新技术演进-概览"><a href="#新技术演进-概览" class="headerlink" title="新技术演进-概览"></a>新技术演进-概览</h2><p>软件架构变更</p><p>智能存储格式转换</p><p>新硬件革命</p><h3 id="高性能硬件"><a href="#高性能硬件" class="headerlink" title="高性能硬件"></a>高性能硬件</h3><p>RDMA网络：</p><ul><li>传统的网络协议栈，需要基于多层网络协议处理数据包，存在用户态&amp;内核态的切换，足够通用但性能不是最佳</li><li>RDMA是kernel bypass的流派，不经过传统的网络协议栈，可以把用户态虚拟内存映射给网卡，减少携贝开销，减少c印u开销</li></ul><p>Persistent Memory:</p><ul><li>IO时延介于SSD和Memory:之间，约百纳秒量级</li><li>可以用作易失性内存(memory mode),也可以用作特久化介质(app-direct)</li></ul><p>可编程交换机：</p><p>P4 Switch,配有编译器、计算单元、DRAM,可以在交换机层对网络包做计算逻辑。在数据库场景下，可以实现缓存一致性协议等</p><p>CPU&#x2F;GPU&#x2F;DPU:</p><ul><li>:CPU:从multi-.core走向may-cofe</li><li>GPU:强大的算力&amp;越来越大的显存空间</li><li>DPU:异构计算，减轻CPU的workload</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><ul><li>块存储：存储软件栈里的底层系统，接口过于朴素</li><li>文件存储：日常使用最广泛的存储系统，接口十分友好，实现五花八门</li><li>对象存储：公有云上的王牌产品，immutable语义加持</li><li>key-value存储：形式最灵活，存在大量的开源&#x2F;黑盒产品</li></ul><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><ul><li>关系型数据库：基于关系和关系代数构建的，一般支持事务和SQL访问，使用体验友好的存储产品</li><li>非关系型数据库：结构灵活，访问方式灵活，针对不同场景有不同的针对性产品</li></ul><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><ul><li>数据分布策略：决定了数据怎么分布到集群里的多个物理节点，是否均匀，是否能做到高性能</li><li>数据复制协议：影响1○路径的性能、机器故障场景的处理方式</li><li>分布式事务算法：多个数据库节点协同保障一个事务的ACD特性的算法，通常基于2pC的思想设计</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 存储系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GORM框架</title>
      <link href="/2023/080927216.html"/>
      <url>/2023/080927216.html</url>
      
        <content type="html"><![CDATA[<h2 id="GORM概述"><a href="#GORM概述" class="headerlink" title="GORM概述"></a>GORM概述</h2><p>GORM 是基于 Go 语言的一个自动化的 ORM（Object Relational Mapping） 框架，用于对 Go 语言结构体和数据库字段之间的映射。</p><p>GORM 官方支持的数据库类型有四个</p><ol><li>MySQL（最流行的数据库）</li><li>PostgreSQL（开源协议较为宽松，很多有定制数据库需求的公司都会基于PostgreSQL进行二开）</li><li>SQLite（轻量级的关系型数据库，主要用于移动设备）</li><li>SQL Server（微软推出的关系型数据库管理系统）</li></ol><p>官方给出的使用文档链接为：<a href="https://gorm.io/zh_CN/docs/index.html">https://gorm.io/zh_CN/docs/index.html</a></p><h2 id="GORM约定"><a href="#GORM约定" class="headerlink" title="GORM约定"></a>GORM约定</h2><ul><li>Gorm使用名为D的字段作为主键</li><li>使用结构体的蛇形负数作为表名</li><li>字段名的蛇形作为列名</li><li>使用CreatedAt、.UpdatedAt字段作为创建、</li><li>更新时间</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-powershell"><code class="language-powershell">go get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>gormgo get <span class="token operator">-</span>u gorm<span class="token punctuation">.</span>io<span class="token operator">/</span>driver<span class="token operator">/</span>sqlite</code></pre><h2 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"gorm.io/driver/mysql"</span>    <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:521109#Xsq@tcp(127.0.0.1:3306)/grom_test?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注意：</strong>想要正确的处理 <code>time.Time</code> ，您需要带上 <code>parseTime</code> 参数， (<a href="https://github.com/go-sql-driver/mysql#parameters">更多参数</a>) 要支持完整的 UTF-8 编码，您需要将 <code>charset=utf8</code> 更改为 <code>charset=utf8mb4</code> 查看 <a href="https://mathiasbynens.be/notes/mysql-utf8mb4">此文章</a> 获取详情</p></blockquote><p>MySQL驱动程序提供了一些高级配置可以在初始化过程中使用，例如：</p><blockquote><pre class=" language-go"><code class="language-go">db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DSN<span class="token punctuation">:</span> <span class="token string">"gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// DSN data source name</span>  DefaultStringSize<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// string 类型字段的默认长度</span>  DisableDatetimePrecision<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span>  DontSupportRenameIndex<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span>  DontSupportRenameColumn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span>  SkipInitializeWithVersion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据当前 MySQL 版本自动配置</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></blockquote><h2 id="自定义驱动"><a href="#自定义驱动" class="headerlink" title="自定义驱动"></a>自定义驱动</h2><p>GORM允许通过DriverName选项自定义MySQL驱动，例如</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token boolean">_</span> <span class="token string">"example.com/my_mysql_driver"</span>  <span class="token string">"gorm.io/driver/mysql"</span>  <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DriverName<span class="token punctuation">:</span> <span class="token string">"my_mysql_driver"</span><span class="token punctuation">,</span>  DSN<span class="token punctuation">:</span> <span class="token string">"gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="GORM操作"><a href="#GORM操作" class="headerlink" title="GORM操作"></a>GORM操作</h2><p>gorm可自定义结构体来创建数据库表，可以将表结构直接生成对应的表，例如可以定义一个<code>Product</code>结构，具体内容如下</p><pre class=" language-go"><code class="language-go">gorm<span class="token punctuation">.</span>Model    Code  <span class="token builtin">string</span> <span class="token string">`gorm:"VARCHAR(20);NOT NULL;column:prodname"`</span>    Price <span class="token builtin">uint</span>   <span class="token string">`gorm:"INT;PRIMARY KEY;column:price"`</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过类型后的语句可实现对改变量的类型定义以及名称的更换，同样也可以自定义表名</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>Product<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"us_user"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以设置全局的logger，可以实现在每次执行sql语句的时候会答应每一行的sql</p><pre class=" language-go"><code class="language-go">newLogger <span class="token operator">:=</span> logger<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>        log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//日志输出的目标，前缀和日志包含的内容</span>        logger<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            SlowThreshold<span class="token punctuation">:</span>             time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 慢 SQL 阈值</span>            LogLevel<span class="token punctuation">:</span>                  logger<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 日志级别</span>            IgnoreRecordNotFoundError<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 忽略ErrRecordNotFound（记录未找到）错误</span>            Colorful<span class="token punctuation">:</span>                  <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 禁用彩色打印</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span></code></pre><p>下面是一些常用的gorm创建表，添加数据，以及查询数据的API实践</p><h3 id="First的使用踩坑"><a href="#First的使用踩坑" class="headerlink" title="First的使用踩坑"></a>First的使用踩坑</h3><p>​使用First时，需要注意查询不到数据会返ErrRecordNotFound.使用Find查询多条数据，查询不到数据不会返回错误。</p><h3 id="使用结构体作为查询条件"><a href="#使用结构体作为查询条件" class="headerlink" title="使用结构体作为查询条件"></a>使用结构体作为查询条件</h3><p>​当使用结构作为条件查询时，GORM只会查询非零值字段。这意味着如果您的字段值为0、”、false或其他值，该字段不会被用于构建查询条件，使用Map来构建查询条件。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    db <span class="token operator">:=</span> <span class="token function">DirectConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功"</span><span class="token punctuation">)</span>    err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"自动建表失败 err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        code <span class="token operator">:=</span> <span class="token string">"D"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> code<span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">101</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">102</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">103</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span>Product    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname = ?"</span><span class="token punctuation">,</span> <span class="token string">"D22"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    res<span class="token operator">:=</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname &lt;> ?"</span><span class="token punctuation">,</span> <span class="token string">"D22"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回找到的记录数，相当于（len(users)）</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//returns error</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname IN ?"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"D11"</span><span class="token punctuation">,</span> <span class="token string">"D12"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname LIKE ?"</span><span class="token punctuation">,</span> <span class="token string">"%D%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"prodname = ? AND price = ?"</span><span class="token punctuation">,</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> <span class="token string">"102"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token punctuation">,</span> Price<span class="token punctuation">:</span> <span class="token number">101</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Result:%v\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果要修改查询的内容的话，则可以通过直接修改该引用变量，在保存即可</p><pre class=" language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> NewUser<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NewUser<span class="token punctuation">)</span>NewUser<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span>db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NewUser<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将NewUser的Name修改成"Tom"</span></code></pre><h2 id="Gorm更新数据"><a href="#Gorm更新数据" class="headerlink" title="Gorm更新数据"></a>Gorm更新数据</h2><pre class=" language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"Price"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>Code<span class="token punctuation">:</span><span class="token string">"F42"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>Code<span class="token punctuation">:</span><span class="token string">"F42"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新单个列</span>    <span class="token comment" spellcheck="true">//UPDATE `us_user` SET `prodname`='D24',`updated_at`='2023-08-11 11:43:35.18' WHERE price>100 AND `us_user`.`deleted_at` IS NULL AND `id` = 11</span>    res <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ID<span class="token punctuation">:</span> <span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"price>?"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"prodname"</span><span class="token punctuation">,</span> <span class="token string">"D24"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//更新多个列</span>    <span class="token comment" spellcheck="true">//根据“struct”更新属性，指挥更新非零值的字段</span>    <span class="token comment" spellcheck="true">//UPDATE `us_user` SET `updated_at`='2023-08-11 11:46:55.468',`prodname`='D22',`price`=200 WHERE `us_user`.`deleted_at` IS NULL AND `id` = 11</span>    res <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ID<span class="token punctuation">:</span> <span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> Code<span class="token punctuation">:</span> <span class="token string">"D22"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//更具map更新属性</span>    <span class="token comment" spellcheck="true">//UPDATE `us_user` SET `price`='1000',`prodname`='D33',`updated_at`='2023-08-11 11:50:13.349' WHERE `us_user`.`deleted_at` IS NULL AND `id` = 11</span>    res <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ID<span class="token punctuation">:</span> <span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token string">"1000"</span><span class="token punctuation">,</span> <span class="token string">"prodname"</span><span class="token punctuation">:</span> <span class="token string">"D33"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//更新选定字段</span>    <span class="token comment" spellcheck="true">//UPDATE `us_user` SET `price`=100,`updated_at`='2023-08-11 11:52:16.272' WHERE `us_user`.`deleted_at` IS NULL AND `id` = 11</span>    res <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ID<span class="token punctuation">:</span> <span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//SQL表达式更新</span>    <span class="token comment" spellcheck="true">//UPDATE `us_user` SET `price`=price*2+100,`updated_at`='2023-08-11 12:05:18.109' WHERE `us_user`.`deleted_at` IS NULL AND `id` = 11</span>    res <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ID<span class="token punctuation">:</span> <span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">"price*?+?"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>RowsAffected<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Error<span class="token punctuation">)</span></code></pre><h2 id="Gorm删除操作"><a href="#Gorm删除操作" class="headerlink" title="Gorm删除操作"></a>Gorm删除操作</h2><pre class=" language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NewUser<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 为软删除，将字段中"deleted_at"设为当前时间，在数据库中仍存在该调数据</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"price LIKE ?"</span><span class="token punctuation">,</span> <span class="token string">"%10%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">"prodname LIKE ?"</span><span class="token punctuation">,</span> <span class="token string">"D%"</span><span class="token punctuation">)</span></code></pre><h2 id="Gorm软删除"><a href="#Gorm软删除" class="headerlink" title="Gorm软删除"></a>Gorm软删除</h2><p>GORM提供了gorm.DeletedAt用于帮助用户实现软删拥有软删除能力的Model调用Delete时，记录不会被从数据库中真正删除。但GORM会将DeletedAt置为当前时间，并且你不能再通过正常的查询方法找到该记录。使用Unscoped可以查询到被软删的数据。</p><p>例如定义MODEL时候可以添加<code>Delete</code>字段</p><pre><code>type User struct&#123;    IDint64    Namestring gorm:&quot;default:galeone&quot;    Ageint64gorm:&quot;default:18&quot;    Deleted gorm.DeletedAt&#125;</code></pre><h2 id="使用clause-OnConflict处理数据冲突"><a href="#使用clause-OnConflict处理数据冲突" class="headerlink" title="使用clause.OnConflict处理数据冲突"></a>使用clause.OnConflict处理数据冲突</h2><pre class=" language-go"><code class="language-go">p<span class="token operator">:=</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Code<span class="token punctuation">:</span><span class="token string">"D42"</span><span class="token punctuation">,</span>ID<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">clause</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>OnConflict<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>DoNothing<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span></code></pre><h2 id="通过使用default标签为字段定义默认值"><a href="#通过使用default标签为字段定义默认值" class="headerlink" title="通过使用default标签为字段定义默认值"></a>通过使用default标签为字段定义默认值</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ID<span class="token builtin">int64</span>    Name<span class="token builtin">string</span> gorm<span class="token punctuation">:</span><span class="token string">"default:galeone"</span>    Age<span class="token builtin">int64</span>gorm<span class="token punctuation">:</span><span class="token string">"default:18"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="GORM事务"><a href="#GORM事务" class="headerlink" title="GORM事务"></a>GORM事务</h2><h3 id="Gorm提供了Begin-Commit-Rollback方法用于使用事务"><a href="#Gorm提供了Begin-Commit-Rollback方法用于使用事务" class="headerlink" title="Gorm提供了Begin,Commit,Rollback方法用于使用事务"></a>Gorm提供了<code>Begin,Commit,Rollback</code>方法用于使用事务</h3><pre class=" language-go"><code class="language-go">tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开始事务</span>    <span class="token comment" spellcheck="true">//在事务中执行的一些db操作，从这里开始应该使用的是tx而不是db</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span> <span class="token number">300</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span> <span class="token number">500</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Gorm提供了Tansaction方法用于自动提交事务，避免用户漏写Commit-Rollback"><a href="#Gorm提供了Tansaction方法用于自动提交事务，避免用户漏写Commit-Rollback" class="headerlink" title="Gorm提供了Tansaction方法用于自动提交事务，避免用户漏写Commit,Rollback"></a>Gorm提供了Tansaction方法用于自动提交事务，避免用户漏写Commit,Rollback</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span> <span class="token number">500</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> err        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Price<span class="token punctuation">:</span> <span class="token number">600</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> err        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Gorm-Hook"><a href="#Gorm-Hook" class="headerlink" title="Gorm Hook"></a>Gorm Hook</h2><p>GORM在提供了CURD的Hook能力。Hook是在创建、查询、更新、删除等操作之前、之后自动调用的函数。如果任何HOok返回错误，GORM将停止后续的操作并回滚事务。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    gorm<span class="token punctuation">.</span>Model    ID    <span class="token builtin">uint</span>   <span class="token string">`gorm:"PRIMARY KEY AUTO_INCREMENT"`</span>    Code  <span class="token builtin">string</span> <span class="token string">`gorm:"VARCHAR(20);NOT NULL;column:prodname"`</span>    Price <span class="token builtin">uint</span>   <span class="token string">`gorm:"INT;column:price"`</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>Product<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"us_user"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Product<span class="token punctuation">)</span> <span class="token function">BeforeCreate</span><span class="token punctuation">(</span>tx gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>Price <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"can not save invalid data"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Product<span class="token punctuation">)</span> <span class="token function">AfterCreate</span><span class="token punctuation">(</span>tx gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Product<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ID<span class="token punctuation">:</span> p<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> Code<span class="token punctuation">:</span> p<span class="token punctuation">.</span>Code<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>以上两个函数会自动执行</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果采用链式调用ORM时，<code>where</code>是用来拼凑SQL语句，并不会真正的执行查询操作，当调用了<code>first</code>,<code>find</code>,<code>create</code>,<code>update</code>时。真正执行了查询操作。</p><h2 id="Gorm性能提高"><a href="#Gorm性能提高" class="headerlink" title="Gorm性能提高"></a>Gorm性能提高</h2><pre class=" language-go"><code class="language-go">db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SkipDefaultTransaction<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//关闭默认事务</span>        PrepareStmt<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//缓存预编译语句</span>        Logger<span class="token punctuation">:</span> newLogger<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>对于写操作（创建、更新、删除），为了确保数据的完整性，GORM会将它们封装在事务内运行。但这会降低性能，你可以使用SkipDefaultTransaction关闭默认事务。</p><p>使用PrepareStmt缓存预编译语句可以提高后续调用的速度，本机测试提高大约35%左右。</p><h2 id="Gorm生态"><a href="#Gorm生态" class="headerlink" title="Gorm生态"></a>Gorm生态</h2><p><img src="/2023/080927216/image-20230811124209349.png" alt="image-20230811124209349"></p>]]></content>
      
      
      <categories>
          
          <category> GORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言操作MySQL</title>
      <link href="/2023/080928006.html"/>
      <url>/2023/080928006.html</url>
      
        <content type="html"><![CDATA[<p>Go语言操作MySQL</p><p>Go语言中的<code>database/sql</code>不包含数据库驱动，<code>database/sql</code>提供了保证SQL或类SQL数据库的泛用接口。使用sql包时必须注入（至少）一个数据库驱动。 参见<a href="https://link.juejin.cn/?target=http://golang.org/s/sqldrivers">golang.org&#x2F;s&#x2F;sqldriver…</a> 获取驱动列表。 更多用法示例，参见wiki页面：<a href="https://link.juejin.cn/?target=http://golang.org/s/sqlwiki">golang.org&#x2F;s&#x2F;sqlwiki</a>。</p><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><p>通过GO页面作为客户端访问数据库</p><ul><li>因为GO语言没有提供任何官方数据库驱动，所以需要安装第三方函数库。</li><li>由于在github上安装，所以需要安装git软件,必要时配置SSH插件</li></ul><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql<span class="token comment" spellcheck="true">//-u: 这是go get命令的一个标志，表示更新已有的模块或下载已有模块的新版本。</span></code></pre><h3 id="使用MySQL驱动"><a href="#使用MySQL驱动" class="headerlink" title="使用MySQL驱动"></a>使用MySQL驱动</h3><p>Open打开一个<code>driverName</code>指定的数据库驱动，<code>dataSourceName</code>指定数据源具有一定的格式连接信息字符串。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//sql.Open()中的数据库连接串格式为：`"用户名:密码@tcp(IP:端口)/数据库?charset=utf8"`</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>driverName<span class="token punctuation">,</span> dataSourceName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>DB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sql.Open()中的数据库连接串格式为："用户名:密码@tcp(IP:端口)/数据库?charset=utf8"</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:521109#Xsq@tcp(127.0.0.1:3306)/mysql?charset=utf8"</span>    <span class="token comment" spellcheck="true">//open打开一个drivername指定的数据库，datasourcename指定数据源</span>    <span class="token comment" spellcheck="true">//不会校验用户和密码是否正确，只会对dsn的格式进行检测</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打开数据库失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试连接数据库，Ping方法可检查数据源名称是否合法,账号密码是否正确。</span>    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败，请检查用户密码是否正确，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接数据库成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="初始化连接"><a href="#初始化连接" class="headerlink" title="初始化连接"></a>初始化连接</h2><h3 id="DB（数据库对象）"><a href="#DB（数据库对象）" class="headerlink" title="DB（数据库对象）"></a>DB（数据库对象）</h3><p>sql.DB类型代表了数据库,其它语言操作数据库的时候,需要创建一个连接,对于Go而言则是需要创建一个数据库类型, 它不是数据库连接,Go中的连接来自内部实现的连接池,连接的建立是惰性的,连接将会在操作的时候,由连接池创建并维护。</p><h2 id="数据库CRUD"><a href="#数据库CRUD" class="headerlink" title="数据库CRUD"></a>数据库CRUD</h2><p>DB的类型为:<code>*sql.DB</code>，有了DB之后我们就可以执行CRUD操作。Go将数据库操作分为两类：<code>Query</code>与<code>Exec</code>。两者的区别在于前者会返回结果，而后者不会。</p><ul><li><code>Query</code>表示查询，它会从数据库获取查询结果（一系列行，可能为空）。</li><li><code>Exec</code>表示执行语句，它不会返回行。</li></ul><p>此外还有两种常见的数据库操作模式：</p><ul><li><code>QueryRow</code>表示只返回一行的查询，作为<code>Query</code>的一个常见特例。</li><li><code>Prepare</code>表示准备一个需要多次使用的语句，供后续执行用。</li></ul><h3 id="建库建表语句"><a href="#建库建表语句" class="headerlink" title="建库建表语句"></a>建库建表语句</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> go_test<span class="token punctuation">;</span><span class="token keyword">use</span> go_test<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户昵称'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户年龄'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h3 id="DB-exec方法说明"><a href="#DB-exec方法说明" class="headerlink" title="DB.exec方法说明"></a>DB.exec方法说明</h3><p>插入、更新和删除操作都使用<code>Exec()</code>方法。<code>Exec</code>执行一次命令（包括查询、删除、更新、插入等），返回的<code>Result</code>是对已执行的SQL命令的总结。参数args表示query中的占位参数。</p><ul><li>插入数据后可以通过 LastInsertId() 方法获取插入数据的主键 id</li><li>通过 RowsAffected 可以获取受影响的行数</li><li>通过 Exec() 方法插入数据，返回的结果是 sql.Result 类型</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><p>需要注意的是,不同的数据库,使用的占位符不同,<code>mysql</code>采用<code>?</code>作为占位符,其余数据库占位符说明如下：</p><p><img src="/2023/080928006/image-20230809123701627.png" alt="image-20230809123701627"></p><h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">upDateRow</span><span class="token punctuation">(</span>updateuser user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"update user set age=?,name=? where id = ?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>age<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>name<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败 err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">insertData</span><span class="token punctuation">(</span>data user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO `user`(id,name,age) VALUES (?,?,?)"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> data<span class="token punctuation">.</span>id<span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">deleteData</span><span class="token punctuation">(</span>dedata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"DELETE FROM user WHERE id = ? AND name =?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>id<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="单行查询"><a href="#单行查询" class="headerlink" title="单行查询"></a>单行查询</h4><p>单行查询db.QueryRow()执行一次查询，并期望返回最多一行结果（即Row)。语法如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">QueryRow</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">*</span>Row</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">queryRow</span><span class="token punctuation">(</span>qudata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id=?"</span>    row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> qudata<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">var</span> u user    err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取数据错误, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="多行查询"><a href="#多行查询" class="headerlink" title="多行查询"></a>多行查询</h4><p>多行查询db.Query()执行一次查询，返回多行结果（即sql.Rows类型的结果集）, 迭代后者使用<code>Next()</code>方法，然后使用<code>Scan()</code>方法给对应类型变量赋值,以便取出结果,最后再把结果集关闭（释放连接）语法如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Rows<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">queryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id>? OR id&lt;?"</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="MySQL预处理"><a href="#MySQL预处理" class="headerlink" title="MySQL预处理"></a>MySQL预处理</h2><h3 id="什么是预处理"><a href="#什么是预处理" class="headerlink" title="什么是预处理"></a>什么是预处理</h3><p><strong>普通SQL语句得执行过程</strong></p><ul><li>客户端对SQL语句进行占位符替换得到完整的SQL语句。</li><li>客户端发送完整SQL语句到MySQL服务端</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端</li></ul><p><strong>预处理执行过程：</strong></p><ol><li>把SQL语句分成两部分，命令部分与数据部分。</li><li>先把命令部分发送给MySQL服务端，MySQL服务端进行SQL预处理。</li><li>然后把数据部分发送给MySQL服务端，MySQL服务端对SQL语句进行占位符替换。</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端</li></ol><h3 id="为什么要预处理"><a href="#为什么要预处理" class="headerlink" title="为什么要预处理"></a>为什么要预处理</h3><ul><li>优化MySQL服务器重复执行SQL的方法，可以提升服务器性能，提前让服务器编译，一次编译多次执行，节省后续编译的成本。</li><li>避免SQL注入问题。</li></ul><h3 id="MySQL预处理-1"><a href="#MySQL预处理-1" class="headerlink" title="MySQL预处理"></a>MySQL预处理</h3><p><code>Prepare</code>方法会先将sql语句发送给<code>MySQL</code>服务端，返回一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Prepare</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Stmt<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">prepareQueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id > ?"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"预处理失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="增删改预处理"><a href="#增删改预处理" class="headerlink" title="增删改预处理"></a>增删改预处理</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">prepareInsertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO user(id,name,age) VALUES(?,?,?)"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"预处理失败, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        id <span class="token operator">:=</span> <span class="token number">20</span> <span class="token operator">+</span> i        name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"批量处理成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务：一个最小的不可再分的工作单元；通常一个事务对应一个完整的业务(例如银行账户转账业务，该业务就是一个最小的工作单元)，同时这个完整的业务需要执行多次的<code>DML(insert、update、delete)</code>语句共同联合完成。A转账给B，这里面就需要执行两次update操作。 在<code>MySQL</code>中只有使用了<code>Innodb</code>数据库引擎的数据库或表才支持事务。事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。</p><h3 id="事务得ACID"><a href="#事务得ACID" class="headerlink" title="事务得ACID"></a>事务得ACID</h3><p>通常事务必须满足4个条件<code>（ACID）</code>：原子性（<code>Atomicity</code>，或称不可分割性）、一致性（<code>Consistency</code>）、隔离性（<code>Isolation</code>，又称独立性）、持久性（<code>Durability</code>）。</p><p><img src="/2023/080928006/image-20230809161935363.png" alt="image-20230809161935363"></p><h3 id="事务相关方法"><a href="#事务相关方法" class="headerlink" title="事务相关方法"></a>事务相关方法</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//开始事务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Tx<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//提交事务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>Tx<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token comment" spellcheck="true">//回滚事务</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>Tx<span class="token punctuation">)</span> <span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">transDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> tx <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务开启失败，err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"UPDATE user SET age=age+? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">=</span> <span class="token string">"UPDATE user SET age=age-? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务提交失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据更新成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"database/sql"</span>    <span class="token string">"fmt"</span>    <span class="token comment" spellcheck="true">//执行driver.go文件中的init(),向"database/sql"注册一个mysql的驱动</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>    <span class="token comment" spellcheck="true">//import 下划线（如：import _ github/demo）的作用：</span>    <span class="token comment" spellcheck="true">//当导入一个包时，该包下的文件里所有init()函数都会被执行，然而，</span>    <span class="token comment" spellcheck="true">//有些时候我们并不需要把整个包都导入进来，仅仅是是希望它执行init()函数而已。</span>    <span class="token comment" spellcheck="true">//这个时候就可以使用 import _ 引用该包。</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB <span class="token comment" spellcheck="true">//定义一个全局对象</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sql.Open()中的数据库连接串格式为："用户名:密码@tcp(IP:端口)/数据库?charset=utf8"</span>    dsn <span class="token operator">:=</span> <span class="token string">"root:521109#Xsq@tcp(127.0.0.1:3306)/go_test?charset=utf8"</span>    <span class="token comment" spellcheck="true">//open打开一个drivername指定的数据库，datasourcename指定数据源</span>    <span class="token comment" spellcheck="true">//不会校验用户和密码是否正确，只会对dsn的格式进行检测</span>    db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打开数据库失败，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试连接数据库，Ping方法可检查数据源名称是否合法,账号密码是否正确。</span>    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败，请检查用户密码是否正确，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接数据库成功"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个和数据库表结构相同的结构体</span><span class="token keyword">type</span> user <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id   <span class="token builtin">int</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    err <span class="token operator">:=</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"初始化数据库失败err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// updateuser := user&amp;#123;</span>    <span class="token comment" spellcheck="true">// id:   7,</span>    <span class="token comment" spellcheck="true">// name: "蜡笔小新",</span>    <span class="token comment" spellcheck="true">// age:  98,</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// insertdata := user&amp;#123;</span>    <span class="token comment" spellcheck="true">// id:   7,</span>    <span class="token comment" spellcheck="true">// name: "王涛",</span>    <span class="token comment" spellcheck="true">// age:  23,</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// insertdata = user&amp;#123;</span>    <span class="token comment" spellcheck="true">// id:   8,</span>    <span class="token comment" spellcheck="true">// name: "肖素琴",</span>    <span class="token comment" spellcheck="true">// age:  25,</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// insertData(insertdata)</span>    <span class="token comment" spellcheck="true">// insertData(insertdata)</span>    <span class="token comment" spellcheck="true">// upDateRow(updateuser)</span>    <span class="token comment" spellcheck="true">// queryRow(insertdata)</span>    <span class="token comment" spellcheck="true">// queryRows()</span>    <span class="token function">transDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">upDateRow</span><span class="token punctuation">(</span>updateuser user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"update user set age=?,name=? where id = ?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>age<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>name<span class="token punctuation">,</span> updateuser<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败 err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"更新成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">insertData</span><span class="token punctuation">(</span>data user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO `user`(id,name,age) VALUES (?,?,?)"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> data<span class="token punctuation">.</span>id<span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"插入成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">deleteData</span><span class="token punctuation">(</span>dedata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"DELETE FROM user WHERE id = ? AND name =?"</span>    ret<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>id<span class="token punctuation">,</span> dedata<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除数据失败，err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> ret<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取影响行数失败:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"删除成功，影响行数为 n:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">queryRow</span><span class="token punctuation">(</span>qudata user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id=?"</span>    row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> qudata<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">var</span> u user    err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"获取数据错误, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">queryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id>? OR id&lt;?"</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">prepareQueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"SELECT id,name,age FROM user WHERE id > ?"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"预处理失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查询失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> u user        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scan失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询数据成功%#v\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">prepareInsertData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"INSERT INTO user(id,name,age) VALUES(?,?,?)"</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"预处理失败, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        id <span class="token operator">:=</span> <span class="token number">20</span> <span class="token operator">+</span> i        name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"批量处理成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">transDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> tx <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务开启失败，err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">:=</span> <span class="token string">"UPDATE user SET age=age+? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sqlstr <span class="token operator">=</span> <span class="token string">"UPDATE user SET age=age-? WHERE id=?"</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sql1执行失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务提交失败,err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"数据更新成功"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC框架分层设计</title>
      <link href="/2023/080864291.html"/>
      <url>/2023/080864291.html</url>
      
        <content type="html"><![CDATA[<h2 id="远程函数调用-RPC-remote-procedure-calls"><a href="#远程函数调用-RPC-remote-procedure-calls" class="headerlink" title="远程函数调用(RPC - remote procedure calls)"></a>远程函数调用(RPC - remote procedure calls)</h2><p><img src="/2023/080864291/image-20230808163931882.png" alt="image-20230808163931882"></p><h3 id="RPC-需要解决的问题"><a href="#RPC-需要解决的问题" class="headerlink" title="RPC 需要解决的问题"></a>RPC 需要解决的问题</h3><ol><li>函数映射</li><li>数据转换成字节流</li><li>网络传输</li></ol><h2 id="RPC概念模型"><a href="#RPC概念模型" class="headerlink" title="RPC概念模型"></a>RPC概念模型</h2><p><img src="/2023/080864291/image-20230808164244545.png" alt="image-20230808164244545"></p><h2 id="一次RPC的完整过程"><a href="#一次RPC的完整过程" class="headerlink" title="一次RPC的完整过程"></a>一次RPC的完整过程</h2><p>IDL文件：通过一种中立的方式来描述接口，使得在不同平台上运行的对象和用不同语言编写的程序可以相互通信</p><p>生成代码：通过编译器工具把IDL文件转换成语言对应的静态库</p><p>编解码：从内存中表示到字节序列的转换成为编码，反之为解码，也常叫做序列化和反序列化</p><p>通信协议：规范了数据在网络中的传输内容和格式，出必须的请求、响应数据外，通常还会在包含额外的元数据</p><p>网络传输：通常基于成熟的网络库TCP&#x2F;UDP传输</p><h2 id="高性能RPC框架所满足的条件"><a href="#高性能RPC框架所满足的条件" class="headerlink" title="高性能RPC框架所满足的条件"></a>高性能RPC框架所满足的条件</h2><ol><li>框架通过中间件来注入各种服务治理策略，保障服务的稳定性</li><li>通过提供合理的默认配置和方便的命令行工具可以提升框架的易用性</li><li>框架应当提供丰富的扩展点，例如核心的传输层和协议层</li><li>观测性除了传统的Log、Metric和Tracing之外，内置状态暴露服务也很有必要</li><li>性能可以从多个层面去优化，例如选择高性能的编解码协议和网络库</li></ol>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 框架设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt带参的槽函数传递</title>
      <link href="/2023/08087724.html"/>
      <url>/2023/08087724.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用QSignalMapper实现无参信号到有参信号的传递"><a href="#使用QSignalMapper实现无参信号到有参信号的传递" class="headerlink" title="使用QSignalMapper实现无参信号到有参信号的传递"></a>使用QSignalMapper实现无参信号到有参信号的传递</h2><p>QSignalMapper类将来自于一些有标识的发送者的signal连接在一起。</p><p>该类收集一组无参的signal，然后以<a href="https://so.csdn.net/so/search?q=%E6%95%B4%E5%9E%8B&spm=1001.2101.3001.7020">整型</a>数、或字符串、或widget参数为参数重新将这些signal再次发送出去，而这里的整型数、字符串和widget参数就是原本发送该signal对象的标识信息。</p><p>QSignalMapper支持将特定的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>或整型数对应到特定的对象上，这是通过setMapping()做到的。该特定对象的signal可以被连接到QSignalMapper的map() slot，而map()会发射mapped() signal，注意这里的mapped() signal是带参数的，而参数类型就是原本发送最初signal的特定对象的标识信息，即整型数或字符串等。使用removeMappings()可以删除对应关系。</p><p>改类支持四种在参数的传递，在实际使用中，我们更喜欢通过QObject来传递参数，因为这样相当于可以自定义新的数据类型，实现都数据的封装，从而实现对槽函数大量参数的传递</p><p><img src="/2023/08087724/image-20230808132808679.png" alt="image-20230808132808679"></p><h3 id="定义自定义类型数据TestInt，用于传递新类型的数据"><a href="#定义自定义类型数据TestInt，用于传递新类型的数据" class="headerlink" title="定义自定义类型数据TestInt，用于传递新类型的数据"></a>定义自定义类型数据TestInt，用于传递新类型的数据</h3><pre class=" language-c++"><code class="language-c++">#ifndef TESTINT_H#define TESTINT_H#include <QObject>#include<QTextEdit>class TestInt : public QObject&#123;    Q_OBJECTpublic:    explicit TestInt(QObject *parent = nullptr);    TestInt(QTextEdit* edit,const int& n);    int index;    QTextEdit* textEdit;signals:&#125;;#endif // TESTINT_H</code></pre><pre class=" language-c++"><code class="language-c++">#include "testint.h"TestInt::TestInt(QObject *parent) : QObject(parent),index(0),textEdit(nullptr)&#123;&#125;TestInt::TestInt(QTextEdit *edit, const int &n)&#123;    textEdit=edit;    index=n;&#125;</code></pre><h3 id="通过QSignalMapper带参实现通信"><a href="#通过QSignalMapper带参实现通信" class="headerlink" title="通过QSignalMapper带参实现通信"></a>通过QSignalMapper带参实现通信</h3><pre class=" language-c++"><code class="language-c++">#ifndef WIDGET_H#define WIDGET_H#include <QWidget>#include<QTextEdit>#include<QVector>QT_BEGIN_NAMESPACEnamespace Ui &#123; class Widget; &#125;QT_END_NAMESPACEclass Widget : public QWidget&#123;    Q_OBJECTpublic:    Widget(QWidget *parent = nullptr);    ~Widget();protected slots:    void myslots(QObject* edit);signals:private:    Ui::Widget *ui;    QVector<QVector<QString>>res50;    QVector<QString>title;&#125;;#endif // WIDGET_H</code></pre><pre class=" language-C++"><code class="language-C++">#include "widget.h"#include "ui_widget.h"#include<QDebug>#include<QPushButton>#include<QVBoxLayout>#include<QTextEdit>#include<QSignalMapper>#include"testint.h"Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui->setupUi(this);    this->resize(500,300);    this->setWindowTitle(tr("推理结果"));    title=QVector<QString>&#123;"刀具", "刀具名称", "刀具编号", "刃数"&#125;;    res50=QVector<QVector<QString>>&#123;        &#123;"50-T01", "铣刀D14R2", "通用", " 4"&#125;,        &#123;"50 - T02", "D10R5球头铣刀"," 2B151 / 1424"," 4"&#125;,        &#123;"50 - T03"," 铣刀D8R4", "2B151 / 1423","4"&#125;&#125;;    QSignalMapper* signalmapper=new QSignalMapper(this);    QVBoxLayout* vLayout = new QVBoxLayout();    QPushButton* btn1 = new QPushButton("D14R2铣刀");  vLayout->addWidget(btn1);    QPushButton* btn2 = new QPushButton("D10R5铣刀");  vLayout->addWidget(btn2);    QPushButton* btn3 = new QPushButton("D8R4铣刀");  vLayout->addWidget(btn3);    QTextEdit* txtEdit = new QTextEdit();    txtEdit->setFont(QFont(tr("Times New Roman"), 10, QFont::Bold));    vLayout->addWidget(txtEdit);    this->setLayout(vLayout);    connect(btn1,&QPushButton::clicked,signalmapper,static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));    connect(btn2,&QPushButton::clicked,signalmapper,static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));    connect(btn3,&QPushButton::clicked,signalmapper,static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));    signalmapper->setMapping(btn1,(QObject*)(new TestInt(txtEdit,0)));    signalmapper->setMapping(btn2,(QObject*)(new TestInt(txtEdit,1)));    signalmapper->setMapping(btn3,(QObject*)(new TestInt(txtEdit,2)));    connect(signalmapper,static_cast<void (QSignalMapper::*)(QObject*)>(&QSignalMapper::mapped),this,&Widget::myslots);&#125;Widget::~Widget()&#123;    delete ui;&#125;void Widget::myslots(QObject* edit)&#123;    TestInt* obj=(TestInt*)edit;    obj->textEdit->clear();    for(int i=0;i<4;i++)&#123;        QString temp=title[i]+":\t"+res50[obj->index][i];        obj->textEdit->append(temp);    &#125;&#125;</code></pre><p><img src="/2023/08087724/image-20230808133624417.png" alt="image-20230808133624417"></p><p>通过点击随意一个按钮，实现数据的传递。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与槽函数 </tag>
            
            <tag> QSignalMapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高质量编程及编程规范</title>
      <link href="/2023/080737510.html"/>
      <url>/2023/080737510.html</url>
      
        <content type="html"><![CDATA[<p>高质量编程</p><h3 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h3><p>gofmt go语言官方提供的工具，能自动格式化go语言代码为官方统一风格</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><img src="/2023/080737510/725c6dbcc4c19f62fa90debc98915d2d.png" alt="725c6dbcc4c19f62fa90debc98915d2d"></p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p><img src="/2023/080737510/03fc7271e5b871203a0bad4b2a58518d.png" alt="03fc7271e5b871203a0bad4b2a58518d"></p><p><img src="/2023/080737510/656bcfafdcb57f2f4b86309d53b354e9.png" alt="656bcfafdcb57f2f4b86309d53b354e9"></p><p><img src="/2023/080737510/de8c9d70f573cb6555b4a2377325d94c.png" alt="de8c9d70f573cb6555b4a2377325d94c"></p><h3 id="错误处理规范"><a href="#错误处理规范" class="headerlink" title="错误处理规范"></a>错误处理规范</h3><p><img src="/2023/080737510/26986ec789c8bd0356b90de09d7d8c48.png" alt="26986ec789c8bd0356b90de09d7d8c48"></p><p><img src="/2023/080737510/1e3f59db46d84a0ca009fff4706b6d43.png" alt="1e3f59db46d84a0ca009fff4706b6d43"></p><p><img src="/2023/080737510/b127e8282b86de897775ca339f2b6488.png" alt="b127e8282b86de897775ca339f2b6488"></p><p><img src="/2023/080737510/702171a4bd9456442bbbe0d8460b3359.png" alt="702171a4bd9456442bbbe0d8460b3359"></p><p><img src="/2023/080737510/d4502b350023254b8399747a1476c293.png" alt="d4502b350023254b8399747a1476c293"></p><p><img src="/2023/080737510/b5619f3e521a1ca64fedbfe3bb9adaf9.png" alt="b5619f3e521a1ca64fedbfe3bb9adaf9"></p><p><img src="/2023/080737510/2fba950aa600325bee87c40e7df585c0.png" alt="2fba950aa600325bee87c40e7df585c0"></p><h2 id="性能调优实战"><a href="#性能调优实战" class="headerlink" title="性能调优实战"></a>性能调优实战</h2><p>通过使用Benchmark工具进行性能测试，关键行步骤为：</p><ul><li>IDE在寻找测试代码时的关键一步是寻找以<code>_test.go</code>结尾的文件，</li><li>在该文件中寻找一个Benchmark开头的函数作为测试函数</li></ul><h3 id="Slice（这与C-的vector很像）Map使用建议"><a href="#Slice（这与C-的vector很像）Map使用建议" class="headerlink" title="Slice（这与C++的vector很像）Map使用建议"></a>Slice（这与C++的vector很像）Map使用建议</h3><p>尽可能在使用make()初始化切片时提供容量信息</p><h3 id="字符串的处理上"><a href="#字符串的处理上" class="headerlink" title="字符串的处理上"></a>字符串的处理上</h3><p>在对字符串进行重复设计时，采用<code>strings.Builder</code>方法会获得更好的内存操作</p><pre class=" language-golang"><code class="language-golang">// 字符串处理func Plus(n int, str string) string &#123;    s := ""    for i := 0; i < n; i++ &#123;        s += str    &#125;    return s&#125;func StrBuilder(n int, str string) string &#123;    var builder strings.Builder    for i := 0; i < n; i++ &#123;        builder.WriteString(str)    &#125;    return builder.String()&#125;func ByteBuffer(n int, str string) string &#123;    buf := new(bytes.Buffer)    for i := 0; i < n; i++ &#123;        buf.WriteString(str)    &#125;    return buf.String()&#125;func BenchmarkPlus(b *testing.B) &#123;    for i := 0; i < b.N; i++ &#123;        Plus(10, "b")    &#125;&#125;func BenchmarkBuilder(b *testing.B) &#123;    for i := 0; i < b.N; i++ &#123;        StrBuilder(10, "b")    &#125;&#125;func BenchmarkByteBuffer(b *testing.B) &#123;    for i := 0; i < b.N; i++ &#123;        ByteBuffer(10, "b")    &#125;&#125;</code></pre><p><img src="/2023/080737510/a5ab679b9a86800009b29c6ea986bbe9.png" alt="a5ab679b9a86800009b29c6ea986bbe9"></p><h3 id="学会利用空结构体"><a href="#学会利用空结构体" class="headerlink" title="学会利用空结构体"></a>学会利用空结构体</h3><p>使用空结构体节省内存，空结构体struct{}实例不占据任何的内存空间</p><p>可作为各种场景下的占位符使用：节省资源，空结构体本身具有很强的语义，即这里不需要任何值，仅作为占位符</p><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>atomic包要比mutex的效率更好</p><h2 id="性能优化分析工具PPROF"><a href="#性能优化分析工具PPROF" class="headerlink" title="性能优化分析工具PPROF"></a>性能优化分析工具PPROF</h2><p><img src="/2023/080737510/20f3646f1dfb46f44e24da95a3a28044.png" alt="20f3646f1dfb46f44e24da95a3a28044"></p><p><img src="/2023/080737510/e2b04634ef62790a305a7ce7e00f89dd.png" alt="e2b04634ef62790a305a7ce7e00f89dd"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pprof 是 Go 语言的性能剖析工具，用于分析和优化 Go 程序的性能。它是 Go 标准库中的一个子命令，可以与 Go 工具链一起使用。pprof 支持多种类型的剖析数据，并可以生成交互式的可视化报告，帮助开发人员找出程序中的性能瓶颈。</p><p>&#x3D;&#x3D;$pprof 有两种使用方式$&#x3D;&#x3D;：</p><p>导出方式：通过在程序中调用 net&#x2F;http&#x2F;pprof 包中的函数，可以在程序运行时导出剖析数据，并使用浏览器查看可视化报告。</p><p>命令行方式：通过在程序运行后使用 go tool pprof 命令，导入已经生成的剖析数据文件，并查看分析结果。</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li>直接通过访问<code>http://localhost:6060/debug/pprof/</code>浏览器会得到一个可视化报告，其中会有相关的性能分析报告，但可视化效果较差</li><li>通过在powershell中使用<code>go tool pprof http://localhost:6060/debug/pprof/profile</code>命令可以查看CPU的使用情况，常用的命令有<code>top，list</code>等，使用<code>web</code>命令可以更加清晰的查看CPU的使用情况，但这需要下载对应的<code>graphviz</code>,下载连接为<a href="https://">https://graphviz.gitlab.io/download/</a></li><li><code>go tool pprof http://localhost:6060/debug/pprof/heap</code>命令可以查看内存使用状况，同样也可以通过上述方式进行问题定位</li><li>powershell中通过使用<code>$env:GODEBUG = &quot;gctrace=1&quot;; .\go-pprof-practice.exe | Select-String &quot;gc&quot;</code>命令查看频繁的内存回收，与其他操作系统不同的是调用<code>GODEBUG = &quot;gctrace=1&quot;</code>命令需要使用env标注，不可以直接使用grep进行筛查对应的命令为Select-string</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/allocs</code>查看内存分配情况</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/goroutline</code>可以查看协程泄漏</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/mutex</code>可以查看锁的竞争</li><li>通过使用<code>go tool pprof http://localhost:6060/debug/pprof/block</code>可以查看阻塞情况</li><li>为了方便访问我们可以使用<code>go tool pprof -http=:8080 http://localhost:6060/debug/pprof/goroutine</code>在浏览器页面中进行访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2023/080735944.html"/>
      <url>/2023/080735944.html</url>
      
        <content type="html"><![CDATA[<p>再谈HTTP协议</p><h2 id="HTTP协议是什么"><a href="#HTTP协议是什么" class="headerlink" title="HTTP协议是什么"></a>HTTP协议是什么</h2><p>顾名思义：HTTP为超文本传输协议</p><p>HTTP（HyperText Transfer Protocol）被称为超文本传输协议，是因为它最初设计用于在互联网上传输超文本（hypertext）和超媒体（hypermedia）资源。超文本是一种非线性的、链接到其他相关文本的文本，而超媒体则包含文本之外的其他多媒体元素，如图像、音频和视频等。</p><h3 id="有如下特点："><a href="#有如下特点：" class="headerlink" title="有如下特点："></a>有如下特点：</h3><ul><li>请求-响应模型：客户端发送一个HTTP请求给服务器，请求某个资源（例如网页或图像），服务器接收请求后处理，并返回HTTP响应，其中包含请求的资源数据。</li><li>URI:URI是HTTP中用于标识资源的唯一地址。它通常由URL（Uniform Resource Locator）或URN（Uniform Resource Name）组成。URL是URI的一种常见类型，用于指定资源的位置（如<a href="http://example.com/resource%EF%BC%89%E3%80%82">http://example.com/resource）。</a></li><li>请求方法：HTTP定义了一些常用的请求方法，用于指示请求的操作类型。常见的方法有：<code>GET</code>:请求获取指定资源，<code>POST</code>向服务器提交数据，用于创建新的资源，<code>PUT</code>向服务器上传数据，用于更新指定资源,<code>DELETE</code>:请求删除指定资源.<code>HEAD</code>类似于GET请求，但只返回资源的头部信息，不返回实际数据</li><li>请求头和响应头：HTTP请求和响应都包含一系列头部信息，用于传递关于请求或响应的元数据。头部信息包含了各种标识、控制、认证和缓存等信息。这其中也包含传输内容所占的实际字节大小，该信息在包的处理上很重要</li><li>状态码：HTTP响应包含一个三位数字的状态码，用于指示请求的处理结果。常见的状态码有：200 OK：请求成功，服务器返回资源。404 Not Found：请求的资源不存在。500 Internal Server Error：服务器内部错误。</li><li>Cookie:Cokkie是一种在客户端存储数据的机制，用于在不同的HTTP请求之间维持状态，服务器可以在响应中发送Cookie客户端，客户端将其存储，并在后续的请求中发送回服务器</li><li>缓存：HTTP支持缓存机制，允许客户端在本地存储资源的副本，以减少对服务器的请求次数，提高性能和效率。</li><li>HTTPS:HTTPS（HTTP Secure）是HTTP的安全版本，通过使用加密技术（如SSL或TLS）来保护数据的传输安全。它在HTTP和TCP之间添加了一层安全通道，确保数据在传输过程中被加密。</li></ul><h2 id="协议里面有什么"><a href="#协议里面有什么" class="headerlink" title="协议里面有什么"></a>协议里面有什么</h2><p><img src="/2023/080735944/505184f180571ea14ad64843b9ca9e0e.png" alt="505184f180571ea14ad64843b9ca9e0e"></p><h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p><img src="/2023/080735944/1ea0dde4c49ffcf081f5695d59a56aa6.png" alt="1ea0dde4c49ffcf081f5695d59a56aa6"></p><h2 id="网络分层设计"><a href="#网络分层设计" class="headerlink" title="网络分层设计"></a>网络分层设计</h2><p><img src="/2023/080735944/16422a7dcbc36ce7a9501426096eb53f.png" alt="16422a7dcbc36ce7a9501426096eb53f"></p><p><img src="/2023/080735944/7c76a016af9c4e5d403d5be7908aef05.png" alt="7c76a016af9c4e5d403d5be7908aef05"></p><h3 id="路由层特点"><a href="#路由层特点" class="headerlink" title="路由层特点"></a>路由层特点</h3><p>路由层是指在服务端的一部分，用于根据客户端请求的路径来决定如何处理请求并响应相应的资源或操作，路由层通常是Web框架或者Web服务器的组件之一，负责解析请求的URL，并将其与相应的处理程序（Handler）或控制器（Controller）关联起来，从而执行相应的业务逻辑。其支持以下几种功能：</p><p>路由匹配：路由层会根据请求的URL路径，将请求映射到与之对应的处理程序。路由可以支持静态路径匹配（如&#x2F;users）和参数化路径匹配（如&#x2F;users&#x2F;{id}），后者可以捕获URL中的变量部分，并将其作为参数传递给处理程序。</p><p>HTTP方法：路由层支持指定HTTP请求方法（GET、POST、PUT、DELETE等），从而使不同的请求方法映射到不同的处理程序，实现对资源的不同操作。</p><p>中间件：路由层通常支持中间件的使用，中间件是一种类似拦截器的概念，用于在请求处理前后执行一些共用的逻辑，比如身份验证、日志记录、跨域处理等。</p><p>路由组：一些框架允许将多个相关的路由规则组织成路由组，从而使代码更加清晰和结构化。</p><p>路由的实现上可以通过map表实现，但这一类查找上还是不太方便</p><p>通过前缀匹配树(类似字典树)的方式可以快速的查找需要的路由</p><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><h3 id="1-为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。"><a href="#1-为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。" class="headerlink" title="1.为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。"></a>1.为什么HTTP框架做要分层设计？分层设计有哪些优势与劣势。</h3><p>&#x3D;&#x3D;优势：&#x3D;&#x3D;</p><ul><li>模块化和可维护性：分层设计将系统拆分为多个模块，每个模块专注于特定的功能。</li><li>可重用性：每个层级都被设计为独立的模块，可以在不同的应用场景中重复使用。</li><li>灵活性：由于各个层级相互独立，更容易对系统进行扩展或改进。</li><li>安全性：分层设计有助于隔离不同层级的功能，从而降低出现安全漏洞的风险</li></ul><p>&#x3D;&#x3D;劣势：&#x3D;&#x3D;</p><ul><li>性能损失：每个层级都需要处理传输的数据，并进行相应的处理。这可能导致一定的性能损失，特别是在处理大量数据或请求时。</li><li>复杂性：分层设计可能增加系统的复杂性。</li><li>网络开销：在分布式系统中，由于数据需要在不同层级之间传输，可能会增加网络开销，特别是在不同的物理位置之间。</li></ul><h3 id="2-现有开源社区HTTP框架有哪些优势与不足。"><a href="#2-现有开源社区HTTP框架有哪些优势与不足。" class="headerlink" title="2.现有开源社区HTTP框架有哪些优势与不足。"></a>2.现有开源社区HTTP框架有哪些优势与不足。</h3><p>Go语言中的现有的HTTP框架有以下几种</p><ol><li>net&#x2F;http:Go语言标准库中包含了一个简单但功能强大的HTTP包，可以用来构建基本的HTTP服务器和客户端。虽然不是框架，但足够处理许多HTTP任务，特别适合简单的Web应用。</li><li>Gin:Gin是一个快速而轻量级的HTTP框架，具有出色的性能。它提供了丰富的中间件支持，可用于快速构建高性能的Web应用程序和API。</li><li>Echo:Echo是另一个快速和轻量级的HTTP框架，类似于Gin，但更加简单和易于上手。</li><li>Iris:Iris是一个功能丰富的HTTP框架，提供了大量的工具和功能，用于构建复杂的Web应用程序。</li><li>Beego:Beego是一个全功能的Web框架，提供了许多内置组件和工具，用于构建大型的Web应用程序。</li><li>Chi:Chi是一个轻量级的、具有高性能的HTTP路由器。虽然不是完整的框架，但它提供了出色的路由功能，适用于构建自定义的HTTP服务。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言进阶与依赖管理</title>
      <link href="/2023/080736829.html"/>
      <url>/2023/080736829.html</url>
      
        <content type="html"><![CDATA[<h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p><img src="/2023/080736829/4f01606b98ffef9af3c5b7ac1e9543d8.png" alt="4f01606b98ffef9af3c5b7ac1e9543d8"></p><h2 id="线程与协程"><a href="#线程与协程" class="headerlink" title="线程与协程"></a>线程与协程</h2><p><img src="/2023/080736829/d88e1d1d11a3bfb68609b839357f9209.png" alt="d88e1d1d11a3bfb68609b839357f9209"></p><p>Go语言中可以通过go 开启一个协程，下述代码中的协程开启的写作方式通过C++中的Lambda表达式很像</p><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "time")func main() &#123;    HelloGoRoutine()&#125;func hello(i int) &#123;    fmt.Println("hello goroutine:" + fmt.Sprint(i))&#125;func HelloGoRoutine() &#123;    for i := 0; i < 5; i++ &#123;        go func(j int) &#123;            hello(j)        &#125;(i)    &#125;    time.Sleep(time.Second)&#125;</code></pre><p><img src="/2023/080736829/ab1dd80b7dc19188488668eebd0a09ed.png" alt="ab1dd80b7dc19188488668eebd0a09ed"></p><h2 id="消息通信"><a href="#消息通信" class="headerlink" title="消息通信"></a>消息通信</h2><p><img src="/2023/080736829/e329c79dc6a028a939a9b5564f2acc3c.png" alt="e329c79dc6a028a939a9b5564f2acc3c"></p><p><strong>channel 通过make来进行创建</strong></p><p><img src="/2023/080736829/6faefb0b1146b43fcfb8c3c5ace32eca.png" alt="6faefb0b1146b43fcfb8c3c5ace32eca"></p><h3 id="消息队列通信"><a href="#消息队列通信" class="headerlink" title="消息队列通信"></a>消息队列通信</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt")func main() &#123;    CalSquare()&#125;func CalSquare() &#123;    src := make(chan int)    dest := make(chan int, 3)    go func() &#123;        defer close(src)        for i := 0; i < 10; i++ &#123;            src <- i        &#125;    &#125;()    go func() &#123;        defer close(dest)        for i := range src &#123;            dest <- i * i        &#125;    &#125;()    for i := range dest &#123;        fmt.Println(i)    &#125;&#125;</code></pre><p><img src="/2023/080736829/6a364801d2be7363b5d902f0115387b8.png" alt="6a364801d2be7363b5d902f0115387b8"></p><h3 id="共享内存通信"><a href="#共享内存通信" class="headerlink" title="共享内存通信"></a>共享内存通信</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "sync"    //"time")var (    x    int64    lock sync.Mutex)func main() &#123;    add()&#125;func addWithLock() &#123;    for i := 0; i < 2000; i++ &#123;        lock.Lock()        x += 1        lock.Unlock()    &#125;&#125;func addWithoutLock() &#123;    for i := 0; i < 2000; i++ &#123;        x += 1    &#125;&#125;func add() &#123;    x = 0    var wg sync.WaitGroup    wg.Add(5)    for i := 0; i < 5; i++ &#123;        go func() &#123;            defer wg.Done()            addWithoutLock()        &#125;()    &#125;    wg.Wait()    //time.Sleep(time.Second)    fmt.Println("WithoutLock:", x)    var wg1 sync.WaitGroup    wg1.Add(5)    x = 0    for i := 0; i < 5; i++ &#123;        go func() &#123;            defer wg1.Done()            addWithLock()        &#125;()    &#125;    wg1.Wait()    //time.Sleep(time.Second)    fmt.Println("WithLock:", x)&#125;</code></pre><p><img src="/2023/080736829/e724de2e5e780233acd807118a4044a3.png" alt="e724de2e5e780233acd807118a4044a3"></p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p>bin 项目编译的二进制文件</p><p>pkg 项目编译的中间产物，加速编译</p><p>src 项目源码 项目代码直接依赖src下的代码</p><p>GOPATH 弊端：无法实现package的多版本控制</p><h3 id="GoVendor"><a href="#GoVendor" class="headerlink" title="GoVendor"></a>GoVendor</h3><p>项目目录下增加govender文件，所有依赖包副本形式放在$ProjectRoot&#x2F;vendor</p><p>依赖寻址方式：vendor&#x3D;&gt;GOPATH</p><p>通过每个项目引入一份依赖的副本，解决了多个项目需要同一个package依赖的冲突问题</p><h3 id="GoModule"><a href="#GoModule" class="headerlink" title="GoModule"></a>GoModule</h3><p>通过go.mod文件管理依赖包版本</p><p>通过go get&#x2F;go mod 指令工具管理依赖包</p><p><img src="/2023/080736829/db4029b4a0a32210de4e185841060d65.png" alt="db4029b4a0a32210de4e185841060d65"></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><img src="/2023/080736829/31f408ceb006fe08a34af10389d656ad.png" alt="31f408ceb006fe08a34af10389d656ad"></p><p><img src="/2023/080736829/681331c451405ed9e23d669a1e5a0dbb.png" alt="681331c451405ed9e23d669a1e5a0dbb"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>回归测试</p><p>集成测试</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><img src="/2023/080736829/7547969fb8089dec9c71f3e56c177d13.png" alt="7547969fb8089dec9c71f3e56c177d13"></p><p>&#x3D;&#x3D;<strong>单元测试规则：</strong>&#x3D;&#x3D;</p><ul><li>所有测试文件以_test.go结尾</li><li>func TestXxx(*Testing.T)</li><li>初始化逻辑放到TestMain中</li></ul><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p><img src="/2023/080736829/739cae0a1a4d2ffb8230fd71bfda9e68-1691420473372-13.png" alt="739cae0a1a4d2ffb8230fd71bfda9e68"></p><h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><p><img src="/2023/080736829/a150a547309a73572b3fa05e709b3f75.png" alt="a150a547309a73572b3fa05e709b3f75"></p><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><p><img src="/2023/080736829/48abbddc66ed2c4881a0480175904511.png" alt="48abbddc66ed2c4881a0480175904511"></p><p>数据层：数据model，外部数据的增删改查</p><p>逻辑层：业务entity，处理核心业务逻辑输出</p><p>视图层：视图view,处理何外部的交互逻辑</p><h3 id="组件工具"><a href="#组件工具" class="headerlink" title="组件工具"></a>组件工具</h3><p><img src="/2023/080736829/137351b8e6524a74075974b75ec14e56.png" alt="137351b8e6524a74075974b75ec14e56"></p><h2 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h2><ul><li><p>展示话题和回帖列表</p></li><li><p>暂不考虑前端页面实现，仅仅实现一个本地web服务</p></li><li><p>话题和回帖数据用文件存储</p><p>课后需要实现的内容为 支持发布帖子，本地id生成需要保证不重复，唯一性 append文件，更新索引</p></li></ul><h2 id="组件工具-1"><a href="#组件工具-1" class="headerlink" title="组件工具"></a>组件工具</h2><p>针对web服务，采用Go中已有的Gin框架实现，Gin 是一个用于构建 Web 应用程序和 API 的 Go 语言框架。它提供了高性能、易用的路由、中间件和其他功能，使得开发 Web 服务变得更加简单和高效。 Gin 是一个轻量级的框架，旨在快速地处理 HTTP 请求和响应。它的设计目标是提供最小的内存占用和高度优化的性能，因此在处理高并发的情况下表现出色。如果要使用的话需要import “github.com&#x2F;gin-gonic&#x2F;gin”</p><h2 id="GitHub知识"><a href="#GitHub知识" class="headerlink" title="GitHub知识"></a>GitHub知识</h2><p>针对课程源码中的GitHub库的使用上，有一些小的知识点，需要花时间去了解，对于源码中，为什么如何使用自己的GitHub包呢，首先，我们需要对go.mod中的module进行重新设置，需要更改成自己的GitHub的库地址例如下面这样： <code>module github.com/Mrmengqiushisan/go_test</code>，下一步需要通过将远端GitHub上的库进行发布并附带标签，这样我们在本地就可以随意访问我们自己的GitHub包了，例如这样<code>import &quot;github.com/Mrmengqiushisan/go_test/repository&quot;</code></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>想要实现整个功能，我们需要对该项目的结构进行分层，抽象模型的考虑上，可以分为两个：post,topic,通过两个结构体可以很好的实现，对于这两个类的如何想要实现单例模式的话，C++角度需要利用语法的机制做很多调整，但对于Go语言来说通过<code>postOnce sync.Once</code>即可实现，<code>sync.Once</code> 是 Go 语言标准库 <code>sync</code> 包中的一个结构体类型，用于实现只执行一次的操作。它通常用于确保在并发环境下某个函数只被执行一次，无论有多少个 goroutine 在同时调用该函数。 <code>sync.Once</code> 提供了一个 <code>Do</code> 方法，用于指定只执行一次的操作。该方法接收一个函数作为参数，当多个 goroutine 同时调用 <code>Do</code> 方法时，只有一个 goroutine 会执行传入的函数，其他 goroutine 将会等待执行结束。当第一个 goroutine 执行结束后，<code>done</code> 字段会被标记为已完成，后续的调用将不再执行传入的函数。所以是线程安全的，实现方式可以参考如下代码：</p><pre class=" language-golang"><code class="language-golang">package repositoryimport "sync"type Post struct &#123;    Id         int64  `json:"id"`    ParentId   int64  `json:"parent_id"`    Content    string `json:"content"`    CreateTime int64  `json:"create_time"`&#125;type PostDao struct &#123;&#125;var (    postDao  *PostDao    postOnce sync.Once)func NewPostDaoInstance() *PostDao &#123;    postOnce.Do(        func() &#123;            postDao = &PostDao&#123;&#125;        &#125;)    return postDao&#125;func (*PostDao) QueryPostsByParentId(parentid int64) []*Post &#123;    return postIndexMap[parentid]&#125;type Topic struct &#123;    Id         int64  `json:"id"`    Title      string `json:"title"`    Content    string `json:"content"`    CreateTime int64  `json:"create_time"`&#125;type TopicDao struct&#123;&#125;var (    topicDao  *TopicDao    topicOnce sync.Once)func NewTopicDaoInstance() *TopicDao &#123;    topicOnce.Do(        func() &#123;            topicDao = &TopicDao&#123;&#125;        &#125;)    return topicDao&#125;func (*TopicDao) QueryTopicById(id int64) *Topic &#123;    return topicIndexMap[id]&#125;</code></pre><h2 id="Map表的初始化创建"><a href="#Map表的初始化创建" class="headerlink" title="Map表的初始化创建"></a>Map表的初始化创建</h2><p>考虑到对帖子的更新修正以及及时访问，我们需要维护两个变量用来记录文件中已有的帖子数量，针对<code>InitTopicIndexMap InitPostIndexMap</code>这两个函数执行之前需要对该Map进行清除，以便于重新读写数据，同样也需要对文件数id进行置空，针对与这部分的实现主要有以下几个关键点：</p><ul><li>文件访问的函数使用 <code>os.open </code></li><li>拿到文件handle后如何通过<code>bufio.newScanner</code>实现文件的行遍历</li><li>map的处理行post和topic有所区别，因为post的map索引也是通过话题id来实现的，所以对于帖子的存储上我们需要通过切片方式进行存储，这样可以使用<code>append</code>方式进行追加</li></ul><pre class=" language-golang"><code class="language-golang">if len(postIndexMap) > 0 &#123;    postIndexMap = make(map[int64][]*Post)    postId = 0&#125;if len(topicIndexMap) > 0 &#123;    topicIndexMap = make(map[int64]*Topic)    topicId = 0&#125;</code></pre><h2 id="serivce设计"><a href="#serivce设计" class="headerlink" title="serivce设计"></a>serivce设计</h2><p>页面的设计上我们一般是一个话题以及追加一系列的帖子，这样需要设计的结构体上就可以设计成这样：</p><pre class=" language-golang"><code class="language-golang">type PageInfo struct &#123;    Topic    *repository.Topic    PostList []*repository.Post&#125;</code></pre><p>这个结构体的设计已经可以满足界面设计需求了，那为什么还需要设计一个更加复杂的呢，首先考虑到界面索引的问题我们需要确定话题ID，根据话题ID需要确定帖子的Map索引数据，索引查找过程为两个没有关联的过程可以开启协程处理，这样的这个结构体的设计是很有必要的</p><pre class=" language-golang"><code class="language-golang">type QueryPageInfoFlow struct &#123;    topicId  int64    pageInfo *PageInfo    topic    *repository.Topic    posts    []*repository.Post&#125;</code></pre><p>其他的设计同源码，相对而言是较简单的</p><h2 id="Controller设计"><a href="#Controller设计" class="headerlink" title="Controller设计"></a>Controller设计</h2><p>通过封装好的<code>service.QueryPageInfo(topicId)</code>实现页面数据的获取，结构体的设计如下：</p><pre class=" language-golang"><code class="language-golang">type PageData struct &#123;    Code int64       `json:"code"`    Msg  string      `json:"msg"`    Data interface&#123;&#125; `json:"data"`&#125;</code></pre><p>在 Go 语言中，<code>interface&#123;&#125;</code> 是一种特殊的数据类型，被称为空接口（Empty Interface）。空接口可以表示任意类型的值，因为它不包含任何方法，所以它对所有类型都是兼容的。</p><p>在 Go 中，每个类型都实现了空接口，因为它不要求任何方法。因此，你可以将任意值赋给空接口变量，也可以从空接口中获取任意值。</p><h2 id="server-go设计"><a href="#server-go设计" class="headerlink" title="server.go设计"></a>server.go设计</h2><p>此部分需要开启gin框架，在此之前需要进行Init两个map表，为了实现发布帖子的功能，我们需要设计一个新的函数 <code>InputPost()</code>这个函数可以在文件中添加新的帖子，设计如下：</p><pre class=" language-golang"><code class="language-golang">func InputPost() error &#123;    for &#123;        fmt.Println("结束请输入E")        fmt.Println("我需要以下信息：")        fmt.Println("请输入发布帖子的内容：")        reader := bufio.NewReader(os.Stdin)        input, err := reader.ReadString('\n')        if err != nil &#123;            fmt.Println("An error occured while reading input Please try again", err)            continue        &#125;        topicContext := strings.Trim(input, "\r\n")        if strings.ToUpper(topicContext) == "E" &#123;            break        &#125;        fmt.Println("请输入您选择的话题：")        reader = bufio.NewReader(os.Stdin)        input, err = reader.ReadString('\n')        if err != nil &#123;            fmt.Println("An error occured while reading input Please try again", err)            continue        &#125;        parentIdStr := strings.Trim(input, "\r\n")        parent, err := strconv.ParseInt(parentIdStr, 10, 64)        if err != nil &#123;            fmt.Println("Invalid input,Please enter an integer value")            continue        &#125; //构建帖子结构        now := time.Now()        id := repository.GetPostCount()        (*id)++        fmt.Println("当前id值为")        posTmp := repository.Post&#123;            Id:         *id,            ParentId:   parent,            Content:    topicContext,            CreateTime: now.Unix(),        &#125;        open, err := os.OpenFile("./data/post", os.O_WRONLY|os.O_APPEND, 0666)        if err != nil &#123;            fmt.Println("file can not open ")            return errors.New("file can not open")        &#125;        buf, err := json.Marshal(posTmp)        if err != nil &#123;            fmt.Println("序列化失败")            return err        &#125;        _, err = open.Write([]byte&#123;'\n'&#125;)        _, err = open.Write(buf)        if err != nil &#123;            fmt.Println("写入失败", err)            return err        &#125;        fmt.Println("数据写入成功")    &#125;    return nil&#125;</code></pre><p>对于main函数的修改，主要是GET的调用过程中，我们需要确认用户是否需要发布新的帖子到哪一个话题中，所以需要做一些小的修改</p><pre class=" language-golang"><code class="language-golang">func main() &#123;    if err := Init("./data/"); err != nil &#123;        os.Exit(-1)    &#125;    r := gin.Default()    r.GET("/community/page/get/:id", func(ctx *gin.Context) &#123;        topicId := ctx.Param("id")        for &#123;            fmt.Println("请问是否有帖子需要输入呢")            reader := bufio.NewReader(os.Stdin)            put, err := reader.ReadString('\n')            if err != nil &#123;                fmt.Println("input error", err)                break            &#125;            putstr := strings.Trim(put, "\r\n")            if strings.ToUpper(putstr) == "Y" &#123;                if err := InputPost(); err != nil &#123;                    break                &#125;            &#125; else &#123;                break            &#125;        &#125;        if err := Init("./data/"); err != nil &#123;            fmt.Println("再次初始化失败", err)        &#125;        data := cotroller.QueryPageInfo(topicId)        ctx.JSON(200, data)    &#125;)    err := r.Run()    if err != nil &#123;        return    &#125;&#125;</code></pre><p>展示结果如下：</p><p><img src="/2023/080736829/32a4e7fe523b558b8b3a8dde1ec52c3e.png" alt="32a4e7fe523b558b8b3a8dde1ec52c3e"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go后端基础课</title>
      <link href="/2023/08071422.html"/>
      <url>/2023/08071422.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Go中采用后置返回值的声明方式进行函数的构造，如果要返回多个值，可采用”()“的方式蒋返回类型进行声明，对于返回的变量声明也可以放在括号中，如下所示：</p><p><strong>注意 函数无法进行重载</strong></p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"func add(a int, b int) int &#123;    return a + b&#125;func add2(a, b int) int &#123;    return a + b&#125;func exists(m map[string]string, k string) (v string, ok bool) &#123;    v, ok = m[k]    return v, ok&#125;func main() &#123;    res := add(1, 2)    fmt.Println(res)    res2 := add2(3, 2)    fmt.Println(res2)    v, ok := exists(map[string]string&#123;"a": "A"&#125;, "a")    fmt.Println(v, ok)&#125;</code></pre><p><img src="/2023/08071422/92e55bf1f75e0e06e92ffe54ca751d02.png" alt="92e55bf1f75e0e06e92ffe54ca751d02"></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>Go语言中也支持指针操作，但并不能向C++一样运用的如此广泛，它可以用来真实的改变值本身的大小，而非发生拷贝操作后无法对初始值进行改变，即值传递和引用传递区别本身，传递本身也采用地址符号进行传递</p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"func add2(n int) &#123;    n += 2&#125;func add2ptr(n *int) &#123;    *n += 2&#125;func main() &#123;    n := 5    add2(n)    fmt.Println(n) // 5    add2ptr(&n)    fmt.Println(n) // 7&#125;</code></pre><p><img src="/2023/08071422/46d2bafd9e7b07ef3d13d1634aa43e85.png" alt="46d2bafd9e7b07ef3d13d1634aa43e85"></p><h2 id="结构体，类"><a href="#结构体，类" class="headerlink" title="结构体，类"></a>结构体，类</h2><p>Go中的结构体同C中的结构体很像，在定义过程中，可以有几种不同的方式进行定义，相对而言比较灵活，可以指定需要定义的成员值</p><p>成员函数的定义只需要在”func“后用括号表明这是谁的成员函数即可</p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"type user struct &#123;    name     string    password string&#125;func (u user) checkPassWordMy(password string)bool &#123;    return u.password==password&#125;func (u* user) checkPassWordPoint(password string)bool&#123;    return u.password==password&#125;func main() &#123;    a := user&#123;name: "wang", password: "1234"&#125;    b := user&#123;"wang", "1234"&#125;    c := user&#123;name: "wang"&#125;    var d user    d.name = "wang"    d.password = "1234"    fmt.Println(a, b, c, d)    fmt.Println(checkPassWord(a, "haha"))    fmt.Println(checkPassWord2(&a, "haha"))    fmt.Println(a)    fmt.Println(a.checkPassWordMy("haha"))    fmt.Println(a.checkPassWordPoint("haha"))&#125;func checkPassWord(u user, password string) bool &#123;    return u.password == password&#125;func checkPassWord2(u *user, password string) bool &#123;    if u.password != password &#123;        u.password = password        return false    &#125;    return true&#125;</code></pre><p><img src="/2023/08071422/32d4aa07dd2e4f2842ff57b05253707d.png" alt="32d4aa07dd2e4f2842ff57b05253707d"></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>Go语言中采error关键字来说明错误</p><pre class=" language-golang"><code class="language-golang">package mainimport (    "errors"    "fmt")type user struct &#123;    name     string    password string&#125;func findUser(users []user, name string) (v *user, err error) &#123;    for _, u := range users &#123;        if u.name == name &#123;            return &u, nil        &#125;    &#125;    return nil, errors.New("not found")&#125;func main() &#123;    u, err := findUser([]user&#123;&#123;"wang", "1234"&#125;&#125;, "wang")    if err != nil &#123;        fmt.Println(err)        return    &#125;    fmt.Println(*u)    if u, err := findUser([]user&#123;&#123;"wang", "324"&#125;, &#123;"xiao", "1109"&#125;&#125;, "li"); err != nil &#123;        fmt.Println(err)        return    &#125; else &#123;        fmt.Println(*u)    &#125;&#125;</code></pre><p><img src="/2023/08071422/38c075dbb1264ec9d32b612cc8850185.png" alt="38c075dbb1264ec9d32b612cc8850185"></p><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>同C++类似，可以实现对字符串的查询，追加，拼接，分割，重复使用，等等</p><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "strings")func main() &#123;    a := "hello"    fmt.Println(strings.Contains(a, "ll"))                // true    fmt.Println(strings.Count(a, "l"))                    // 2    fmt.Println(strings.HasPrefix(a, "he"))               // true    fmt.Println(strings.HasSuffix(a, "llo"))              // true    fmt.Println(strings.Index(a, "ll"))                   // 2    fmt.Println(strings.Join([]string&#123;"he", "llo"&#125;, "-")) // he-llo    fmt.Println(strings.Repeat(a, 2))                     // hellohello    fmt.Println(strings.Replace(a, "e", "E", -1))         // hEllo    fmt.Println(strings.Split("a-b-c", "-"))              // [a b c]    fmt.Println(strings.ToLower(a))                       // hello    fmt.Println(strings.ToUpper(a))                       // HELLO    fmt.Println(len(a))                                   // 5    b := "你好"    fmt.Println(len(b)) // 6&#125;</code></pre><h2 id="fmt-格式化输出"><a href="#fmt-格式化输出" class="headerlink" title="fmt 格式化输出"></a>fmt 格式化输出</h2><p>同C语言的printf很像，但对于不同的数据类型，Go均可通过%v实现输出，</p><p>%+v 表示详细输出</p><p>%#v表示更加详细的输出，包括调用的函数</p><pre class=" language-golang"><code class="language-golang">package mainimport "fmt"type point struct &#123;    x, y int&#125;func main() &#123;    s := "hello"    n := 123    p := point&#123;1, 2&#125;    fmt.Println(s, n) // hello 123    fmt.Println(p)    // &#123;1 2&#125;    fmt.Printf("s=%v\n", s)  // s=hello    fmt.Printf("n=%v\n", n)  // n=123    fmt.Printf("p=%v\n", p)  // p=&#123;1 2&#125;    fmt.Printf("p=%+v\n", p) // p=&#123;x:1 y:2&#125;    fmt.Printf("p=%#v\n", p) // p=main.point&#123;x:1, y:2&#125;    f := 3.141592653    fmt.Println(f)          // 3.141592653    fmt.Printf("%.2f\n", f) // 3.14&#125;</code></pre><p><img src="/2023/08071422/470f72b80bd16decf716f5e4043989bd.png" alt="470f72b80bd16decf716f5e4043989bd"></p><h2 id="json相关"><a href="#json相关" class="headerlink" title="json相关"></a>json相关</h2><p>对于一个已有的结构体，保证每个字段的第一个字母为大写，那么这个结构体可以通过Json.Marshal进行序列化，序列化为一个数组的形式，需要通过通过string强制类型转换才能打印出字符串</p><p>通过json.MarshalIndent可以实现json格式的buf</p><pre class=" language-golang"><code class="language-golang">//参数一代表需要处理的结构体//参数二代表需要的前缀//参数三代表间隔的方式func MarshalIndent(v any, prefix, indent string) ([]byte, error)package mainimport (    "encoding/json"    "fmt")type userInfo struct &#123;    Name  string    Age   int    Hobby []string&#125;func main() &#123;    a := userInfo&#123;Name: "wang", Age: 18, Hobby: []string&#123;"C++", "C#", "QT", "Go"&#125;&#125;    buf, err := json.Marshal(a)    if err != nil &#123;        panic(err)        return    &#125;    fmt.Println(buf)    fmt.Println(string(buf))    buf, err = json.MarshalIndent(a, "", "\t")    if err != nil &#123;        panic(err)        return    &#125;    fmt.Println(string(buf))    var b userInfo    err = json.Unmarshal(buf, &b)    if err != nil &#123;        panic(err)    &#125;    fmt.Printf("%#v\n", b)&#125;</code></pre><p><img src="/2023/08071422/12a366d9a741cdd419c7ba7ff715b61f.png" alt="12a366d9a741cdd419c7ba7ff715b61f"></p><h2 id="时间相关函数"><a href="#时间相关函数" class="headerlink" title="时间相关函数"></a>时间相关函数</h2><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "time")func main() &#123;    now := time.Now()    fmt.Println(now) // 2022-03-27 18:04:59.433297 +0800 CST m=+0.000087933    t := time.Date(2022, 3, 27, 1, 25, 36, 0, time.UTC)    t2 := time.Date(2022, 3, 27, 2, 30, 36, 0, time.UTC)    fmt.Println(t)                                                  // 2022-03-27 01:25:36 +0000 UTC    fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) // 2022 March 27 1 25    fmt.Println(t.Format("2006-01-02 15:04:05"))                    // 2022-03-27 01:25:36    diff := t2.Sub(t)    fmt.Println(diff)                           // 1h5m0s    fmt.Println(diff.Minutes(), diff.Seconds()) // 65 3900    t3, err := time.Parse("2006-01-02 15:04:05", "2022-03-27 01:25:36")    if err != nil &#123;        panic(err)    &#125;    fmt.Println(t3)    fmt.Println(t3 == t)    // true    fmt.Println(now.Unix()) // 1648738080&#125;</code></pre><p><img src="/2023/08071422/28bd3eaaa9a3630c75c35b4925c4b99b.png" alt="28bd3eaaa9a3630c75c35b4925c4b99b"></p><h2 id="字符串和数字之间的转换"><a href="#字符串和数字之间的转换" class="headerlink" title="字符串和数字之间的转换"></a>字符串和数字之间的转换</h2><pre class=" language-golang"><code class="language-golang">package mainimport (    "fmt"    "strconv")func main() &#123;    f, _ := strconv.ParseFloat("1.234", 64)    fmt.Println(f) // 1.234    n, _ := strconv.ParseInt("111", 10, 64)    fmt.Println(n) // 111    n, _ = strconv.ParseInt("0x1000", 0, 64)    fmt.Println(n) // 4096    n2, _ := strconv.Atoi("123")    fmt.Println(n2) // 123    n2, err := strconv.Atoi("AAA")    fmt.Println(n2, err) // 0 strconv.Atoi: parsing "AAA": invalid syntax&#125;</code></pre><p><img src="/2023/08071422/3d78f856081105efd3e96d838d549a8f.png" alt="3d78f856081105efd3e96d838d549a8f"></p><h2 id="Go语言的实战案例"><a href="#Go语言的实战案例" class="headerlink" title="Go语言的实战案例"></a>Go语言的实战案例</h2><h3 id="猜谜游戏"><a href="#猜谜游戏" class="headerlink" title="猜谜游戏"></a>猜谜游戏</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "bufio"    "fmt"    "math/rand"    "os"    "strconv"    "strings"    "time")func main() &#123;    maxNum := 100    rand.Seed(time.Now().UnixNano())    secretNumber := rand.Intn(maxNum)    fmt.Println("The sercert number is ", secretNumber)    for &#123;        fmt.Println("Please input your guess")        reader := bufio.NewReader(os.Stdin)        input, err := reader.ReadString('\n')        if err != nil &#123;            fmt.Println("An error occured while reading input Please try again", err)            continue        &#125;        input = strings.Trim(input, "\r\n")        guess, err := strconv.Atoi(input)        if err != nil &#123;            fmt.Println("Invalid input,Please enter an integer value")            continue        &#125;        fmt.Println("You guess is:", guess)        if guess > secretNumber &#123;            fmt.Println("Your guess is bigger than the secret number. Please try again")        &#125; else if guess < secretNumber &#123;            fmt.Println("Your guess is smaller than the secret number. Please try again")        &#125; else &#123;            fmt.Println("Correct,you Legend!")            break        &#125;    &#125;&#125;</code></pre><h3 id="查单词字典"><a href="#查单词字典" class="headerlink" title="查单词字典"></a>查单词字典</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "bytes"    "encoding/json"    "fmt"    "io"    "log"    "net/http"    "os")type DictRequest struct &#123;    Trans_type string `json:"trans_type"`    Source     string `json:"source"`    User_ID    string `json:"user_id"`&#125;type DictResponse struct &#123;    Rc   int `json:"rc"`    Wiki struct &#123;        KnownInLaguages int `json:"known_in_laguages"`        Description     struct &#123;            Source string      `json:"source"`            Target interface&#123;&#125; `json:"target"`        &#125; `json:"description"`        ID   string `json:"id"`        Item struct &#123;            Source string `json:"source"`            Target string `json:"target"`        &#125; `json:"item"`        ImageURL  string `json:"image_url"`        IsSubject string `json:"is_subject"`        Sitelink  string `json:"sitelink"`    &#125; `json:"wiki"`    Dictionary struct &#123;        Prons struct &#123;            EnUs string `json:"en-us"`            En   string `json:"en"`        &#125; `json:"prons"`        Explanations []string      `json:"explanations"`        Synonym      []string      `json:"synonym"`        Antonym      []string      `json:"antonym"`        WqxExample   [][]string    `json:"wqx_example"`        Entry        string        `json:"entry"`        Type         string        `json:"type"`        Related      []interface&#123;&#125; `json:"related"`        Source       string        `json:"source"`    &#125; `json:"dictionary"`&#125;func query(word string) &#123;    client := &http.Client&#123;&#125;    request := DictRequest&#123;Trans_type: "en2zh", Source: word&#125; //定义一个结构体    buff, err := json.Marshal(request)                        //json 序列化    if err != nil &#123;        log.Fatal(err)    &#125;    var data = bytes.NewReader(buff) //转为字节    //创建请求    req, err := http.NewRequest("POST", "https://api.interpreter.caiyunai.com/v1/dict", data)    if err != nil &#123;        log.Fatal(err)    &#125;    //设置请求头    req.Header.Set("authority", "api.interpreter.caiyunai.com")    req.Header.Set("accept", "application/json, text/plain, */*")    req.Header.Set("accept-language", "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6")    req.Header.Set("app-name", "xy")    req.Header.Set("content-type", "application/json;charset=UTF-8")    req.Header.Set("device-id", "ae5399d5f4e62175b801e6e2c9dbd230")    req.Header.Set("origin", "https://fanyi.caiyunapp.com")    req.Header.Set("os-type", "web")    req.Header.Set("os-version", "")    req.Header.Set("referer", "https://fanyi.caiyunapp.com/")    req.Header.Set("sec-ch-ua", `"Not/A)Brand";v="99", "Microsoft Edge";v="115", "Chromium";v="115"`)    req.Header.Set("sec-ch-ua-mobile", "?0")    req.Header.Set("sec-ch-ua-platform", `"Windows"`)    req.Header.Set("sec-fetch-dest", "empty")    req.Header.Set("sec-fetch-mode", "cors")    req.Header.Set("sec-fetch-site", "cross-site")    req.Header.Set("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.183")    req.Header.Set("x-authorization", "token:qgemv4jr1y38jyq6vhvi")    resp, err := client.Do(req) //发起请求    if err != nil &#123;        log.Fatal(err)    &#125;    defer resp.Body.Close()    //读取响应    bodyText, err := io.ReadAll(resp.Body)    if err != nil &#123;        log.Fatal(err)    &#125;    if resp.StatusCode != 200 &#123;        log.Fatal("bad StatusCode:", resp.StatusCode, "body", string(bodyText))    &#125;    //fmt.Printf("%s\n", bodyText)    //buff2, err := json.MarshalIndent(bodyText, "", "\t")    //fmt.Println(string(buff2))    var dictRes DictResponse    err = json.Unmarshal(bodyText, &dictRes)    if err != nil &#123;        log.Fatal(err)    &#125;    //fmt.Printf("%#v\n", dictRes)    fmt.Println(word, "UK:", dictRes.Dictionary.Prons.En, "US:", dictRes.Dictionary.Prons.EnUs)    for _, item := range dictRes.Dictionary.Explanations &#123;        fmt.Println(item)    &#125;&#125;func main() &#123;    if len(os.Args) != 2 &#123;        fmt.Fprintf(os.Stderr, `usage:simpleDict WORD         example: simpleDict hello`)        os.Exit(1)    &#125;    word := os.Args[1]    query(word)&#125;</code></pre><h3 id="代理服务器实现"><a href="#代理服务器实现" class="headerlink" title="代理服务器实现"></a>代理服务器实现</h3><pre class=" language-golang"><code class="language-golang">package mainimport (    "bufio"    "context"    "encoding/binary"    "errors"    "fmt"    "io"    "log"    "net")const socks5Ver = 0x05const cmdBind = 0x01const atypeIPV4 = 0x01const atypeHOST = 0x03const atypeIPV6 = 0x04func main() &#123;    server, err := net.Listen("tcp", "127.0.0.1:9527")    if err != nil &#123;        log.Fatal(err)    &#125;    for &#123;        client, err := server.Accept()        if err != nil &#123;            log.Printf("Accept failed", err)        &#125;        go process(client)    &#125;&#125;func process(conn net.Conn) &#123;    defer conn.Close()    reader := bufio.NewReader(conn)    err := auth(reader, conn)    if err != nil &#123;        log.Printf("client %v auth failed:%v", conn.RemoteAddr(), err)        return    &#125;    err = connect(reader, conn)    if err != nil &#123;        log.Printf("client %v auth failed:%v", conn.RemoteAddr(), err)        return    &#125;&#125;func auth(reader *bufio.Reader, conn net.Conn) (err error) &#123;    // +----+----------+----------+    // |VER | NMETHODS | METHODS  |    // +----+----------+----------+    // | 1  |    1     | 1 to 255 |    // +----+----------+----------+    // VER: 协议版本，socks5为0x05    // NMETHODS: 支持认证的方法数量    // METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:    // X’00’ NO AUTHENTICATION REQUIRED    // X’02’ USERNAME/PASSWORD    ver, err := reader.ReadByte()    if err != nil &#123;        return fmt.Errorf("read ver failed:%dw", err)    &#125;    if ver != socks5Ver &#123;        return fmt.Errorf("not supported ver:%v", ver)    &#125;    methodSize, err := reader.ReadByte()    if err != nil &#123;        return fmt.Errorf("read ver failed:%dw", err)    &#125;    method := make([]byte, methodSize)    _, err = io.ReadFull(reader, method)    if err != nil &#123;        return fmt.Errorf("read method failed:%w", err)    &#125;    // +----+--------+    // |VER | METHOD |    // +----+--------+    // | 1  |   1    |    // +----+--------+    _, err = conn.Write([]byte&#123;socks5Ver, 0x00&#125;)    if err != nil &#123;        return fmt.Errorf("write failed:%w", err)    &#125;    return nil&#125;func connect(reader *bufio.Reader, conn net.Conn) (err error) &#123;    // +----+-----+-------+------+----------+----------+    // |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |    // +----+-----+-------+------+----------+----------+    // | 1  |  1  | X'00' |  1   | Variable |    2     |    // +----+-----+-------+------+----------+----------+    // VER 版本号，socks5的值为0x05    // CMD 0x01表示CONNECT请求    // RSV 保留字段，值为0x00    // ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。    //   0x01表示IPv4地址，DST.ADDR为4个字节    //   0x03表示域名，DST.ADDR是一个可变长度的域名    // DST.ADDR 一个可变长度的值    // DST.PORT 目标端口，固定2个字节    buf := make([]byte, 4)    _, err = io.ReadFull(reader, buf)    if err != nil &#123;        return fmt.Errorf("read header failed:%w", err)    &#125;    ver, cmd, atyp := buf[0], buf[1], buf[3]    if ver != socks5Ver &#123;        return fmt.Errorf("not supported ver:%v", ver)    &#125;    if cmd != cmdBind &#123;        return fmt.Errorf("not supported cmd:%v", cmd)    &#125;    addr := ""    switch atyp &#123;    case atypeIPV4:        _, err = io.ReadFull(reader, buf)        if err != nil &#123;            return fmt.Errorf("read atyp failed:%w", err)        &#125;        addr = fmt.Sprintf("%d.%d.%d.%d", buf[0], buf[1], buf[2], buf[3])    case atypeHOST:        hostSize, err := reader.ReadByte()        if err != nil &#123;            return fmt.Errorf("read hostSize failed:%w", err)        &#125;        host := make([]byte, hostSize)        _, err = io.ReadFull(reader, host)        if err != nil &#123;            return fmt.Errorf("read host failed:%w", err)        &#125;        addr = string(host)    case atypeIPV6:        return errors.New("IPv6: no supported yet")    default:        return errors.New("invalid atyp")    &#125;    _, err = io.ReadFull(reader, buf[:2])    if err != nil &#123;        return fmt.Errorf("read port failed:%w", err)    &#125;    port := binary.BigEndian.Uint16(buf[:2])    dest, err := net.Dial("tcp", fmt.Sprintf("%v:%v", addr, port))    if err != nil &#123;        return fmt.Errorf("dial dst failed:%w", err)    &#125;    defer dest.Close()    log.Println("dial", addr, port)    _, err = conn.Write([]byte&#123;0x05, 0x00, 0x00, 0x01, 0, 0, 0, 0, 0, 0&#125;)    if err != nil &#123;        return fmt.Errorf("write failed: %w", err)    &#125;    ctx, cancel := context.WithCancel(context.Background())    defer cancel()    go func() &#123;        _, _ = io.Copy(dest, reader)        cancel()    &#125;()    go func() &#123;        _, _ = io.Copy(conn, dest)        cancel()    &#125;()    <-ctx.Done()    return nil&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CONTAINING_RECORD宏原理与使用详解</title>
      <link href="/2023/080761350.html"/>
      <url>/2023/080761350.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、0指针的妙用"><a href="#一、0指针的妙用" class="headerlink" title="一、0指针的妙用"></a>一、0指针的妙用</h2><pre class=" language-C++"><code class="language-C++">typedef unsigned long long quint64;Test* pTest = nullptr;quint64 offset_a = (quint64)(&(pTest->a));  // offset_a==0quint64 offset_b = (quint64)(&(pTest->b));  // offset_b==4</code></pre><p>offset_a为0，offset_b为4，如果你觉得很惊喜，请继续看。</p><p>之所以pTest-&gt;a，pTest-&gt;b没有报错，是因为前面添加了取地址符&amp;，相当于我们告诉编译器，并不是真的要取a、b的值，我们只是取a、b的地址，然鹅Test对象的地址pTest为0，根据C++对象内存布局，如下图，可知当Test对象地址为0时，实际上取到的a、b地址，也就是a、b变量相对于整个对象首地址的偏移量。</p><h2 id="二、CONTAINING-RECORD宏"><a href="#二、CONTAINING-RECORD宏" class="headerlink" title="二、CONTAINING_RECORD宏"></a>二、CONTAINING_RECORD宏</h2><p>该宏的功能，是根据某个结构体中成员变量的地址，计算出结构体地址。</p><ul><li>address，成员变量地址</li><li>type，结构体类型</li><li>field，成员变量名</li></ul><p>该宏定义的原理，就是上一章中介绍的使用0指针获取成员偏移，然后再使用成员变量地址-成员偏移，就得到了结构体地址。</p><p>该宏定义的使用，如下：</p><pre class=" language-C++"><code class="language-C++">struct School&#123;    int level;    float cost;&#125;;struct Student&#123;    int age;    School school;&#125;;School sch;sch.level = 1;sch.cost = 5000;Student zhangsan;zhangsan.age = 10;zhangsan.school = sch;Student* pStu = CONTAINING_RECORD(&zhangsan.school, Student, school);qDebug() << &zhangsan;qDebug() << pStu;</code></pre><p><img src="/2023/080761350/fae12fde5abc4736a3518d851b51e0aatplv-k3u1fbpfcp-watermark.png" alt="84b19e37254b355b020959c879ffab5c.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> MFC </tag>
            
            <tag> CONTAINING_RECORD </tag>
            
            <tag> 对象模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOCP工作原理</title>
      <link href="/2023/080756526.html"/>
      <url>/2023/080756526.html</url>
      
        <content type="html"><![CDATA[<h2 id="IOCP基本原理"><a href="#IOCP基本原理" class="headerlink" title="IOCP基本原理"></a>IOCP基本原理</h2><p>IOCP 的基本原理是通过事件驱动的方式来处理 I&#x2F;O 请求，以避免传统的阻塞式 I&#x2F;O 操作带来的性能问题。具体来说，IOCP 通过以下几个步骤完成异步 I&#x2F;O 操作：</p><ol><li><p>应用程序首先创建一个或多个 I&#x2F;O 端口，并将它们关联到套接字或文件句柄上。</p></li><li><p>当应用程序需要进行 I&#x2F;O 操作时，它调用系统级别的 API，将请求提交到 I&#x2F;O 端口上。</p></li><li><p>操作系统内核将 I&#x2F;O 请求与相应的 I&#x2F;O 端口关联，并立即返回，使得应用程序可以继续执行其他操作。</p></li><li><p>内核在后台异步地执行 I&#x2F;O 操作，并将结果存储在完成队列中。</p></li><li><p>当 I&#x2F;O 操作完成时，内核会通知完成端口，并将完成信息添加到完成队列中。</p></li><li><p>应用程序通过调用 GetQueuedCompletionStatus() 函数获取完成队列中的已完成请求，并按需处理它们。</p></li><li><p>如果完成队列为空，则应用程序可以等待新的完成事件发生，或者继续执行其他操作。</p><p>以上过程中，工作者线程负责从完成队列中取出已完成的 I&#x2F;O 请求，并进行相应的处理。由于这些</p><p>线程都是从线程池中获取的，因此可以有效地管理和控制线程的数量和使用情况，从而提高系统的效率和稳定性。</p></li></ol><pre class=" language-C++"><code class="language-C++">void func(void* arg) &#123;    std::string* pstr = (std::string*)arg;    if (pstr != NULL) &#123;        printf("pop from list:%s\r\n", pstr->c_str());        delete pstr;    &#125;else&#123;      printf("List is empty,no data!\r\n");    &#125;&#125;</code></pre><pre class=" language-C++"><code class="language-C++">//用于定义传输过程中的枚举类型enum &#123;    IocpListEmpty,    IocpListPush,    IocpListPop&#125;;</code></pre><pre class=" language-C++"><code class="language-C++">//设计用于传输数据的数据结构typedef struct IocpParam &#123;    IocpParam(int op, const char* sData, _beginthread_proc_type cb=NULL)         :nOperator(op), strData(sData),cbFunc(cb) &#123;&#125;    IocpParam() :nOperator(-1) &#123;&#125;    int nOperator;//操作    std::string strData;//数据    _beginthread_proc_type cbFunc;//回调 线程中的回调函数类型&#125;IOCP_PARAM;</code></pre><pre class=" language-C++"><code class="language-C++">void threadmain(HANDLE hIOCP) &#123;    std::list<std::string>lstString;    DWORD dwTransferred = 0;    ULONG_PTR CompletionKey = 0;    OVERLAPPED* Overlapped = NULL;    int count = 0, count0 = 0, total = 0;    while (GetQueuedCompletionStatus(hIOCP, &dwTransferred, &CompletionKey, &Overlapped, INFINITE)) &#123;        if (dwTransferred == 0 || CompletionKey == NULL) &#123;            printf("thread is prepare to exit!\r\n");            break;        &#125;        IOCP_PARAM* pParam = (IOCP_PARAM*)CompletionKey;        if (pParam->nOperator == IocpListPush) &#123;            printf("push string %s %p \r\n", pParam->strData.c_str(), Overlapped);            lstString.push_back(pParam->strData);            count++;        &#125;        else if (pParam->nOperator == IocpListPop) &#123;            printf("%p size %d \r\n", pParam->cbFunc, lstString.size());            std::string str;            if (lstString.size() > 0) &#123;                str = lstString.front();                lstString.pop_front();            &#125;            if (pParam->cbFunc) &#123;                pParam->cbFunc(&str);            &#125;            count0++;        &#125;        else if (pParam->nOperator == IocpListEmpty) &#123;            lstString.clear();        &#125;        delete pParam;        printf("total %d \r\n", ++total);    &#125;    lstString.clear();    printf("thread exit count %d  count0 %d\r\n", count, count0);&#125;//由于存在内存泄露，所以采用这种形式调用线程函数void threadQueueEntry(HANDLE hIOCP) &#123;    threadmain(hIOCP);    _endthread();&#125;//注意为什么要分为两个函数写，这是因为内存泄漏的问题////代码到此为止，会导致本地对象无法调用析构，从而使得内存发生泄漏//切记 线程入口函数要和线程主体函数分开</code></pre><pre class=" language-C++"><code class="language-C++">//创建完成端口映射->得到句柄(句柄绑定内核)//创建线程，处理队列//创建完成端口HANDLE hIOCP = INVALID_HANDLE_VALUE;//Input Output Completion Port//最后一个参数表示能够同时访问队列的线程数//参数一：代表一个句柄，如果是做文件，可以是文件句柄，如果是做串口，可以做串口句柄//参数二：代表已经存在的完成端口句柄//参数三：代表KeyhIOCP = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 1);//epoll的区别点if (hIOCP == INVALID_HANDLE_VALUE || (hIOCP == NULL)) &#123;        printf("Create ICOP Failed!%d\r\n", GetLastError());        return 1;&#125;//创建线程 参数一代表线程名，参数二代表新线程堆栈的大小，一般为0，参数三代表调用线程函数的参数HANDLE hThread = (HANDLE)_beginthread(threadQueueEntry, 0, hIOCP);printf("press any key to exit ...\r\n");//按下任意键结束ULONGLONG tick = GetTickCount64();ULONGLONG tick0 = GetTickCount64();int count = 0, count0 = 0;while(_kbhit()==0)&#123;  if (GetTickCount64() - tick0 > 1300) &#123;            PostQueuedCompletionStatus(hIOCP, sizeof(IOCP_PARAM),                 (ULONG_PTR)new IOCP_PARAM(IocpListPop, "hello world",func), NULL);            tick0 = GetTickCount64();            count0++;        &#125;        if (GetTickCount64() - tick > 2000) &#123;            PostQueuedCompletionStatus(hIOCP, sizeof(IOCP_PARAM),                 (ULONG_PTR)new IOCP_PARAM(IocpListPush, "hello world"), NULL);            tick = GetTickCount64();            count++;        &#125;        Sleep(1);&#125;CloseHandle(hIOCP);//关闭IOCPprintf("exit done count %d count0 %d \r\n", count, count0);exit(0);</code></pre><h2 id="IOCP设计"><a href="#IOCP设计" class="headerlink" title="IOCP设计"></a>IOCP设计</h2><pre class=" language-C++"><code class="language-C++">#pragma once#include<string>#include <atomic>#include<list>template<class T>class CWTQueue&#123;//线程安全的队列(利用IOCP实现)public:    enum    &#123;        WQNone,        WQPush,        WQPop,        WQSize,        WQClear    &#125;;    typedef struct IocpParam &#123;        IocpParam(int op, const T& sData, HANDLE hEve = NULL)            :nOperator(op), Data(sData), hEvent(hEve) &#123;&#125;        IocpParam() :nOperator(WQNone) &#123;&#125;        size_tnOperator;//操作        TData;//数据        HANDLEhEvent;//pop操作需要的    &#125;PPARAM;//用于投递信息的结构体public:    CWTQueue();    ~CWTQueue();    bool PushBack(const T& data);    bool PopFront(T& data);    size_t Size();    bool Clear();private:    static void threadEntry(void* arg);    void threadMain();    void DealParam(PPARAM* pParam);private:    std::list<T>m_lstData;    HANDLEm_hCompletetionPort;    HANDLEm_hThread;    std::atomic<bool>m_lock;&#125;;template<class T>inline CWTQueue<T>::CWTQueue()&#123;    m_hCompletetionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 1);    m_hThread = INVALID_HANDLE_VALUE;    if (m_hCompletetionPort != NULL) &#123;        m_hThread = (HANDLE)_beginthread(&CWTQueue::threadEntry, 0, this);    &#125;&#125;template<class T>inline CWTQueue<T>::~CWTQueue()&#123;    if (m_lock)return;    m_lock = true;    PostQueuedCompletionStatus(m_hCompletetionPort, 0, NULL, NULL);    WaitForSingleObject(m_hThread, INFINITE);    //防御性编程先置空 在释放    if (m_hCompletetionPort != NULL) &#123;        HANDLE hTemp = m_hCompletetionPort;        m_hCompletetionPort = NULL;        CloseHandle(hTemp);    &#125;&#125;template<class T>inline bool CWTQueue<T>::PushBack(const T& data)&#123;    IocpParam* pParam = new IocpParam(WQPush, data);    if (m_lock == true) &#123;        delete pParam;        return false;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)pParam, NULL);    if (ret == false)delete pParam;    //printf("push back done %d %08p\r\n", ret, (void*)pParam);    return ret;&#125;template<class T>inline bool CWTQueue<T>::PopFront(T& data)&#123;    HANDLEhEvent = CreateEvent(NULL,TRUE,FALSE,NULL);    IocpParam pParam(WQPop, data, hEvent);    if (m_lock) &#123;        if (hEvent)CloseHandle(hEvent);        return -1;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)&pParam, NULL);    if (ret == false) &#123;        CloseHandle(hEvent);        return false;    &#125;    ret = WaitForSingleObject(hEvent, INFINITE) == WAIT_OBJECT_0;    if (ret) data = pParam.Data;    return ret;&#125;template<class T>inline size_t CWTQueue<T>::Size()&#123;    HANDLEhEvent = CreateEvent(NULL, TRUE, FALSE, NULL);    IocpParam pParam(WQSize, T(), hEvent);    if (m_lock) &#123;        if(hEvent)CloseHandle(hEvent);        return -1;    &#125;    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)&pParam, NULL);    if (ret == false) &#123;        CloseHandle(hEvent);        return -1;    &#125;    ret = WaitForSingleObject(hEvent, INFINITE) == WAIT_OBJECT_0;    if (ret) return pParam.nOperator;    return ret;&#125;template<class T>inline bool CWTQueue<T>::Clear()&#123;    if (m_lock == true)return false;    IocpParam* pParam = new IocpParam(WQClear, T());    bool ret = PostQueuedCompletionStatus(m_hCompletetionPort, sizeof(PPARAM), (ULONG_PTR)pParam, NULL);    if (ret == false)delete pParam;    //printf("Clear %08p\r\n", (void*)pParam);    return true;&#125;template<class T>inline void CWTQueue<T>::threadEntry(void* arg)&#123;    CWTQueue<T>* thiz = (CWTQueue<T>*)arg;    thiz->threadMain();    _endthread();&#125;template<class T>inline void CWTQueue<T>::threadMain()&#123;    PPARAM* pParam = NULL;    ULONG_PTR CompletionKey = 0;    OVERLAPPED* Overlapped = NULL;    DWORD dwTransferred = 0;    while (GetQueuedCompletionStatus(m_hCompletetionPort,         &dwTransferred, &CompletionKey, &Overlapped, INFINITE)) &#123;        if (dwTransferred == 0 || CompletionKey == NULL) &#123;            printf("thread is prepare to exit!\r\n");            break;        &#125;        pParam = (PPARAM*)CompletionKey;        DealParam(pParam);    &#125;    //防御性编程    while ((m_hCompletetionPort,        &dwTransferred, &CompletionKey, &Overlapped, 0)) &#123;        if (dwTransferred == 0 || CompletionKey == NULL) &#123;            printf("thread is prepare to exit!\r\n");            continue;        &#125;        pParam = (PPARAM*)CompletionKey;        DealParam(pParam);    &#125;    HANDLE hTemp = m_hCompletetionPort;    m_hCompletetionPort = NULL;    CloseHandle(hTemp);&#125;template<class T>inline void CWTQueue<T>::DealParam(PPARAM* pParam)&#123;    switch (pParam->nOperator)    &#123;    case WQPush: &#123;        m_lstData.push_back(pParam->Data);        delete pParam;        //printf("delete %08p\r\n", (void*)pParam);        break;    &#125;    case WQPop: &#123;        if (m_lstData.size() > 0) &#123;            pParam->Data = m_lstData.front();            m_lstData.pop_front();        &#125;        if (pParam->hEvent != NULL) &#123;            SetEvent(pParam->hEvent);        &#125;        break;    &#125;    case WQSize: &#123;        pParam->nOperator = m_lstData.size();        if (pParam->hEvent != NULL) &#123;            SetEvent(pParam->hEvent);        &#125;        break;    &#125;    case WQClear: &#123;        m_lstData.clear();        delete pParam;        //printf("delete %08p\r\n", (void*)pParam);        break;    &#125;    default:        OutputDebugStringA("unKnown operator!\r\n");        break;    &#125;&#125;</code></pre><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><pre class=" language-C++"><code class="language-C++">/** 1 Bug测试/功能测试* 2 关键因素的测试/内存泄漏 运行的稳定性 条件性* 3 压力测试/可靠性测试* 4 性能测试*/void test(int nm) &#123;    //性能：CWTQueue push性能高 pop性能仅有1/4    //list 性能push比pop低     printf("The %d start\r\n", nm);    CWTQueue<std::string>lstString;    ULONGLONG tick0 = GetTickCount64(), tick = GetTickCount64(), total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;//完成了端口 把请求与实现 分离了        //if (GetTickCount64() - tick0 > 5) &#123;            lstString.PushBack("Hello World");            tick0 = GetTickCount64();        //&#125;        //Sleep(1);    &#125;    size_t count = lstString.Size();    printf("exit done size %d \r\n", count);    total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;        //if (GetTickCount64() - tick > 5) &#123;            std::string str;            lstString.PopFront(str);            tick = GetTickCount64();            //printf("pop from queue :%s\r\n", str.c_str());        //&#125;        //Sleep(1);    &#125;    printf("exit done size %d \r\n", count - lstString.Size());    lstString.Clear();    std::list<std::string>lstData;    total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;        lstData.push_back("hello World");    &#125;    count = lstData.size();    printf("lstData push_back size %d \r\n", lstData.size());    total = GetTickCount64();    while (GetTickCount64() - total <= 1000) &#123;        if (lstData.size() > 0)lstData.pop_back();    &#125;    printf("lstData pop_back size %d \r\n", count - lstData.size());&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 高并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> thread </tag>
            
            <tag> IOCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atomic操作</title>
      <link href="/2023/080737660.html"/>
      <url>/2023/080737660.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>C++原子变量是一种多线程编程中常用的同步机制，它能够确保对共享变量的操作在执行时不会被其他线程的操作干扰，从而避免竞态条件和死锁等问题。</p><p>原子变量可以看作是一种特殊的类型，它具有类似于普通变量的操作，但是这些操作都是原子级别的，即要么全部完成，要么全部未完成。C++标准库提供了丰富的原子类型，包括整型、指针、布尔值等，使用方法也非常简单，只需要通过std::atomic定义一个原子变量即可，其中T表示变量的类型。</p><p>在普通的变量中，并发的访问它可能会导致数据竞争，竞争的后果会导致操作过程不会按照正确的顺序进行操作。</p><h2 id="is-lock-free函数"><a href="#is-lock-free函数" class="headerlink" title="is_lock_free函数"></a>is_lock_free函数</h2><p>is_lock_free函数是一个成员函数，用于检查当前atomic对象是否支持无锁操作。调用此成员函数不会启动任何数据竞争。</p><pre class=" language-C++"><code class="language-C++">bool is_lock_free() const volatile noexcept;bool is_lock_free() const noexcept;</code></pre><p>返回值：如果当前atomic对象支持无锁操作，则返回true；否则返回false。</p><pre class=" language-C++"><code class="language-C++">#include <iostream>#include <atomic> int main()&#123;    std::atomic<int> a;    std::cout << std::boolalpha                // 显示 true 或 false，而不是 1 或 0              << "std::atomic<int> is "              << (a.is_lock_free() ? "" : "not ")              << "lock-free\n";     std::atomic_flag f;    std::cout << "std::atomic_flag is "              << (f.is_lock_free() ? "" : "not ")              << "lock-free\n";&#125;</code></pre><pre class=" language-C++"><code class="language-C++">std::atomic<int> is not lock-freestd::atomic_flag is lock-free</code></pre><p>示例中，首先定义了一个atomic类型的对象a和一个atomic_flag类型的对象f，并分别调用了它们的is_lock_free函数来检查它们是否支持无锁操作。由于int类型可能会有多个字节，所以它可能需要加锁才能保证原子性，因此a.is_lock_free()返回false；而atomic_flag类型是一个布尔型（只占一个字节），所以它可以使用汇编指令来实现无锁操作，因此f.is_lock_free()返回true。</p><h2 id="store函数"><a href="#store函数" class="headerlink" title="store函数"></a>store函数</h2><p>std::atomic::store()是一个成员函数，用于将给定的值存储到原子对象中。</p><pre class=" language-C++"><code class="language-C++">void store(T desired, std::memory_order order = std::memory_order_seq_cst) volatile noexcept;void store(T desired, std::memory_order order = std::memory_order_seq_cst) noexcept;//desired：要存储的值。//order：存储操作的内存顺序。默认是std::memory_order_seq_cst（顺序一致性）。</code></pre><p>示例</p><pre class=" language-C++"><code class="language-C++">#include <iostream>#include <atomic>int main()&#123;    std::atomic<int> atomic_int(0);    int val = 10;    atomic_int.store(val);    std::cout << "Value stored in atomic object: " << atomic_int << std::endl;    return 0;&#125;</code></pre><pre class=" language-C++"><code class="language-C++">Value stored in atomic object: 10</code></pre><p>例子中，首先定义了一个std::atomic类型的原子变量atomic_int，初始值为0。然后，使用store()函数将变量val的值存储到atomic_int中。最后，打印出存储在原子对象中的值。</p><p>需要注意的是，在多线程环境下使用原子变量和操作时，需要使用适当的内存顺序来保证数据的正确性和一致性。因此，store()函数中的order参数可以用来指定不同的内存顺序。如果不确定如何选择内存顺序，请使用默认值std::memory_order_seq_cst，它是最常用和最保险的。</p><h2 id="load函数"><a href="#load函数" class="headerlink" title="load函数"></a>load函数</h2><p>load函数用于获取原子变量的当前值。它有以下两种形式：</p><pre class=" language-C++"><code class="language-C++">T load(memory_order order = memory_order_seq_cst) const noexcept;operator T() const noexcept;</code></pre><p>其中，第一种形式是显式调用load函数，第二种形式是通过重载类型转换运算符实现隐式调用。</p><p>load函数的参数memory_order表示内存序，也就是对原子变量的读操作要遵循哪种内存模型。</p><p>使用load函数时，如果不指定memory_order，则默认为memory_order_seq_cst。</p><p>load函数的返回值类型为T，即原子变量的类型。在使用load函数时需要指定类型参数T。如果使用第二种形式的load函数，则无需指定类型参数T，程序会自动根据上下文推断出类型。</p><pre class=" language-C++"><code class="language-C++">std::atomic<int> foo (0);int x;do &#123;    x = foo.load(std::memory_order_relaxed);  // get value atomically&#125; while (x==0);</code></pre><h2 id="exchange函数"><a href="#exchange函数" class="headerlink" title="exchange函数"></a>exchange函数</h2><p>访问和修改包含的值，将包含的值替换并返回它前面的值。</p><pre class=" language-C++"><code class="language-C++">template< class T >T exchange( volatile std::atomic<T>* obj, T desired );</code></pre><p>其中，obj参数指向需要替换值的atomic对象，desired参数为期望替换成的值。如果替换成功，则返回原来的值。</p><p>整个操作是原子的（原子读-修改-写操作）：从读取（要返回）值的那一刻到此函数修改值的那一刻，该值不受其他线程的影响。</p><p>示例</p><pre class=" language-C++"><code class="language-C++">#include <iostream>       // std::cout#include <atomic>         // std::atomic#include <thread>         // std::thread#include <vector>         // std::vectorstd::atomic<bool> ready (false);std::atomic<bool> winner (false);void count1m (int id) &#123;  while (!ready) &#123;&#125;                  // wait for the ready signal  for (int i=0; i<1000000; ++i) &#123;&#125;   // go!, count to 1 million  if (!winner.exchange(true)) &#123; std::cout << "thread #" << id << " won!\n"; &#125;&#125;;int main ()&#123;  std::vector<std::thread> threads;  std::cout << "spawning 10 threads that count to 1 million...\n";  for (int i=1; i<=10; ++i) threads.push_back(std::thread(count1m,i));  ready = true;  for (auto& th : threads) th.join();  return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> thread </tag>
            
            <tag> atomic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理权限的检查以及获得</title>
      <link href="/2023/080730182.html"/>
      <url>/2023/080730182.html</url>
      
        <content type="html"><![CDATA[<h2 id="错误查询并在Debug栏进行显示"><a href="#错误查询并在Debug栏进行显示" class="headerlink" title="错误查询并在Debug栏进行显示"></a>错误查询并在Debug栏进行显示</h2><pre class=" language-C++"><code class="language-C++">void ShowError() &#123;    LPWSTR lpMessageBuf = NULL;    //strerror(errno)标准C语言库    FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER,        NULL, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),        (LPWSTR)&lpMessageBuf, 0, NULL);    OutputDebugString(lpMessageBuf);    LocalFree(lpMessageBuf);&#125;</code></pre><h2 id="采用hToken进行权限查询，是否以管理员方式运行"><a href="#采用hToken进行权限查询，是否以管理员方式运行" class="headerlink" title="采用hToken进行权限查询，是否以管理员方式运行"></a>采用hToken进行权限查询，是否以管理员方式运行</h2><pre class=" language-C++"><code class="language-C++">bool IsAdmin() &#123;    HANDLE hToken = NULL;    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken)) &#123;        ShowError();        return false;    &#125;    TOKEN_ELEVATION eve;    DWORD len = 0;    if (!GetTokenInformation(hToken, TokenElevation, &eve, sizeof(eve), &len)) &#123;        ShowError();        return false;    &#125;    CloseHandle(hToken);    if (len == sizeof(eve))        return eve.TokenIsElevated;    printf("Length of TokenInformation is %d\r\n", len);    return false;&#125;</code></pre><h2 id="以管理员方式运行程序"><a href="#以管理员方式运行程序" class="headerlink" title="以管理员方式运行程序"></a>以管理员方式运行程序</h2><pre class=" language-C++"><code class="language-C++">HANDLE hToken = NULL;    BOOL ret = LogonUser(L"Administrator", NULL, NULL, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, &hToken);    if (!ret) &#123;        ShowError();        MessageBox(NULL, _T("登录错误"), _T("程序错误"), 0);        exit(0);    &#125;    OutputDebugString(L"LogOn AmniniStrator success!\r\n");    STARTUPINFO si = &#123; 0 &#125;;    PROCESS_INFORMATION pi = &#123; 0 &#125;;    TCHAR sPath[MAX_PATH] = _T("");    GetCurrentDirectory(MAX_PATH, sPath);    CString strCmd = sPath;    strCmd += _T("\RemoteCtrl.exe");    CString strCmd2 = GetCommandLine();    strCmd2.Replace(_T("""), _T(""));    //ret = CreateProcessWithTokenW(hToken, LOGON_WITH_PROFILE, NULL, (LPWSTR)(LPCWSTR)strCmd, CREATE_UNICODE_ENVIRONMENT, NULL, NULL, &si, &pi);    ret = CreateProcessWithLogonW(_T("Administrator"), NULL, NULL, LOGON_WITH_PROFILE, NULL, (LPWSTR)(LPCWSTR)strCmd, CREATE_UNICODE_ENVIRONMENT, NULL, NULL, &si, &pi);    CloseHandle(hToken);    if (!ret) &#123;        ShowError();        MessageBox(NULL, strCmd, _T("创建进程失败"), 0);        exit(0);    &#125;    WaitForSingleObject(pi.hProcess, INFINITE);    CloseHandle(pi.hProcess);    CloseHandle(pi.hThread);</code></pre><p><strong>如果提示此用户无法登录，因为该帐户当前已被禁用则采用以下方式进行设置</strong></p><p><img src="/2023/080730182/8b8d73aaa4476f103e1a4026b927b318-1691401961486-1.png" alt="8b8d73aaa4476f103e1a4026b927b318"></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> hToken </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机启动的两种方式</title>
      <link href="/2023/080716572.html"/>
      <url>/2023/080716572.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用注册表"><a href="#1-使用注册表" class="headerlink" title="1 使用注册表"></a>1 使用注册表</h2><pre class=" language-C++"><code class="language-C++">void ChooseAutoInvoke() &#123;    CString strPath = CString(_T("C:\Windows\System32\RemoteCtrl.exe"));    if (PathFileExists(strPath)) &#123;        return;    &#125;    CString strSubKey = _T("SOFTWARE\Microsoft\Windows\CurrentVersion\Run");    CString strInfo = _T("该程序只允许用于合法的用途！\n");    strInfo += _T("继续使用该程序，将使得这台机器处于被监控状态！\n");    strInfo += _T("如果你不需要，请按“取消”按钮，退出程序");    strInfo += _T("按下“是”按钮，将该程序被复制到你的机器上，平随着系统启动而自动运行\n");    strInfo += _T("按下“否”按钮，程序只运行一次，不会在系统内留下任何东西\n");    int ret = MessageBox(NULL, strInfo, _T("警告"), MB_YESNOCANCEL | MB_ICONWARNING | MB_TOPMOST);    if (ret == IDYES) &#123;        char sPath[MAX_PATH]&#123; "" &#125;;        char sSys[MAX_PATH]&#123; "" &#125;;        std::string strExe = "\RemoteCtrl.exe ";        GetCurrentDirectoryA(MAX_PATH, sPath);        GetSystemDirectoryA(sSys, sizeof(sSys));        std::string strCmd = "mklink " + std::string(sSys) + strExe + std::string(sPath) + strExe;        system(strCmd.c_str());        TRACE("ret= %d\r\n", ret);        HKEY hKey = NULL;        ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, strSubKey, 0, KEY_WRITE, &hKey);//KEY_ALL_ACCESS|KEY_WOW64_64KEY        if (ret != ERROR_SUCCESS) &#123;            RegCloseKey(hKey);            MessageBox(NULL, _T("设置自动开机启动失败！是否权限不足？\r\n程序启动失败！"), _T("错误"), MB_ICONERROR | MB_TOPMOST);            exit(0);        &#125;        TCHAR sSysPath[MAX_PATH] = _T("");        GetSystemDirectoryW(sSysPath, MAX_PATH);        CString strPath = sSysPath + CString(_T("\RemoteCtrl.exe"));        ret = RegSetValueEx(hKey, _T("RemoteCtrl"), 0, REG_SZ, (BYTE*)(LPCTSTR)strPath, strPath.GetLength() * sizeof(TCHAR));        if (ret != ERROR_SUCCESS) &#123;            RegCloseKey(hKey);            MessageBox(NULL, _T("设置自动开机启动失败！是否权限不足？\r\n程序启动失败！"), _T("错误"), MB_ICONERROR | MB_TOPMOST);            exit(0);        &#125;        RegCloseKey(hKey);    &#125;    else if (ret == IDCANCEL) &#123;        exit(0);    &#125;&#125;</code></pre><h2 id="2-使用开机启动项"><a href="#2-使用开机启动项" class="headerlink" title="2 使用开机启动项"></a>2 使用开机启动项</h2><ol><li>win+R 输入shell:startup</li><li>将文件复制到该文件夹下</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用指南</title>
      <link href="/2023/080644954.html"/>
      <url>/2023/080644954.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先需要安装Nodejs"><a href="#首先需要安装Nodejs" class="headerlink" title="首先需要安装Nodejs"></a>首先需要安装Nodejs</h2><p>打开网站<code>Nodejs.org</code>进行下载</p><h2 id="window下打开powershell进行操作"><a href="#window下打开powershell进行操作" class="headerlink" title="window下打开powershell进行操作"></a>window下打开powershell进行操作</h2><pre class=" language-powershell"><code class="language-powershell">node <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看node版本</span>npm <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看npm版本</span>npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry=http:<span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token comment" spellcheck="true">#安装淘宝的cnpm 管理器</span>cnpm <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看cnpm版本</span>cnpm install <span class="token operator">-</span>g hexo<span class="token operator">-</span><span class="token function">cli</span>    <span class="token comment" spellcheck="true">#安装hexo框架</span>hexo <span class="token operator">-</span>v<span class="token comment" spellcheck="true">#查看hexo版本</span>mkdir blog<span class="token comment" spellcheck="true">#创建blog目录</span>cd blog <span class="token comment" spellcheck="true">#进入blog目录</span>sudo hexo init <span class="token comment" spellcheck="true">#生成博客 初始化博客</span>hexo s<span class="token comment" spellcheck="true">#启动本地博客服务</span>http:<span class="token operator">/</span><span class="token operator">/</span>localhost:4000<span class="token operator">/</span><span class="token comment" spellcheck="true">#本地访问地址</span>hexo n <span class="token string">"我的第一篇文章"</span> <span class="token comment" spellcheck="true">#创建新的文章 </span><span class="token comment" spellcheck="true">#返回blog目录</span>hexo clean <span class="token comment" spellcheck="true">#清理</span>hexo g <span class="token comment" spellcheck="true">#生成</span><span class="token comment" spellcheck="true">#Github创建一个新的仓库 YourGithubName.github.io</span>cnpm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token comment" spellcheck="true">#在blog目录下安装git部署插件</span></code></pre><h2 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h2><pre class=" language-powershell"><code class="language-powershell">  <span class="token comment" spellcheck="true"># Deployment</span>    <span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>    deploy:          <span class="token function">type</span>: <span class="token string">'git'</span>           repo: git@github<span class="token punctuation">.</span>com:Mrmengqiushisan<span class="token operator">/</span>mrmengqiushisan<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git          branch: main</code></pre><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><pre class=" language-powershell"><code class="language-powershell">hexo d<span class="token comment" spellcheck="true">#部署到Github仓库里</span>https:<span class="token operator">/</span><span class="token operator">/</span>mrmengqiushisan<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>  <span class="token comment" spellcheck="true">#访问这个地址可以查看博客</span></code></pre><h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><pre class=" language-powershell"><code class="language-powershell">git clone https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>litten<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>yilia<span class="token punctuation">.</span>git themes<span class="token operator">/</span>yilia  <span class="token comment" spellcheck="true">#下载yilia主题到本地</span><span class="token comment" spellcheck="true">#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span>hexo c<span class="token comment" spellcheck="true">#清理一下</span>hexo g<span class="token comment" spellcheck="true">#生成</span>hexo d<span class="token comment" spellcheck="true">#部署到远程Github仓库</span></code></pre><h2 id="主题更换链接"><a href="#主题更换链接" class="headerlink" title="主题更换链接"></a>主题更换链接</h2><p><a href="https://hexo.io/themes/"><code>https://hexo.io/themes/</code></a></p><h2 id="基于Hexo的matery主题搭建博客并优化"><a href="#基于Hexo的matery主题搭建博客并优化" class="headerlink" title="基于Hexo的matery主题搭建博客并优化"></a>基于Hexo的matery主题搭建博客并优化</h2><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651"><code>https://blog.csdn.net/jspnetcn/article/details/104111651</code></a></p>]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/080516107.html"/>
      <url>/2023/080516107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
